{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: Not Available\nGCC: x86_64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+fddcf06", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/0_real_100_fake/helper/annotation/unpaired_no-aug_32.json',\n        img_prefix=\n        '../dataset/xray/composed/0_real_100_fake/unpaired_no-aug_32/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/0_real_100_fake/crcnn/unpaired_no-aug_32/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 526214791, "exp_name": "crcnn_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4027, "data_time": 0.04819, "loss_rpn_cls": 0.07857, "loss_rpn_bbox": 0.00655, "s0.loss_cls": 0.28109, "s0.acc": 90.02344, "s0.loss_bbox": 0.03011, "s1.loss_cls": 0.12357, "s1.acc": 95.89844, "s1.loss_bbox": 0.01598, "s2.loss_cls": 0.06339, "s2.acc": 90.66602, "s2.loss_bbox": 0.0036, "loss": 0.60286, "time": 0.37987}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4027, "data_time": 0.00404, "loss_rpn_cls": 0.04701, "loss_rpn_bbox": 0.00735, "s0.loss_cls": 0.07863, "s0.acc": 98.35742, "s0.loss_bbox": 0.0303, "s1.loss_cls": 0.0288, "s1.acc": 98.85742, "s1.loss_bbox": 0.01894, "s2.loss_cls": 0.00874, "s2.acc": 99.36719, "s2.loss_bbox": 0.00536, "loss": 0.22513, "time": 0.32965}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4027, "data_time": 0.00395, "loss_rpn_cls": 0.03351, "loss_rpn_bbox": 0.00495, "s0.loss_cls": 0.07963, "s0.acc": 98.11914, "s0.loss_bbox": 0.03047, "s1.loss_cls": 0.02958, "s1.acc": 98.49219, "s1.loss_bbox": 0.02103, "s2.loss_cls": 0.01139, "s2.acc": 98.95703, "s2.loss_bbox": 0.00826, "loss": 0.21881, "time": 0.33087}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4027, "data_time": 0.00408, "loss_rpn_cls": 0.03297, "loss_rpn_bbox": 0.00559, "s0.loss_cls": 0.07749, "s0.acc": 98.23633, "s0.loss_bbox": 0.02919, "s1.loss_cls": 0.0287, "s1.acc": 98.61523, "s1.loss_bbox": 0.01919, "s2.loss_cls": 0.01148, "s2.acc": 98.60156, "s2.loss_bbox": 0.0084, "loss": 0.213, "time": 0.34075}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4027, "data_time": 0.00609, "loss_rpn_cls": 0.03213, "loss_rpn_bbox": 0.00631, "s0.loss_cls": 0.08125, "s0.acc": 98.03125, "s0.loss_bbox": 0.03215, "s1.loss_cls": 0.02903, "s1.acc": 98.40234, "s1.loss_bbox": 0.02225, "s2.loss_cls": 0.0109, "s2.acc": 98.56836, "s2.loss_bbox": 0.0093, "loss": 0.22332, "time": 0.33153}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4027, "data_time": 0.00401, "loss_rpn_cls": 0.03324, "loss_rpn_bbox": 0.00731, "s0.loss_cls": 0.08165, "s0.acc": 98.06445, "s0.loss_bbox": 0.03254, "s1.loss_cls": 0.03202, "s1.acc": 98.35938, "s1.loss_bbox": 0.02689, "s2.loss_cls": 0.01311, "s2.acc": 98.65039, "s2.loss_bbox": 0.01327, "loss": 0.24002, "time": 0.33411}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.02529, "loss_rpn_bbox": 0.00602, "s0.loss_cls": 0.08424, "s0.acc": 97.86719, "s0.loss_bbox": 0.03669, "s1.loss_cls": 0.03401, "s1.acc": 98.15039, "s1.loss_bbox": 0.03002, "s2.loss_cls": 0.01337, "s2.acc": 98.22266, "s2.loss_bbox": 0.01388, "loss": 0.24352, "time": 0.33313}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4027, "data_time": 0.00431, "loss_rpn_cls": 0.03168, "loss_rpn_bbox": 0.00584, "s0.loss_cls": 0.08142, "s0.acc": 97.93945, "s0.loss_bbox": 0.03573, "s1.loss_cls": 0.03403, "s1.acc": 98.10938, "s1.loss_bbox": 0.03199, "s2.loss_cls": 0.01388, "s2.acc": 98.16602, "s2.loss_bbox": 0.01597, "loss": 0.25055, "time": 0.33287}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4027, "data_time": 0.00401, "loss_rpn_cls": 0.03103, "loss_rpn_bbox": 0.00758, "s0.loss_cls": 0.07561, "s0.acc": 98.14258, "s0.loss_bbox": 0.03108, "s1.loss_cls": 0.02841, "s1.acc": 98.53125, "s1.loss_bbox": 0.02696, "s2.loss_cls": 0.01166, "s2.acc": 98.64648, "s2.loss_bbox": 0.01247, "loss": 0.2248, "time": 0.32927}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4027, "data_time": 0.00416, "loss_rpn_cls": 0.02888, "loss_rpn_bbox": 0.00603, "s0.loss_cls": 0.08812, "s0.acc": 97.99414, "s0.loss_bbox": 0.03259, "s1.loss_cls": 0.03331, "s1.acc": 98.29102, "s1.loss_bbox": 0.02604, "s2.loss_cls": 0.01224, "s2.acc": 98.64453, "s2.loss_bbox": 0.01064, "loss": 0.23784, "time": 0.33285}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4027, "data_time": 0.00422, "loss_rpn_cls": 0.02569, "loss_rpn_bbox": 0.00638, "s0.loss_cls": 0.07197, "s0.acc": 98.08789, "s0.loss_bbox": 0.03184, "s1.loss_cls": 0.03128, "s1.acc": 98.19727, "s1.loss_bbox": 0.03218, "s2.loss_cls": 0.01285, "s2.acc": 98.21484, "s2.loss_bbox": 0.0144, "loss": 0.2266, "time": 0.33626}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.03318, "loss_rpn_bbox": 0.00646, "s0.loss_cls": 0.06839, "s0.acc": 98.23633, "s0.loss_bbox": 0.02654, "s1.loss_cls": 0.03016, "s1.acc": 98.22266, "s1.loss_bbox": 0.0269, "s2.loss_cls": 0.01314, "s2.acc": 98.2832, "s2.loss_bbox": 0.01532, "loss": 0.22009, "time": 0.32598}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4027, "data_time": 0.00418, "loss_rpn_cls": 0.02698, "loss_rpn_bbox": 0.00657, "s0.loss_cls": 0.08099, "s0.acc": 97.88867, "s0.loss_bbox": 0.03638, "s1.loss_cls": 0.03371, "s1.acc": 98.21094, "s1.loss_bbox": 0.03089, "s2.loss_cls": 0.01214, "s2.acc": 98.62891, "s2.loss_bbox": 0.01339, "loss": 0.24105, "time": 0.32969}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4027, "data_time": 0.00418, "loss_rpn_cls": 0.02711, "loss_rpn_bbox": 0.00733, "s0.loss_cls": 0.07701, "s0.acc": 98.00195, "s0.loss_bbox": 0.03494, "s1.loss_cls": 0.02961, "s1.acc": 98.39648, "s1.loss_bbox": 0.02786, "s2.loss_cls": 0.01043, "s2.acc": 98.96094, "s2.loss_bbox": 0.01144, "loss": 0.22574, "time": 0.32684}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4027, "data_time": 0.00426, "loss_rpn_cls": 0.02414, "loss_rpn_bbox": 0.00576, "s0.loss_cls": 0.08392, "s0.acc": 98.00586, "s0.loss_bbox": 0.03731, "s1.loss_cls": 0.0308, "s1.acc": 98.43945, "s1.loss_bbox": 0.02949, "s2.loss_cls": 0.01247, "s2.acc": 98.59375, "s2.loss_bbox": 0.01547, "loss": 0.23936, "time": 0.33661}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4027, "data_time": 0.00411, "loss_rpn_cls": 0.02995, "loss_rpn_bbox": 0.00749, "s0.loss_cls": 0.09699, "s0.acc": 97.70312, "s0.loss_bbox": 0.03791, "s1.loss_cls": 0.03735, "s1.acc": 98.03906, "s1.loss_bbox": 0.0304, "s2.loss_cls": 0.01408, "s2.acc": 98.47266, "s2.loss_bbox": 0.01278, "loss": 0.26695, "time": 0.33446}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4027, "data_time": 0.00422, "loss_rpn_cls": 0.01904, "loss_rpn_bbox": 0.00577, "s0.loss_cls": 0.09184, "s0.acc": 97.77734, "s0.loss_bbox": 0.04019, "s1.loss_cls": 0.03547, "s1.acc": 98.31055, "s1.loss_bbox": 0.03162, "s2.loss_cls": 0.01322, "s2.acc": 98.4668, "s2.loss_bbox": 0.01324, "loss": 0.2504, "time": 0.33008}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4027, "data_time": 0.00423, "loss_rpn_cls": 0.02079, "loss_rpn_bbox": 0.00578, "s0.loss_cls": 0.08651, "s0.acc": 97.9668, "s0.loss_bbox": 0.03792, "s1.loss_cls": 0.03093, "s1.acc": 98.58789, "s1.loss_bbox": 0.02659, "s2.loss_cls": 0.01079, "s2.acc": 98.8457, "s2.loss_bbox": 0.01135, "loss": 0.23067, "time": 0.33528}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4027, "data_time": 0.00433, "loss_rpn_cls": 0.02493, "loss_rpn_bbox": 0.00692, "s0.loss_cls": 0.08429, "s0.acc": 98.13477, "s0.loss_bbox": 0.03645, "s1.loss_cls": 0.02987, "s1.acc": 98.63672, "s1.loss_bbox": 0.02723, "s2.loss_cls": 0.01095, "s2.acc": 98.88086, "s2.loss_bbox": 0.01091, "loss": 0.23155, "time": 0.33335}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4027, "data_time": 0.00417, "loss_rpn_cls": 0.01548, "loss_rpn_bbox": 0.00564, "s0.loss_cls": 0.09064, "s0.acc": 97.24414, "s0.loss_bbox": 0.04687, "s1.loss_cls": 0.04048, "s1.acc": 97.47266, "s1.loss_bbox": 0.04063, "s2.loss_cls": 0.01611, "s2.acc": 97.91992, "s2.loss_bbox": 0.01862, "loss": 0.27446, "time": 0.33752}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4027, "data_time": 0.00419, "loss_rpn_cls": 0.01688, "loss_rpn_bbox": 0.00444, "s0.loss_cls": 0.08502, "s0.acc": 97.77344, "s0.loss_bbox": 0.03963, "s1.loss_cls": 0.03579, "s1.acc": 98.0918, "s1.loss_bbox": 0.03417, "s2.loss_cls": 0.01295, "s2.acc": 98.5332, "s2.loss_bbox": 0.01511, "loss": 0.24399, "time": 0.33197}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4027, "data_time": 0.00423, "loss_rpn_cls": 0.01469, "loss_rpn_bbox": 0.00514, "s0.loss_cls": 0.09605, "s0.acc": 97.41406, "s0.loss_bbox": 0.04807, "s1.loss_cls": 0.0391, "s1.acc": 97.83594, "s1.loss_bbox": 0.04043, "s2.loss_cls": 0.01372, "s2.acc": 98.52344, "s2.loss_bbox": 0.01736, "loss": 0.27456, "time": 0.3361}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4027, "data_time": 0.02446, "loss_rpn_cls": 0.01694, "loss_rpn_bbox": 0.0053, "s0.loss_cls": 0.09513, "s0.acc": 97.44727, "s0.loss_bbox": 0.04724, "s1.loss_cls": 0.03703, "s1.acc": 97.99219, "s1.loss_bbox": 0.03723, "s2.loss_cls": 0.01338, "s2.acc": 98.47656, "s2.loss_bbox": 0.0161, "loss": 0.26836, "time": 0.35438}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 4027, "data_time": 0.0042, "loss_rpn_cls": 0.0237, "loss_rpn_bbox": 0.004, "s0.loss_cls": 0.09172, "s0.acc": 97.74414, "s0.loss_bbox": 0.03939, "s1.loss_cls": 0.03845, "s1.acc": 98.05469, "s1.loss_bbox": 0.03423, "s2.loss_cls": 0.01455, "s2.acc": 98.35352, "s2.loss_bbox": 0.01492, "loss": 0.26096, "time": 0.33781}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 4027, "data_time": 0.0039, "loss_rpn_cls": 0.0219, "loss_rpn_bbox": 0.00719, "s0.loss_cls": 0.08931, "s0.acc": 97.69141, "s0.loss_bbox": 0.04081, "s1.loss_cls": 0.03596, "s1.acc": 98.00781, "s1.loss_bbox": 0.03465, "s2.loss_cls": 0.01286, "s2.acc": 98.5957, "s2.loss_bbox": 0.01504, "loss": 0.25774, "time": 0.33387}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 4027, "data_time": 0.04463, "loss_rpn_cls": 0.02071, "loss_rpn_bbox": 0.00711, "s0.loss_cls": 0.09057, "s0.acc": 97.69531, "s0.loss_bbox": 0.04143, "s1.loss_cls": 0.03646, "s1.acc": 97.99609, "s1.loss_bbox": 0.03411, "s2.loss_cls": 0.01194, "s2.acc": 98.79883, "s2.loss_bbox": 0.01211, "loss": 0.25443, "time": 0.37502}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 4027, "data_time": 0.00432, "loss_rpn_cls": 0.022, "loss_rpn_bbox": 0.00623, "s0.loss_cls": 0.07926, "s0.acc": 97.85352, "s0.loss_bbox": 0.03597, "s1.loss_cls": 0.03385, "s1.acc": 98.18555, "s1.loss_bbox": 0.03696, "s2.loss_cls": 0.01225, "s2.acc": 98.82227, "s2.loss_bbox": 0.01841, "loss": 0.24492, "time": 0.34228}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 4027, "data_time": 0.00408, "loss_rpn_cls": 0.02204, "loss_rpn_bbox": 0.00632, "s0.loss_cls": 0.08019, "s0.acc": 98.05664, "s0.loss_bbox": 0.03194, "s1.loss_cls": 0.03304, "s1.acc": 98.37109, "s1.loss_bbox": 0.03075, "s2.loss_cls": 0.01224, "s2.acc": 98.75586, "s2.loss_bbox": 0.01338, "loss": 0.22991, "time": 0.33614}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 4027, "data_time": 0.0042, "loss_rpn_cls": 0.03221, "loss_rpn_bbox": 0.00663, "s0.loss_cls": 0.08494, "s0.acc": 97.82227, "s0.loss_bbox": 0.03545, "s1.loss_cls": 0.03674, "s1.acc": 98.0625, "s1.loss_bbox": 0.03407, "s2.loss_cls": 0.0135, "s2.acc": 98.58398, "s2.loss_bbox": 0.0148, "loss": 0.25835, "time": 0.33625}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 4027, "data_time": 0.00433, "loss_rpn_cls": 0.02342, "loss_rpn_bbox": 0.0058, "s0.loss_cls": 0.07871, "s0.acc": 98.13477, "s0.loss_bbox": 0.03483, "s1.loss_cls": 0.03112, "s1.acc": 98.5, "s1.loss_bbox": 0.03009, "s2.loss_cls": 0.012, "s2.acc": 98.77734, "s2.loss_bbox": 0.01533, "loss": 0.2313, "time": 0.33846}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 4027, "data_time": 0.00403, "loss_rpn_cls": 0.01844, "loss_rpn_bbox": 0.00626, "s0.loss_cls": 0.08924, "s0.acc": 97.61523, "s0.loss_bbox": 0.03933, "s1.loss_cls": 0.03644, "s1.acc": 97.94922, "s1.loss_bbox": 0.03405, "s2.loss_cls": 0.0135, "s2.acc": 98.39453, "s2.loss_bbox": 0.01515, "loss": 0.2524, "time": 0.32657}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 4027, "data_time": 0.00408, "loss_rpn_cls": 0.02406, "loss_rpn_bbox": 0.00594, "s0.loss_cls": 0.09073, "s0.acc": 97.77734, "s0.loss_bbox": 0.04015, "s1.loss_cls": 0.03775, "s1.acc": 98.13867, "s1.loss_bbox": 0.03839, "s2.loss_cls": 0.01351, "s2.acc": 98.7207, "s2.loss_bbox": 0.01615, "loss": 0.26667, "time": 0.3359}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 4027, "data_time": 0.00422, "loss_rpn_cls": 0.01582, "loss_rpn_bbox": 0.00412, "s0.loss_cls": 0.09452, "s0.acc": 97.57422, "s0.loss_bbox": 0.04062, "s1.loss_cls": 0.04043, "s1.acc": 97.84766, "s1.loss_bbox": 0.041, "s2.loss_cls": 0.01588, "s2.acc": 98.28516, "s2.loss_bbox": 0.02119, "loss": 0.27359, "time": 0.33225}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 4027, "data_time": 0.00415, "loss_rpn_cls": 0.02346, "loss_rpn_bbox": 0.00467, "s0.loss_cls": 0.10255, "s0.acc": 97.49414, "s0.loss_bbox": 0.04499, "s1.loss_cls": 0.04229, "s1.acc": 97.88672, "s1.loss_bbox": 0.03935, "s2.loss_cls": 0.01475, "s2.acc": 98.69531, "s2.loss_bbox": 0.01724, "loss": 0.2893, "time": 0.33521}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 4027, "data_time": 0.00403, "loss_rpn_cls": 0.01813, "loss_rpn_bbox": 0.00426, "s0.loss_cls": 0.09812, "s0.acc": 97.43359, "s0.loss_bbox": 0.04522, "s1.loss_cls": 0.03922, "s1.acc": 97.95898, "s1.loss_bbox": 0.03882, "s2.loss_cls": 0.0139, "s2.acc": 98.58594, "s2.loss_bbox": 0.01796, "loss": 0.27563, "time": 0.3425}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 4027, "data_time": 0.0042, "loss_rpn_cls": 0.01571, "loss_rpn_bbox": 0.00399, "s0.loss_cls": 0.0921, "s0.acc": 97.47266, "s0.loss_bbox": 0.04203, "s1.loss_cls": 0.03938, "s1.acc": 97.82031, "s1.loss_bbox": 0.03758, "s2.loss_cls": 0.01481, "s2.acc": 98.42969, "s2.loss_bbox": 0.01566, "loss": 0.26126, "time": 0.33412}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 4027, "data_time": 0.00402, "loss_rpn_cls": 0.02522, "loss_rpn_bbox": 0.00481, "s0.loss_cls": 0.09705, "s0.acc": 97.63672, "s0.loss_bbox": 0.0434, "s1.loss_cls": 0.0375, "s1.acc": 98.10742, "s1.loss_bbox": 0.035, "s2.loss_cls": 0.01416, "s2.acc": 98.51758, "s2.loss_bbox": 0.01499, "loss": 0.27212, "time": 0.3421}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 4027, "data_time": 0.00419, "loss_rpn_cls": 0.01816, "loss_rpn_bbox": 0.00485, "s0.loss_cls": 0.09019, "s0.acc": 97.68945, "s0.loss_bbox": 0.03905, "s1.loss_cls": 0.04065, "s1.acc": 97.89648, "s1.loss_bbox": 0.03824, "s2.loss_cls": 0.01629, "s2.acc": 98.39258, "s2.loss_bbox": 0.02002, "loss": 0.26745, "time": 0.33341}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 4027, "data_time": 0.00419, "loss_rpn_cls": 0.01976, "loss_rpn_bbox": 0.00639, "s0.loss_cls": 0.0976, "s0.acc": 97.4043, "s0.loss_bbox": 0.04533, "s1.loss_cls": 0.04114, "s1.acc": 97.70312, "s1.loss_bbox": 0.04022, "s2.loss_cls": 0.01508, "s2.acc": 98.47266, "s2.loss_bbox": 0.01505, "loss": 0.28057, "time": 0.34025}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 4027, "data_time": 0.00423, "loss_rpn_cls": 0.02003, "loss_rpn_bbox": 0.00649, "s0.loss_cls": 0.07771, "s0.acc": 97.94727, "s0.loss_bbox": 0.03836, "s1.loss_cls": 0.03288, "s1.acc": 98.41602, "s1.loss_bbox": 0.03734, "s2.loss_cls": 0.0123, "s2.acc": 98.76367, "s2.loss_bbox": 0.02025, "loss": 0.24537, "time": 0.33293}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 4027, "data_time": 0.00412, "loss_rpn_cls": 0.01012, "loss_rpn_bbox": 0.00606, "s0.loss_cls": 0.09226, "s0.acc": 97.45703, "s0.loss_bbox": 0.03903, "s1.loss_cls": 0.04196, "s1.acc": 97.75586, "s1.loss_bbox": 0.04151, "s2.loss_cls": 0.01547, "s2.acc": 98.44531, "s2.loss_bbox": 0.02099, "loss": 0.26741, "time": 0.33127}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 4027, "data_time": 0.00418, "loss_rpn_cls": 0.0137, "loss_rpn_bbox": 0.00501, "s0.loss_cls": 0.08376, "s0.acc": 97.70898, "s0.loss_bbox": 0.03678, "s1.loss_cls": 0.03863, "s1.acc": 97.94531, "s1.loss_bbox": 0.04053, "s2.loss_cls": 0.01559, "s2.acc": 98.11914, "s2.loss_bbox": 0.01961, "loss": 0.2536, "time": 0.33385}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.02, "memory": 4027, "data_time": 0.00447, "loss_rpn_cls": 0.01645, "loss_rpn_bbox": 0.00534, "s0.loss_cls": 0.08807, "s0.acc": 97.75977, "s0.loss_bbox": 0.03968, "s1.loss_cls": 0.03665, "s1.acc": 98.17773, "s1.loss_bbox": 0.03683, "s2.loss_cls": 0.01321, "s2.acc": 98.72461, "s2.loss_bbox": 0.01699, "loss": 0.25323, "time": 0.33175}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.02, "memory": 4027, "data_time": 0.00424, "loss_rpn_cls": 0.01258, "loss_rpn_bbox": 0.00408, "s0.loss_cls": 0.08969, "s0.acc": 97.47656, "s0.loss_bbox": 0.044, "s1.loss_cls": 0.03934, "s1.acc": 97.6582, "s1.loss_bbox": 0.04424, "s2.loss_cls": 0.01502, "s2.acc": 98.0918, "s2.loss_bbox": 0.02193, "loss": 0.27088, "time": 0.33683}
{"mode": "val", "epoch": 1, "iter": 1912, "lr": 0.02, "bbox_mAP": 0.0, "bbox_mAP_50": 0.0, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.000 0.000 0.000 0.000 -1.000 -1.000"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.02, "memory": 4027, "data_time": 0.04724, "loss_rpn_cls": 0.0194, "loss_rpn_bbox": 0.0047, "s0.loss_cls": 0.08395, "s0.acc": 97.51172, "s0.loss_bbox": 0.03924, "s1.loss_cls": 0.03744, "s1.acc": 97.88086, "s1.loss_bbox": 0.03645, "s2.loss_cls": 0.01359, "s2.acc": 98.68945, "s2.loss_bbox": 0.01439, "loss": 0.24917, "time": 0.37745}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02, "memory": 4027, "data_time": 0.00408, "loss_rpn_cls": 0.0158, "loss_rpn_bbox": 0.00491, "s0.loss_cls": 0.09066, "s0.acc": 97.45312, "s0.loss_bbox": 0.03868, "s1.loss_cls": 0.04111, "s1.acc": 97.70312, "s1.loss_bbox": 0.03931, "s2.loss_cls": 0.01556, "s2.acc": 98.29102, "s2.loss_bbox": 0.01988, "loss": 0.2659, "time": 0.33218}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.02, "memory": 4027, "data_time": 0.08273, "loss_rpn_cls": 0.01475, "loss_rpn_bbox": 0.0051, "s0.loss_cls": 0.08251, "s0.acc": 97.61914, "s0.loss_bbox": 0.03995, "s1.loss_cls": 0.03511, "s1.acc": 97.99023, "s1.loss_bbox": 0.04004, "s2.loss_cls": 0.01275, "s2.acc": 98.60742, "s2.loss_bbox": 0.01884, "loss": 0.24905, "time": 0.41448}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.02, "memory": 4027, "data_time": 0.00413, "loss_rpn_cls": 0.01171, "loss_rpn_bbox": 0.00514, "s0.loss_cls": 0.09127, "s0.acc": 97.52344, "s0.loss_bbox": 0.04366, "s1.loss_cls": 0.0391, "s1.acc": 97.87891, "s1.loss_bbox": 0.0444, "s2.loss_cls": 0.0137, "s2.acc": 98.51953, "s2.loss_bbox": 0.02109, "loss": 0.27006, "time": 0.3354}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.02, "memory": 4027, "data_time": 0.00443, "loss_rpn_cls": 0.01144, "loss_rpn_bbox": 0.0037, "s0.loss_cls": 0.08978, "s0.acc": 97.41016, "s0.loss_bbox": 0.03914, "s1.loss_cls": 0.04154, "s1.acc": 97.67773, "s1.loss_bbox": 0.04198, "s2.loss_cls": 0.01586, "s2.acc": 98.25586, "s2.loss_bbox": 0.01814, "loss": 0.26157, "time": 0.33698}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.02, "memory": 4027, "data_time": 0.00409, "loss_rpn_cls": 0.01672, "loss_rpn_bbox": 0.00542, "s0.loss_cls": 0.09171, "s0.acc": 97.56641, "s0.loss_bbox": 0.0395, "s1.loss_cls": 0.0412, "s1.acc": 97.72852, "s1.loss_bbox": 0.03897, "s2.loss_cls": 0.0156, "s2.acc": 98.27734, "s2.loss_bbox": 0.018, "loss": 0.26712, "time": 0.33067}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.02, "memory": 4027, "data_time": 0.00403, "loss_rpn_cls": 0.01743, "loss_rpn_bbox": 0.00556, "s0.loss_cls": 0.07775, "s0.acc": 97.69922, "s0.loss_bbox": 0.03659, "s1.loss_cls": 0.03581, "s1.acc": 97.90625, "s1.loss_bbox": 0.03779, "s2.loss_cls": 0.01389, "s2.acc": 98.39648, "s2.loss_bbox": 0.01702, "loss": 0.24184, "time": 0.32767}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.02, "memory": 4027, "data_time": 0.00417, "loss_rpn_cls": 0.0119, "loss_rpn_bbox": 0.00682, "s0.loss_cls": 0.08499, "s0.acc": 97.22852, "s0.loss_bbox": 0.04822, "s1.loss_cls": 0.03831, "s1.acc": 97.43945, "s1.loss_bbox": 0.04657, "s2.loss_cls": 0.01483, "s2.acc": 98.22266, "s2.loss_bbox": 0.02265, "loss": 0.27428, "time": 0.33025}
