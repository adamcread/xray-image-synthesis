{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: Not Available\nGCC: x86_64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+8ddf379", "config": "model = dict(\n    type='FSAF',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='FSAFHead',\n        num_classes=2,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=1,\n            scales_per_octave=1,\n            ratios=[1.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(type='TBLRBBoxCoder', normalizer=4.0),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0,\n            reduction='none'),\n        loss_bbox=dict(\n            type='IoULoss', eps=1e-06, loss_weight=1.0, reduction='none'),\n        reg_decoded_bbox=True),\n    train_cfg=dict(\n        assigner=dict(\n            type='CenterRegionAssigner',\n            pos_scale=0.2,\n            neg_scale=0.2,\n            min_pos_iof=0.01),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/0_real_100_fake/helper/annotation/unpaired_no-aug_32.json',\n        img_prefix=\n        '../dataset/xray/composed/0_real_100_fake/unpaired_no-aug_32/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/fsaf_r101_fpn_1x_coco-9e71098f.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/0_real_100_fake/fsaf/unpaired_no-aug_32/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1401064009, "exp_name": "fsaf_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3209, "data_time": 0.04613, "loss_cls": 1.06845, "loss_bbox": 0.76201, "num_pos": 4.14, "pos_recall": 53.32962, "loss": 1.83046, "grad_norm": 26.44954, "time": 0.32345}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3209, "data_time": 0.00369, "loss_cls": 0.7463, "loss_bbox": 0.4531, "num_pos": 3.73, "pos_recall": 42.31602, "loss": 1.19939, "grad_norm": 12.11731, "time": 0.27025}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 3209, "data_time": 0.02249, "loss_cls": 0.82504, "loss_bbox": 0.47543, "num_pos": 3.27, "pos_recall": 50.47936, "loss": 1.30047, "grad_norm": 10.02734, "time": 0.29811}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 3209, "data_time": 0.00374, "loss_cls": 0.7878, "loss_bbox": 0.48559, "num_pos": 3.06, "pos_recall": 45.49921, "loss": 1.27339, "grad_norm": 7.18815, "time": 0.2761}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 3209, "data_time": 0.00371, "loss_cls": 0.69464, "loss_bbox": 0.48861, "num_pos": 3.46, "pos_recall": 49.09316, "loss": 1.18324, "grad_norm": 9.3131, "time": 0.27771}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 3209, "data_time": 0.00395, "loss_cls": 0.74534, "loss_bbox": 0.44767, "num_pos": 3.31, "pos_recall": 46.57381, "loss": 1.19302, "grad_norm": 6.37752, "time": 0.2816}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 3209, "data_time": 0.00384, "loss_cls": 0.78796, "loss_bbox": 0.49179, "num_pos": 3.04, "pos_recall": 47.34762, "loss": 1.27975, "grad_norm": 6.4499, "time": 0.27002}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 3209, "data_time": 0.00371, "loss_cls": 0.88282, "loss_bbox": 0.59381, "num_pos": 3.49, "pos_recall": 57.58766, "loss": 1.47663, "grad_norm": 9.41743, "time": 0.27307}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 3209, "data_time": 0.00391, "loss_cls": 0.8934, "loss_bbox": 0.58062, "num_pos": 2.75, "pos_recall": 53.39127, "loss": 1.47402, "grad_norm": 5.97782, "time": 0.27979}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 3209, "data_time": 0.00398, "loss_cls": 0.72511, "loss_bbox": 0.51135, "num_pos": 3.5, "pos_recall": 51.55368, "loss": 1.23646, "grad_norm": 4.37748, "time": 0.27934}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 3209, "data_time": 0.00398, "loss_cls": 0.822, "loss_bbox": 0.55483, "num_pos": 2.95, "pos_recall": 53.56667, "loss": 1.37682, "grad_norm": 5.02588, "time": 0.27991}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 3209, "data_time": 0.00906, "loss_cls": 0.76304, "loss_bbox": 0.52351, "num_pos": 2.86, "pos_recall": 48.91667, "loss": 1.28655, "grad_norm": 4.67793, "time": 0.28641}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 3209, "data_time": 0.00391, "loss_cls": 0.74379, "loss_bbox": 0.53079, "num_pos": 3.15, "pos_recall": 51.52857, "loss": 1.27458, "grad_norm": 3.77108, "time": 0.27594}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 3209, "data_time": 0.00384, "loss_cls": 0.73931, "loss_bbox": 0.5356, "num_pos": 2.61, "pos_recall": 49.91905, "loss": 1.27492, "grad_norm": 4.64625, "time": 0.27746}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 3209, "data_time": 0.00372, "loss_cls": 0.83914, "loss_bbox": 0.52176, "num_pos": 2.45, "pos_recall": 48.9619, "loss": 1.3609, "grad_norm": 6.75453, "time": 0.27968}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 3209, "data_time": 0.00372, "loss_cls": 0.74266, "loss_bbox": 0.54366, "num_pos": 2.52, "pos_recall": 50.83333, "loss": 1.28633, "grad_norm": 4.58243, "time": 0.2794}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 3209, "data_time": 0.00378, "loss_cls": 0.69771, "loss_bbox": 0.52629, "num_pos": 3.27, "pos_recall": 53.45159, "loss": 1.224, "grad_norm": 4.98376, "time": 0.28165}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 3209, "data_time": 0.0039, "loss_cls": 0.67457, "loss_bbox": 0.48859, "num_pos": 3.46, "pos_recall": 52.90635, "loss": 1.16315, "grad_norm": 3.64474, "time": 0.27094}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 3209, "data_time": 0.00394, "loss_cls": 0.76011, "loss_bbox": 0.54465, "num_pos": 2.98, "pos_recall": 54.64286, "loss": 1.30476, "grad_norm": 4.3544, "time": 0.27882}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 3209, "data_time": 0.00376, "loss_cls": 0.74702, "loss_bbox": 0.57577, "num_pos": 2.37, "pos_recall": 48.79286, "loss": 1.32278, "grad_norm": 4.27931, "time": 0.27989}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.01, "memory": 3209, "data_time": 0.00392, "loss_cls": 0.70879, "loss_bbox": 0.53742, "num_pos": 2.68, "pos_recall": 46.75, "loss": 1.24621, "grad_norm": 3.69581, "time": 0.27892}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.01, "memory": 3209, "data_time": 0.00352, "loss_cls": 0.71227, "loss_bbox": 0.5165, "num_pos": 2.89, "pos_recall": 58.58333, "loss": 1.22876, "grad_norm": 4.52359, "time": 0.27056}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.01, "memory": 3209, "data_time": 0.00357, "loss_cls": 0.69194, "loss_bbox": 0.51083, "num_pos": 3.27, "pos_recall": 50.37302, "loss": 1.20277, "grad_norm": 4.00152, "time": 0.27262}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.01, "memory": 3209, "data_time": 0.00382, "loss_cls": 0.69945, "loss_bbox": 0.53176, "num_pos": 3.1, "pos_recall": 52.32742, "loss": 1.23121, "grad_norm": 3.72464, "time": 0.27774}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.01, "memory": 3209, "data_time": 0.00386, "loss_cls": 0.72047, "loss_bbox": 0.55054, "num_pos": 3.07, "pos_recall": 58.16508, "loss": 1.27102, "grad_norm": 4.11778, "time": 0.2849}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.01, "memory": 3209, "data_time": 0.00392, "loss_cls": 0.6746, "loss_bbox": 0.53031, "num_pos": 3.57, "pos_recall": 47.55159, "loss": 1.20491, "grad_norm": 4.71716, "time": 0.28186}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.01, "memory": 3209, "data_time": 0.00881, "loss_cls": 0.66262, "loss_bbox": 0.49754, "num_pos": 3.41, "pos_recall": 47.64141, "loss": 1.16016, "grad_norm": 4.65937, "time": 0.28105}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.01, "memory": 3209, "data_time": 0.00384, "loss_cls": 0.72856, "loss_bbox": 0.53454, "num_pos": 3.06, "pos_recall": 45.33766, "loss": 1.2631, "grad_norm": 3.87906, "time": 0.27878}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.01, "memory": 3209, "data_time": 0.00388, "loss_cls": 0.66935, "loss_bbox": 0.56324, "num_pos": 3.83, "pos_recall": 46.35355, "loss": 1.23259, "grad_norm": 4.216, "time": 0.28029}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.01, "memory": 3209, "data_time": 0.00378, "loss_cls": 0.78974, "loss_bbox": 0.52078, "num_pos": 3.48, "pos_recall": 47.48413, "loss": 1.31052, "grad_norm": 5.05659, "time": 0.28186}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.01, "memory": 3209, "data_time": 0.00387, "loss_cls": 0.70238, "loss_bbox": 0.50438, "num_pos": 3.38, "pos_recall": 51.55238, "loss": 1.20676, "grad_norm": 4.03678, "time": 0.28212}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.01, "memory": 3209, "data_time": 0.00382, "loss_cls": 0.64177, "loss_bbox": 0.53257, "num_pos": 3.66, "pos_recall": 54.64502, "loss": 1.17434, "grad_norm": 3.51967, "time": 0.28126}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.01, "memory": 3209, "data_time": 0.00371, "loss_cls": 0.70687, "loss_bbox": 0.56748, "num_pos": 3.51, "pos_recall": 48.65671, "loss": 1.27435, "grad_norm": 3.40873, "time": 0.28027}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.01, "memory": 3209, "data_time": 0.02536, "loss_cls": 0.53705, "loss_bbox": 0.47268, "num_pos": 3.56, "pos_recall": 49.10714, "loss": 1.00973, "grad_norm": 3.50326, "time": 0.30476}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.01, "memory": 3209, "data_time": 0.00385, "loss_cls": 0.58313, "loss_bbox": 0.48226, "num_pos": 3.55, "pos_recall": 62.07605, "loss": 1.0654, "grad_norm": 4.3163, "time": 0.27734}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.01, "memory": 3209, "data_time": 0.00381, "loss_cls": 0.66448, "loss_bbox": 0.50113, "num_pos": 3.31, "pos_recall": 45.30952, "loss": 1.16561, "grad_norm": 4.30149, "time": 0.28086}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.01, "memory": 3209, "data_time": 0.00382, "loss_cls": 0.74727, "loss_bbox": 0.5477, "num_pos": 3.07, "pos_recall": 53.08968, "loss": 1.29497, "grad_norm": 5.26525, "time": 0.27433}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.01, "memory": 3209, "data_time": 0.00378, "loss_cls": 0.59611, "loss_bbox": 0.47889, "num_pos": 3.59, "pos_recall": 46.88492, "loss": 1.075, "grad_norm": 4.02608, "time": 0.27451}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.01, "memory": 3209, "data_time": 0.00379, "loss_cls": 0.64533, "loss_bbox": 0.49359, "num_pos": 3.78, "pos_recall": 47.10859, "loss": 1.13893, "grad_norm": 4.07682, "time": 0.28139}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.01, "memory": 3209, "data_time": 0.00382, "loss_cls": 0.64349, "loss_bbox": 0.48782, "num_pos": 3.14, "pos_recall": 50.94286, "loss": 1.13131, "grad_norm": 3.93249, "time": 0.28056}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.01, "memory": 3209, "data_time": 0.00372, "loss_cls": 0.61838, "loss_bbox": 0.5039, "num_pos": 3.27, "pos_recall": 52.46429, "loss": 1.12229, "grad_norm": 5.75859, "time": 0.27203}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.01, "memory": 3209, "data_time": 0.00373, "loss_cls": 0.68248, "loss_bbox": 0.52027, "num_pos": 2.74, "pos_recall": 52.62619, "loss": 1.20275, "grad_norm": 4.60408, "time": 0.27781}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.01, "memory": 3209, "data_time": 0.0037, "loss_cls": 0.74563, "loss_bbox": 0.60033, "num_pos": 3.21, "pos_recall": 53.63903, "loss": 1.34597, "grad_norm": 6.60465, "time": 0.27905}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.01, "memory": 3209, "data_time": 0.00366, "loss_cls": 0.65779, "loss_bbox": 0.58199, "num_pos": 2.87, "pos_recall": 50.08242, "loss": 1.23978, "grad_norm": 4.44341, "time": 0.27847}
