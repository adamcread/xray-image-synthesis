{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: Not Available\nGCC: x86_64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+d48ceb8", "config": "model = dict(\n    type='FSAF',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='FSAFHead',\n        num_classes=2,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=1,\n            scales_per_octave=1,\n            ratios=[1.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(type='TBLRBBoxCoder', normalizer=4.0),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0,\n            reduction='none'),\n        loss_bbox=dict(\n            type='IoULoss', eps=1e-06, loss_weight=1.0, reduction='none'),\n        reg_decoded_bbox=True),\n    train_cfg=dict(\n        assigner=dict(\n            type='CenterRegionAssigner',\n            pos_scale=0.2,\n            neg_scale=0.2,\n            min_pos_iof=0.01),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/100_real_33_fake/helper/annotation/unpaired_no-aug_64.json',\n        img_prefix=\n        '../dataset/xray/composed/100_real_33_fake/unpaired_no-aug_64/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/fsaf_r101_fpn_1x_coco-9e71098f.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/100_real_33_fake/fsaf/unpaired_no-aug_64/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1343507849, "exp_name": "fsaf_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3209, "data_time": 0.04948, "loss_cls": 1.05616, "loss_bbox": 0.48948, "num_pos": 6.43, "pos_recall": 50.47923, "loss": 1.54563, "grad_norm": 19.40663, "time": 0.33291}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3209, "data_time": 0.00412, "loss_cls": 0.71042, "loss_bbox": 0.3996, "num_pos": 4.52, "pos_recall": 65.44167, "loss": 1.11003, "grad_norm": 16.03129, "time": 0.2862}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 3209, "data_time": 0.00411, "loss_cls": 0.67124, "loss_bbox": 0.51825, "num_pos": 5.58, "pos_recall": 64.34152, "loss": 1.18949, "grad_norm": 14.57862, "time": 0.28357}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 3209, "data_time": 0.00404, "loss_cls": 0.59768, "loss_bbox": 0.44091, "num_pos": 5.52, "pos_recall": 74.60976, "loss": 1.03859, "grad_norm": 10.62639, "time": 0.28511}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 3209, "data_time": 0.00412, "loss_cls": 0.64806, "loss_bbox": 0.55758, "num_pos": 5.96, "pos_recall": 78.78248, "loss": 1.20563, "grad_norm": 8.55166, "time": 0.28247}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 3209, "data_time": 0.00438, "loss_cls": 0.66564, "loss_bbox": 0.57993, "num_pos": 5.19, "pos_recall": 74.1341, "loss": 1.24557, "grad_norm": 9.43896, "time": 0.28802}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 3209, "data_time": 0.0041, "loss_cls": 0.64639, "loss_bbox": 0.52405, "num_pos": 5.11, "pos_recall": 76.12745, "loss": 1.17044, "grad_norm": 6.55333, "time": 0.28662}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 3209, "data_time": 0.00423, "loss_cls": 0.67843, "loss_bbox": 0.61002, "num_pos": 5.8, "pos_recall": 71.40052, "loss": 1.28845, "grad_norm": 6.57057, "time": 0.28634}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 3209, "data_time": 0.00413, "loss_cls": 0.66217, "loss_bbox": 0.58401, "num_pos": 4.89, "pos_recall": 76.51795, "loss": 1.24618, "grad_norm": 10.62436, "time": 0.28505}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 3209, "data_time": 0.00424, "loss_cls": 0.67117, "loss_bbox": 0.68585, "num_pos": 4.78, "pos_recall": 70.84671, "loss": 1.35701, "grad_norm": 5.85549, "time": 0.28297}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 3209, "data_time": 0.004, "loss_cls": 0.72568, "loss_bbox": 0.74088, "num_pos": 4.45, "pos_recall": 59.25621, "loss": 1.46656, "grad_norm": 7.32846, "time": 0.28751}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 3209, "data_time": 0.00402, "loss_cls": 0.77061, "loss_bbox": 0.843, "num_pos": 5.36, "pos_recall": 52.98482, "loss": 1.61361, "grad_norm": 7.07373, "time": 0.28193}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 3209, "data_time": 0.01152, "loss_cls": 0.66935, "loss_bbox": 0.7433, "num_pos": 5.69, "pos_recall": 74.18547, "loss": 1.41264, "grad_norm": 5.63477, "time": 0.2947}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 3209, "data_time": 0.11112, "loss_cls": 0.59647, "loss_bbox": 0.62645, "num_pos": 5.34, "pos_recall": 81.42018, "loss": 1.22292, "grad_norm": 4.22604, "time": 0.39547}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 3209, "data_time": 0.0045, "loss_cls": 0.58417, "loss_bbox": 0.58035, "num_pos": 5.4, "pos_recall": 82.49738, "loss": 1.16452, "grad_norm": 4.72058, "time": 0.30235}
