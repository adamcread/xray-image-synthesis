{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: Not Available\nGCC: x86_64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+5778644", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/100_real_33_fake/helper/annotation/unpaired_aug.json',\n        img_prefix='../dataset/xray/composed/100_real_33_fake/unpaired_aug/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/100_real_33_fake/crcnn/unpaired_aug/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1434792644, "exp_name": "crcnn_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4028, "data_time": 0.04741, "loss_rpn_cls": 0.09339, "loss_rpn_bbox": 0.01005, "s0.loss_cls": 0.25936, "s0.acc": 96.47656, "s0.loss_bbox": 0.02094, "s1.loss_cls": 0.1644, "s1.acc": 87.37305, "s1.loss_bbox": 0.01742, "s2.loss_cls": 0.07408, "s2.acc": 88.0, "s2.loss_bbox": 0.00966, "loss": 0.64931, "time": 0.36953}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4028, "data_time": 0.00417, "loss_rpn_cls": 0.04694, "loss_rpn_bbox": 0.00828, "s0.loss_cls": 0.07544, "s0.acc": 97.84375, "s0.loss_bbox": 0.0201, "s1.loss_cls": 0.03919, "s1.acc": 97.50781, "s1.loss_bbox": 0.01865, "s2.loss_cls": 0.02013, "s2.acc": 97.67383, "s2.loss_bbox": 0.01162, "loss": 0.24034, "time": 0.32059}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4028, "data_time": 0.00402, "loss_rpn_cls": 0.03998, "loss_rpn_bbox": 0.0096, "s0.loss_cls": 0.05884, "s0.acc": 98.50195, "s0.loss_bbox": 0.01808, "s1.loss_cls": 0.02971, "s1.acc": 98.40234, "s1.loss_bbox": 0.01825, "s2.loss_cls": 0.01419, "s2.acc": 98.08203, "s2.loss_bbox": 0.00985, "loss": 0.1985, "time": 0.31862}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4028, "data_time": 0.00408, "loss_rpn_cls": 0.03638, "loss_rpn_bbox": 0.0077, "s0.loss_cls": 0.05052, "s0.acc": 98.63867, "s0.loss_bbox": 0.01566, "s1.loss_cls": 0.02639, "s1.acc": 98.58984, "s1.loss_bbox": 0.01859, "s2.loss_cls": 0.01303, "s2.acc": 98.57227, "s2.loss_bbox": 0.01206, "loss": 0.18033, "time": 0.31618}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4028, "data_time": 0.00406, "loss_rpn_cls": 0.0443, "loss_rpn_bbox": 0.01014, "s0.loss_cls": 0.05118, "s0.acc": 98.70117, "s0.loss_bbox": 0.01672, "s1.loss_cls": 0.02505, "s1.acc": 98.77148, "s1.loss_bbox": 0.01805, "s2.loss_cls": 0.01287, "s2.acc": 98.72852, "s2.loss_bbox": 0.0116, "loss": 0.18992, "time": 0.32942}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4028, "data_time": 0.00417, "loss_rpn_cls": 0.04049, "loss_rpn_bbox": 0.01303, "s0.loss_cls": 0.04995, "s0.acc": 98.60156, "s0.loss_bbox": 0.01776, "s1.loss_cls": 0.0235, "s1.acc": 98.75195, "s1.loss_bbox": 0.01694, "s2.loss_cls": 0.01187, "s2.acc": 98.71875, "s2.loss_bbox": 0.01118, "loss": 0.18472, "time": 0.33057}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4028, "data_time": 0.00413, "loss_rpn_cls": 0.04761, "loss_rpn_bbox": 0.01505, "s0.loss_cls": 0.04506, "s0.acc": 98.85938, "s0.loss_bbox": 0.01698, "s1.loss_cls": 0.02171, "s1.acc": 98.86523, "s1.loss_bbox": 0.01861, "s2.loss_cls": 0.00989, "s2.acc": 98.92383, "s2.loss_bbox": 0.01162, "loss": 0.18654, "time": 0.33111}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4028, "data_time": 0.00408, "loss_rpn_cls": 0.03905, "loss_rpn_bbox": 0.00869, "s0.loss_cls": 0.04506, "s0.acc": 98.87695, "s0.loss_bbox": 0.01669, "s1.loss_cls": 0.02208, "s1.acc": 98.88672, "s1.loss_bbox": 0.01966, "s2.loss_cls": 0.01077, "s2.acc": 98.68555, "s2.loss_bbox": 0.01183, "loss": 0.17384, "time": 0.33064}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4028, "data_time": 0.00425, "loss_rpn_cls": 0.03772, "loss_rpn_bbox": 0.00954, "s0.loss_cls": 0.04443, "s0.acc": 98.90234, "s0.loss_bbox": 0.0145, "s1.loss_cls": 0.02123, "s1.acc": 98.91211, "s1.loss_bbox": 0.01626, "s2.loss_cls": 0.01011, "s2.acc": 98.98438, "s2.loss_bbox": 0.00992, "loss": 0.16371, "time": 0.327}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4028, "data_time": 0.00413, "loss_rpn_cls": 0.04263, "loss_rpn_bbox": 0.0146, "s0.loss_cls": 0.05496, "s0.acc": 98.60547, "s0.loss_bbox": 0.02195, "s1.loss_cls": 0.02523, "s1.acc": 98.66406, "s1.loss_bbox": 0.01976, "s2.loss_cls": 0.01126, "s2.acc": 98.75977, "s2.loss_bbox": 0.01153, "loss": 0.20191, "time": 0.3307}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4028, "data_time": 0.00415, "loss_rpn_cls": 0.04224, "loss_rpn_bbox": 0.01411, "s0.loss_cls": 0.04555, "s0.acc": 98.8457, "s0.loss_bbox": 0.01613, "s1.loss_cls": 0.02174, "s1.acc": 98.81445, "s1.loss_bbox": 0.01701, "s2.loss_cls": 0.01062, "s2.acc": 98.80078, "s2.loss_bbox": 0.01177, "loss": 0.17916, "time": 0.32965}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4028, "data_time": 0.00409, "loss_rpn_cls": 0.03334, "loss_rpn_bbox": 0.00858, "s0.loss_cls": 0.04305, "s0.acc": 98.76172, "s0.loss_bbox": 0.01768, "s1.loss_cls": 0.02102, "s1.acc": 98.82617, "s1.loss_bbox": 0.02113, "s2.loss_cls": 0.00985, "s2.acc": 98.84961, "s2.loss_bbox": 0.01517, "loss": 0.16982, "time": 0.3314}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4028, "data_time": 0.00422, "loss_rpn_cls": 0.03073, "loss_rpn_bbox": 0.01009, "s0.loss_cls": 0.05393, "s0.acc": 98.57812, "s0.loss_bbox": 0.02248, "s1.loss_cls": 0.02452, "s1.acc": 98.58594, "s1.loss_bbox": 0.02599, "s2.loss_cls": 0.01069, "s2.acc": 98.71094, "s2.loss_bbox": 0.01351, "loss": 0.19195, "time": 0.33374}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4028, "data_time": 0.00423, "loss_rpn_cls": 0.05144, "loss_rpn_bbox": 0.01605, "s0.loss_cls": 0.04483, "s0.acc": 98.71094, "s0.loss_bbox": 0.01602, "s1.loss_cls": 0.02165, "s1.acc": 98.70312, "s1.loss_bbox": 0.01889, "s2.loss_cls": 0.01012, "s2.acc": 98.79102, "s2.loss_bbox": 0.01165, "loss": 0.19065, "time": 0.33423}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4028, "data_time": 0.00421, "loss_rpn_cls": 0.05441, "loss_rpn_bbox": 0.01369, "s0.loss_cls": 0.04739, "s0.acc": 98.8457, "s0.loss_bbox": 0.01731, "s1.loss_cls": 0.02139, "s1.acc": 98.97852, "s1.loss_bbox": 0.01791, "s2.loss_cls": 0.00986, "s2.acc": 99.03125, "s2.loss_bbox": 0.01088, "loss": 0.19283, "time": 0.34272}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4028, "data_time": 0.00429, "loss_rpn_cls": 0.04864, "loss_rpn_bbox": 0.01377, "s0.loss_cls": 0.05096, "s0.acc": 98.7168, "s0.loss_bbox": 0.01824, "s1.loss_cls": 0.02224, "s1.acc": 98.79492, "s1.loss_bbox": 0.01798, "s2.loss_cls": 0.01023, "s2.acc": 98.75, "s2.loss_bbox": 0.01251, "loss": 0.19458, "time": 0.33733}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4028, "data_time": 0.00422, "loss_rpn_cls": 0.04114, "loss_rpn_bbox": 0.01169, "s0.loss_cls": 0.04404, "s0.acc": 98.90234, "s0.loss_bbox": 0.01527, "s1.loss_cls": 0.01901, "s1.acc": 99.08008, "s1.loss_bbox": 0.01663, "s2.loss_cls": 0.00917, "s2.acc": 98.9668, "s2.loss_bbox": 0.01084, "loss": 0.16781, "time": 0.33033}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4028, "data_time": 0.00418, "loss_rpn_cls": 0.04847, "loss_rpn_bbox": 0.00907, "s0.loss_cls": 0.03716, "s0.acc": 99.15234, "s0.loss_bbox": 0.01208, "s1.loss_cls": 0.01627, "s1.acc": 99.24219, "s1.loss_bbox": 0.01349, "s2.loss_cls": 0.00717, "s2.acc": 99.31055, "s2.loss_bbox": 0.00913, "loss": 0.15281, "time": 0.33119}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4028, "data_time": 0.00422, "loss_rpn_cls": 0.04057, "loss_rpn_bbox": 0.00971, "s0.loss_cls": 0.03724, "s0.acc": 99.03906, "s0.loss_bbox": 0.01254, "s1.loss_cls": 0.01725, "s1.acc": 99.11914, "s1.loss_bbox": 0.01448, "s2.loss_cls": 0.00797, "s2.acc": 99.12109, "s2.loss_bbox": 0.01128, "loss": 0.15104, "time": 0.32412}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4028, "data_time": 0.00421, "loss_rpn_cls": 0.03028, "loss_rpn_bbox": 0.00689, "s0.loss_cls": 0.04469, "s0.acc": 98.81445, "s0.loss_bbox": 0.01619, "s1.loss_cls": 0.0209, "s1.acc": 98.89844, "s1.loss_bbox": 0.01995, "s2.loss_cls": 0.00948, "s2.acc": 98.89258, "s2.loss_bbox": 0.01511, "loss": 0.16348, "time": 0.32472}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4028, "data_time": 0.00432, "loss_rpn_cls": 0.0296, "loss_rpn_bbox": 0.00991, "s0.loss_cls": 0.03921, "s0.acc": 98.86328, "s0.loss_bbox": 0.01584, "s1.loss_cls": 0.01999, "s1.acc": 98.76172, "s1.loss_bbox": 0.01963, "s2.loss_cls": 0.00996, "s2.acc": 98.67578, "s2.loss_bbox": 0.01399, "loss": 0.15814, "time": 0.32853}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4028, "data_time": 0.0042, "loss_rpn_cls": 0.04953, "loss_rpn_bbox": 0.00824, "s0.loss_cls": 0.04325, "s0.acc": 98.80664, "s0.loss_bbox": 0.0162, "s1.loss_cls": 0.02207, "s1.acc": 98.66602, "s1.loss_bbox": 0.02184, "s2.loss_cls": 0.01116, "s2.acc": 98.5293, "s2.loss_bbox": 0.01406, "loss": 0.18634, "time": 0.32855}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4028, "data_time": 0.00425, "loss_rpn_cls": 0.03649, "loss_rpn_bbox": 0.01304, "s0.loss_cls": 0.04043, "s0.acc": 98.83984, "s0.loss_bbox": 0.01453, "s1.loss_cls": 0.02208, "s1.acc": 98.70117, "s1.loss_bbox": 0.01904, "s2.loss_cls": 0.01061, "s2.acc": 98.68945, "s2.loss_bbox": 0.01274, "loss": 0.16896, "time": 0.33325}
