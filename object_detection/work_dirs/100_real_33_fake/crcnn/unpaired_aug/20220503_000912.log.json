{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: Not Available\nGCC: x86_64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+391fe3b", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/100_real_33_fake/helper/annotation/unpaired_aug.json',\n        img_prefix='../dataset/xray/composed/100_real_33_fake/unpaired_aug/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/100_real_33_fake/crcnn/unpaired_aug/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1730369494, "exp_name": "crcnn_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4028, "data_time": 0.05059, "loss_rpn_cls": 0.08328, "loss_rpn_bbox": 0.00759, "s0.loss_cls": 0.27352, "s0.acc": 93.87305, "s0.loss_bbox": 0.02163, "s1.loss_cls": 0.14533, "s1.acc": 94.30078, "s1.loss_bbox": 0.01925, "s2.loss_cls": 0.07576, "s2.acc": 90.34375, "s2.loss_bbox": 0.00825, "loss": 0.63461, "time": 0.38003}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4028, "data_time": 0.00763, "loss_rpn_cls": 0.04634, "loss_rpn_bbox": 0.00565, "s0.loss_cls": 0.08449, "s0.acc": 97.59375, "s0.loss_bbox": 0.02215, "s1.loss_cls": 0.04457, "s1.acc": 97.33594, "s1.loss_bbox": 0.02172, "s2.loss_cls": 0.02289, "s2.acc": 97.46875, "s2.loss_bbox": 0.01288, "loss": 0.26068, "time": 0.32855}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4028, "data_time": 0.004, "loss_rpn_cls": 0.04666, "loss_rpn_bbox": 0.00632, "s0.loss_cls": 0.05905, "s0.acc": 98.53711, "s0.loss_bbox": 0.01981, "s1.loss_cls": 0.02867, "s1.acc": 98.42188, "s1.loss_bbox": 0.02087, "s2.loss_cls": 0.01357, "s2.acc": 98.07617, "s2.loss_bbox": 0.0116, "loss": 0.20656, "time": 0.32527}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4028, "data_time": 0.00396, "loss_rpn_cls": 0.03815, "loss_rpn_bbox": 0.00983, "s0.loss_cls": 0.05699, "s0.acc": 98.66406, "s0.loss_bbox": 0.0214, "s1.loss_cls": 0.02593, "s1.acc": 98.84375, "s1.loss_bbox": 0.02016, "s2.loss_cls": 0.01152, "s2.acc": 98.87891, "s2.loss_bbox": 0.01069, "loss": 0.19468, "time": 0.32766}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4028, "data_time": 0.00414, "loss_rpn_cls": 0.04831, "loss_rpn_bbox": 0.0128, "s0.loss_cls": 0.04606, "s0.acc": 98.79492, "s0.loss_bbox": 0.01769, "s1.loss_cls": 0.02203, "s1.acc": 98.83984, "s1.loss_bbox": 0.01784, "s2.loss_cls": 0.01078, "s2.acc": 98.89453, "s2.loss_bbox": 0.01069, "loss": 0.1862, "time": 0.32872}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4028, "data_time": 0.00399, "loss_rpn_cls": 0.04307, "loss_rpn_bbox": 0.01423, "s0.loss_cls": 0.04841, "s0.acc": 98.81641, "s0.loss_bbox": 0.01589, "s1.loss_cls": 0.02315, "s1.acc": 98.81836, "s1.loss_bbox": 0.01663, "s2.loss_cls": 0.01176, "s2.acc": 98.76562, "s2.loss_bbox": 0.01187, "loss": 0.18501, "time": 0.33243}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4028, "data_time": 0.00425, "loss_rpn_cls": 0.03087, "loss_rpn_bbox": 0.00622, "s0.loss_cls": 0.0544, "s0.acc": 98.59961, "s0.loss_bbox": 0.02044, "s1.loss_cls": 0.02666, "s1.acc": 98.54883, "s1.loss_bbox": 0.02021, "s2.loss_cls": 0.01235, "s2.acc": 98.66797, "s2.loss_bbox": 0.0139, "loss": 0.18506, "time": 0.33377}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4028, "data_time": 0.01607, "loss_rpn_cls": 0.05477, "loss_rpn_bbox": 0.01251, "s0.loss_cls": 0.04881, "s0.acc": 98.79492, "s0.loss_bbox": 0.01563, "s1.loss_cls": 0.02345, "s1.acc": 98.82812, "s1.loss_bbox": 0.01706, "s2.loss_cls": 0.01125, "s2.acc": 98.89648, "s2.loss_bbox": 0.01064, "loss": 0.19412, "time": 0.348}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4028, "data_time": 0.04544, "loss_rpn_cls": 0.03524, "loss_rpn_bbox": 0.0098, "s0.loss_cls": 0.04559, "s0.acc": 98.85742, "s0.loss_bbox": 0.01612, "s1.loss_cls": 0.02153, "s1.acc": 98.88867, "s1.loss_bbox": 0.01886, "s2.loss_cls": 0.00953, "s2.acc": 99.01172, "s2.loss_bbox": 0.01294, "loss": 0.16959, "time": 0.37306}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4028, "data_time": 0.00451, "loss_rpn_cls": 0.04276, "loss_rpn_bbox": 0.01269, "s0.loss_cls": 0.0473, "s0.acc": 98.69336, "s0.loss_bbox": 0.01936, "s1.loss_cls": 0.02192, "s1.acc": 98.75195, "s1.loss_bbox": 0.01958, "s2.loss_cls": 0.011, "s2.acc": 98.63867, "s2.loss_bbox": 0.01391, "loss": 0.18852, "time": 0.33535}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4028, "data_time": 0.00425, "loss_rpn_cls": 0.04698, "loss_rpn_bbox": 0.01721, "s0.loss_cls": 0.0516, "s0.acc": 98.70703, "s0.loss_bbox": 0.01734, "s1.loss_cls": 0.02345, "s1.acc": 98.82617, "s1.loss_bbox": 0.01772, "s2.loss_cls": 0.01124, "s2.acc": 98.92188, "s2.loss_bbox": 0.01158, "loss": 0.19712, "time": 0.33231}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4028, "data_time": 0.00443, "loss_rpn_cls": 0.0471, "loss_rpn_bbox": 0.01646, "s0.loss_cls": 0.0438, "s0.acc": 98.87891, "s0.loss_bbox": 0.01418, "s1.loss_cls": 0.02335, "s1.acc": 98.72461, "s1.loss_bbox": 0.01729, "s2.loss_cls": 0.01147, "s2.acc": 98.73828, "s2.loss_bbox": 0.01282, "loss": 0.18647, "time": 0.34044}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4028, "data_time": 0.00427, "loss_rpn_cls": 0.05965, "loss_rpn_bbox": 0.01574, "s0.loss_cls": 0.03923, "s0.acc": 99.01953, "s0.loss_bbox": 0.01386, "s1.loss_cls": 0.01781, "s1.acc": 99.08008, "s1.loss_bbox": 0.01461, "s2.loss_cls": 0.00818, "s2.acc": 99.10352, "s2.loss_bbox": 0.0086, "loss": 0.17768, "time": 0.33664}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4028, "data_time": 0.00444, "loss_rpn_cls": 0.04476, "loss_rpn_bbox": 0.01331, "s0.loss_cls": 0.04469, "s0.acc": 98.85547, "s0.loss_bbox": 0.01591, "s1.loss_cls": 0.02065, "s1.acc": 98.79688, "s1.loss_bbox": 0.01768, "s2.loss_cls": 0.01016, "s2.acc": 98.84766, "s2.loss_bbox": 0.01066, "loss": 0.17781, "time": 0.33395}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4028, "data_time": 0.0043, "loss_rpn_cls": 0.03535, "loss_rpn_bbox": 0.01547, "s0.loss_cls": 0.05077, "s0.acc": 98.56836, "s0.loss_bbox": 0.01945, "s1.loss_cls": 0.02557, "s1.acc": 98.50977, "s1.loss_bbox": 0.02307, "s2.loss_cls": 0.01186, "s2.acc": 98.58398, "s2.loss_bbox": 0.01412, "loss": 0.19566, "time": 0.33407}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4028, "data_time": 0.00424, "loss_rpn_cls": 0.04468, "loss_rpn_bbox": 0.01222, "s0.loss_cls": 0.03736, "s0.acc": 99.04688, "s0.loss_bbox": 0.01349, "s1.loss_cls": 0.01787, "s1.acc": 98.99023, "s1.loss_bbox": 0.01654, "s2.loss_cls": 0.00858, "s2.acc": 99.01953, "s2.loss_bbox": 0.01034, "loss": 0.16108, "time": 0.33027}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4028, "data_time": 0.00433, "loss_rpn_cls": 0.04074, "loss_rpn_bbox": 0.0077, "s0.loss_cls": 0.03862, "s0.acc": 98.99023, "s0.loss_bbox": 0.01471, "s1.loss_cls": 0.01887, "s1.acc": 98.96094, "s1.loss_bbox": 0.01718, "s2.loss_cls": 0.00956, "s2.acc": 98.81055, "s2.loss_bbox": 0.01115, "loss": 0.15852, "time": 0.32972}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4028, "data_time": 0.00423, "loss_rpn_cls": 0.04511, "loss_rpn_bbox": 0.01273, "s0.loss_cls": 0.04305, "s0.acc": 98.89258, "s0.loss_bbox": 0.01435, "s1.loss_cls": 0.02044, "s1.acc": 98.92773, "s1.loss_bbox": 0.0159, "s2.loss_cls": 0.00922, "s2.acc": 99.05664, "s2.loss_bbox": 0.01058, "loss": 0.17139, "time": 0.33362}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4028, "data_time": 0.00441, "loss_rpn_cls": 0.02985, "loss_rpn_bbox": 0.01019, "s0.loss_cls": 0.04079, "s0.acc": 98.94727, "s0.loss_bbox": 0.01584, "s1.loss_cls": 0.01751, "s1.acc": 99.05078, "s1.loss_bbox": 0.01866, "s2.loss_cls": 0.00788, "s2.acc": 99.08984, "s2.loss_bbox": 0.01324, "loss": 0.15395, "time": 0.33282}
