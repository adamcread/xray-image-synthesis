{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: Not Available\nGCC: x86_64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+9d6d4a2", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/100_real_33_fake/helper/annotation/unpaired_no-aug_32.json',\n        img_prefix=\n        '../dataset/xray/composed/100_real_33_fake/unpaired_no-aug_32/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/100_real_33_fake/crcnn/unpaired_no-aug_32/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1771248319, "exp_name": "crcnn_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4026, "data_time": 0.0487, "loss_rpn_cls": 0.06786, "loss_rpn_bbox": 0.00789, "s0.loss_cls": 0.326, "s0.acc": 88.38672, "s0.loss_bbox": 0.02643, "s1.loss_cls": 0.13997, "s1.acc": 96.97461, "s1.loss_bbox": 0.02173, "s2.loss_cls": 0.06765, "s2.acc": 97.73242, "s2.loss_bbox": 0.01089, "loss": 0.66842, "time": 0.37789}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4026, "data_time": 0.00354, "loss_rpn_cls": 0.04658, "loss_rpn_bbox": 0.00803, "s0.loss_cls": 0.09938, "s0.acc": 97.48828, "s0.loss_bbox": 0.03511, "s1.loss_cls": 0.04613, "s1.acc": 97.59375, "s1.loss_bbox": 0.02838, "s2.loss_cls": 0.01989, "s2.acc": 98.08008, "s2.loss_bbox": 0.01097, "loss": 0.29447, "time": 0.32189}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4026, "data_time": 0.00531, "loss_rpn_cls": 0.04072, "loss_rpn_bbox": 0.01083, "s0.loss_cls": 0.08424, "s0.acc": 97.77734, "s0.loss_bbox": 0.02616, "s1.loss_cls": 0.04121, "s1.acc": 97.80078, "s1.loss_bbox": 0.02449, "s2.loss_cls": 0.02009, "s2.acc": 97.66016, "s2.loss_bbox": 0.013, "loss": 0.26074, "time": 0.32835}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4026, "data_time": 0.00356, "loss_rpn_cls": 0.04157, "loss_rpn_bbox": 0.01211, "s0.loss_cls": 0.06424, "s0.acc": 98.4043, "s0.loss_bbox": 0.02495, "s1.loss_cls": 0.02728, "s1.acc": 98.71875, "s1.loss_bbox": 0.02315, "s2.loss_cls": 0.01219, "s2.acc": 98.79297, "s2.loss_bbox": 0.01238, "loss": 0.21787, "time": 0.32875}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4026, "data_time": 0.00349, "loss_rpn_cls": 0.03115, "loss_rpn_bbox": 0.00874, "s0.loss_cls": 0.06272, "s0.acc": 98.32031, "s0.loss_bbox": 0.02394, "s1.loss_cls": 0.03057, "s1.acc": 98.25586, "s1.loss_bbox": 0.02657, "s2.loss_cls": 0.01441, "s2.acc": 98.26367, "s2.loss_bbox": 0.01608, "loss": 0.21419, "time": 0.32876}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4026, "data_time": 0.00352, "loss_rpn_cls": 0.04023, "loss_rpn_bbox": 0.01359, "s0.loss_cls": 0.0657, "s0.acc": 98.35352, "s0.loss_bbox": 0.02278, "s1.loss_cls": 0.03213, "s1.acc": 98.31445, "s1.loss_bbox": 0.02805, "s2.loss_cls": 0.01477, "s2.acc": 98.33984, "s2.loss_bbox": 0.01437, "loss": 0.23163, "time": 0.33487}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4026, "data_time": 0.00363, "loss_rpn_cls": 0.04092, "loss_rpn_bbox": 0.00988, "s0.loss_cls": 0.05716, "s0.acc": 98.53516, "s0.loss_bbox": 0.02295, "s1.loss_cls": 0.02689, "s1.acc": 98.48828, "s1.loss_bbox": 0.02174, "s2.loss_cls": 0.01252, "s2.acc": 98.58594, "s2.loss_bbox": 0.01223, "loss": 0.20429, "time": 0.3351}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4026, "data_time": 0.00351, "loss_rpn_cls": 0.03091, "loss_rpn_bbox": 0.00831, "s0.loss_cls": 0.06191, "s0.acc": 98.44531, "s0.loss_bbox": 0.02117, "s1.loss_cls": 0.02992, "s1.acc": 98.44141, "s1.loss_bbox": 0.02096, "s2.loss_cls": 0.01395, "s2.acc": 98.63086, "s2.loss_bbox": 0.01382, "loss": 0.20094, "time": 0.33402}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4026, "data_time": 0.0035, "loss_rpn_cls": 0.04715, "loss_rpn_bbox": 0.01426, "s0.loss_cls": 0.05937, "s0.acc": 98.46875, "s0.loss_bbox": 0.02203, "s1.loss_cls": 0.02805, "s1.acc": 98.41602, "s1.loss_bbox": 0.024, "s2.loss_cls": 0.01274, "s2.acc": 98.56641, "s2.loss_bbox": 0.01506, "loss": 0.22265, "time": 0.33543}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4026, "data_time": 0.00344, "loss_rpn_cls": 0.03845, "loss_rpn_bbox": 0.01378, "s0.loss_cls": 0.0539, "s0.acc": 98.66211, "s0.loss_bbox": 0.0163, "s1.loss_cls": 0.02522, "s1.acc": 98.59766, "s1.loss_bbox": 0.01883, "s2.loss_cls": 0.01259, "s2.acc": 98.55664, "s2.loss_bbox": 0.01422, "loss": 0.19329, "time": 0.33368}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4026, "data_time": 0.00357, "loss_rpn_cls": 0.0427, "loss_rpn_bbox": 0.00928, "s0.loss_cls": 0.05084, "s0.acc": 98.77344, "s0.loss_bbox": 0.01842, "s1.loss_cls": 0.022, "s1.acc": 98.80859, "s1.loss_bbox": 0.01842, "s2.loss_cls": 0.01018, "s2.acc": 98.85547, "s2.loss_bbox": 0.01233, "loss": 0.18417, "time": 0.33565}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4026, "data_time": 0.00363, "loss_rpn_cls": 0.0355, "loss_rpn_bbox": 0.01064, "s0.loss_cls": 0.0602, "s0.acc": 98.51758, "s0.loss_bbox": 0.02207, "s1.loss_cls": 0.02644, "s1.acc": 98.5957, "s1.loss_bbox": 0.02005, "s2.loss_cls": 0.01152, "s2.acc": 98.65039, "s2.loss_bbox": 0.01173, "loss": 0.19815, "time": 0.33559}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4026, "data_time": 0.00352, "loss_rpn_cls": 0.02937, "loss_rpn_bbox": 0.00974, "s0.loss_cls": 0.05151, "s0.acc": 98.63867, "s0.loss_bbox": 0.01976, "s1.loss_cls": 0.02427, "s1.acc": 98.68164, "s1.loss_bbox": 0.02401, "s2.loss_cls": 0.01146, "s2.acc": 98.56055, "s2.loss_bbox": 0.01522, "loss": 0.18535, "time": 0.32849}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4026, "data_time": 0.00356, "loss_rpn_cls": 0.04618, "loss_rpn_bbox": 0.01421, "s0.loss_cls": 0.04732, "s0.acc": 98.73633, "s0.loss_bbox": 0.01874, "s1.loss_cls": 0.02348, "s1.acc": 98.61719, "s1.loss_bbox": 0.02256, "s2.loss_cls": 0.0127, "s2.acc": 98.31836, "s2.loss_bbox": 0.01471, "loss": 0.1999, "time": 0.33145}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4026, "data_time": 0.00359, "loss_rpn_cls": 0.04741, "loss_rpn_bbox": 0.01453, "s0.loss_cls": 0.04655, "s0.acc": 98.86719, "s0.loss_bbox": 0.01714, "s1.loss_cls": 0.0211, "s1.acc": 98.83008, "s1.loss_bbox": 0.01918, "s2.loss_cls": 0.00983, "s2.acc": 98.82617, "s2.loss_bbox": 0.01191, "loss": 0.18765, "time": 0.32753}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4026, "data_time": 0.00357, "loss_rpn_cls": 0.04254, "loss_rpn_bbox": 0.01289, "s0.loss_cls": 0.0522, "s0.acc": 98.74219, "s0.loss_bbox": 0.01897, "s1.loss_cls": 0.02218, "s1.acc": 98.90625, "s1.loss_bbox": 0.01885, "s2.loss_cls": 0.00951, "s2.acc": 98.9668, "s2.loss_bbox": 0.01062, "loss": 0.18777, "time": 0.32972}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4026, "data_time": 0.00354, "loss_rpn_cls": 0.0429, "loss_rpn_bbox": 0.01158, "s0.loss_cls": 0.0481, "s0.acc": 98.84766, "s0.loss_bbox": 0.02041, "s1.loss_cls": 0.01941, "s1.acc": 99.00195, "s1.loss_bbox": 0.01952, "s2.loss_cls": 0.00909, "s2.acc": 99.09766, "s2.loss_bbox": 0.01111, "loss": 0.18211, "time": 0.33184}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4026, "data_time": 0.00352, "loss_rpn_cls": 0.03468, "loss_rpn_bbox": 0.00926, "s0.loss_cls": 0.05384, "s0.acc": 98.63086, "s0.loss_bbox": 0.02241, "s1.loss_cls": 0.024, "s1.acc": 98.74609, "s1.loss_bbox": 0.02236, "s2.loss_cls": 0.01099, "s2.acc": 98.69922, "s2.loss_bbox": 0.01548, "loss": 0.19304, "time": 0.33264}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4026, "data_time": 0.00351, "loss_rpn_cls": 0.04959, "loss_rpn_bbox": 0.01147, "s0.loss_cls": 0.04463, "s0.acc": 98.92188, "s0.loss_bbox": 0.01719, "s1.loss_cls": 0.0192, "s1.acc": 99.00391, "s1.loss_bbox": 0.01662, "s2.loss_cls": 0.00866, "s2.acc": 99.17383, "s2.loss_bbox": 0.01008, "loss": 0.17744, "time": 0.32746}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4026, "data_time": 0.00367, "loss_rpn_cls": 0.03824, "loss_rpn_bbox": 0.01033, "s0.loss_cls": 0.0485, "s0.acc": 98.78711, "s0.loss_bbox": 0.01969, "s1.loss_cls": 0.0212, "s1.acc": 98.80664, "s1.loss_bbox": 0.02157, "s2.loss_cls": 0.00928, "s2.acc": 98.80664, "s2.loss_bbox": 0.01404, "loss": 0.18285, "time": 0.33058}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4026, "data_time": 0.00376, "loss_rpn_cls": 0.03559, "loss_rpn_bbox": 0.00932, "s0.loss_cls": 0.05336, "s0.acc": 98.5918, "s0.loss_bbox": 0.01957, "s1.loss_cls": 0.02488, "s1.acc": 98.65625, "s1.loss_bbox": 0.02293, "s2.loss_cls": 0.01111, "s2.acc": 98.63086, "s2.loss_bbox": 0.01425, "loss": 0.19102, "time": 0.32682}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4026, "data_time": 0.00374, "loss_rpn_cls": 0.03314, "loss_rpn_bbox": 0.00787, "s0.loss_cls": 0.0638, "s0.acc": 98.36523, "s0.loss_bbox": 0.01967, "s1.loss_cls": 0.02817, "s1.acc": 98.44141, "s1.loss_bbox": 0.02235, "s2.loss_cls": 0.01207, "s2.acc": 98.54883, "s2.loss_bbox": 0.01468, "loss": 0.20176, "time": 0.33019}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4026, "data_time": 0.00377, "loss_rpn_cls": 0.02723, "loss_rpn_bbox": 0.00982, "s0.loss_cls": 0.05937, "s0.acc": 98.41602, "s0.loss_bbox": 0.02225, "s1.loss_cls": 0.02705, "s1.acc": 98.53125, "s1.loss_bbox": 0.02263, "s2.loss_cls": 0.01154, "s2.acc": 98.63477, "s2.loss_bbox": 0.01365, "loss": 0.19355, "time": 0.32856}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 4026, "data_time": 0.00363, "loss_rpn_cls": 0.03305, "loss_rpn_bbox": 0.00775, "s0.loss_cls": 0.06103, "s0.acc": 98.57227, "s0.loss_bbox": 0.02246, "s1.loss_cls": 0.0264, "s1.acc": 98.72461, "s1.loss_bbox": 0.02306, "s2.loss_cls": 0.01143, "s2.acc": 98.92188, "s2.loss_bbox": 0.01457, "loss": 0.19975, "time": 0.32971}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 4026, "data_time": 0.00358, "loss_rpn_cls": 0.03336, "loss_rpn_bbox": 0.01051, "s0.loss_cls": 0.06026, "s0.acc": 98.49219, "s0.loss_bbox": 0.0272, "s1.loss_cls": 0.02631, "s1.acc": 98.56445, "s1.loss_bbox": 0.02384, "s2.loss_cls": 0.01177, "s2.acc": 98.70312, "s2.loss_bbox": 0.01361, "loss": 0.20686, "time": 0.32752}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 4026, "data_time": 0.00359, "loss_rpn_cls": 0.02956, "loss_rpn_bbox": 0.00693, "s0.loss_cls": 0.05375, "s0.acc": 98.57812, "s0.loss_bbox": 0.02178, "s1.loss_cls": 0.02621, "s1.acc": 98.38477, "s1.loss_bbox": 0.02466, "s2.loss_cls": 0.01206, "s2.acc": 98.4707, "s2.loss_bbox": 0.0176, "loss": 0.19256, "time": 0.32879}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 4026, "data_time": 0.00368, "loss_rpn_cls": 0.03442, "loss_rpn_bbox": 0.00846, "s0.loss_cls": 0.04605, "s0.acc": 98.84766, "s0.loss_bbox": 0.01859, "s1.loss_cls": 0.02125, "s1.acc": 98.91602, "s1.loss_bbox": 0.02087, "s2.loss_cls": 0.00929, "s2.acc": 99.00781, "s2.loss_bbox": 0.01474, "loss": 0.17367, "time": 0.32731}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 4026, "data_time": 0.00362, "loss_rpn_cls": 0.03322, "loss_rpn_bbox": 0.01033, "s0.loss_cls": 0.0515, "s0.acc": 98.67773, "s0.loss_bbox": 0.02053, "s1.loss_cls": 0.02124, "s1.acc": 98.97852, "s1.loss_bbox": 0.02094, "s2.loss_cls": 0.00856, "s2.acc": 99.23828, "s2.loss_bbox": 0.01442, "loss": 0.18073, "time": 0.3292}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 4026, "data_time": 0.00361, "loss_rpn_cls": 0.0364, "loss_rpn_bbox": 0.01259, "s0.loss_cls": 0.04666, "s0.acc": 98.8125, "s0.loss_bbox": 0.01808, "s1.loss_cls": 0.02052, "s1.acc": 98.92578, "s1.loss_bbox": 0.02023, "s2.loss_cls": 0.0086, "s2.acc": 99.12305, "s2.loss_bbox": 0.01351, "loss": 0.17658, "time": 0.32605}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 4026, "data_time": 0.0037, "loss_rpn_cls": 0.02663, "loss_rpn_bbox": 0.00975, "s0.loss_cls": 0.04994, "s0.acc": 98.64844, "s0.loss_bbox": 0.02181, "s1.loss_cls": 0.02248, "s1.acc": 98.77734, "s1.loss_bbox": 0.02337, "s2.loss_cls": 0.01031, "s2.acc": 98.85352, "s2.loss_bbox": 0.01387, "loss": 0.17815, "time": 0.32876}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 4026, "data_time": 0.00387, "loss_rpn_cls": 0.02862, "loss_rpn_bbox": 0.00873, "s0.loss_cls": 0.05437, "s0.acc": 98.61523, "s0.loss_bbox": 0.02108, "s1.loss_cls": 0.02327, "s1.acc": 98.80078, "s1.loss_bbox": 0.02094, "s2.loss_cls": 0.00998, "s2.acc": 98.83594, "s2.loss_bbox": 0.01485, "loss": 0.18185, "time": 0.3302}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 4026, "data_time": 0.00393, "loss_rpn_cls": 0.03034, "loss_rpn_bbox": 0.00921, "s0.loss_cls": 0.045, "s0.acc": 98.73438, "s0.loss_bbox": 0.01684, "s1.loss_cls": 0.01899, "s1.acc": 98.80859, "s1.loss_bbox": 0.01922, "s2.loss_cls": 0.00878, "s2.acc": 98.8418, "s2.loss_bbox": 0.01339, "loss": 0.16177, "time": 0.32898}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 4026, "data_time": 0.00372, "loss_rpn_cls": 0.02797, "loss_rpn_bbox": 0.00676, "s0.loss_cls": 0.05158, "s0.acc": 98.62891, "s0.loss_bbox": 0.02152, "s1.loss_cls": 0.02289, "s1.acc": 98.70117, "s1.loss_bbox": 0.02378, "s2.loss_cls": 0.00962, "s2.acc": 98.86328, "s2.loss_bbox": 0.0147, "loss": 0.17881, "time": 0.33539}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 4026, "data_time": 0.00381, "loss_rpn_cls": 0.03308, "loss_rpn_bbox": 0.01039, "s0.loss_cls": 0.05015, "s0.acc": 98.74609, "s0.loss_bbox": 0.02135, "s1.loss_cls": 0.02121, "s1.acc": 98.78906, "s1.loss_bbox": 0.02454, "s2.loss_cls": 0.00953, "s2.acc": 98.89648, "s2.loss_bbox": 0.01617, "loss": 0.18641, "time": 0.33061}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 4026, "data_time": 0.00384, "loss_rpn_cls": 0.03915, "loss_rpn_bbox": 0.01119, "s0.loss_cls": 0.04583, "s0.acc": 98.9082, "s0.loss_bbox": 0.0177, "s1.loss_cls": 0.01973, "s1.acc": 98.95703, "s1.loss_bbox": 0.01872, "s2.loss_cls": 0.00899, "s2.acc": 98.98633, "s2.loss_bbox": 0.01059, "loss": 0.1719, "time": 0.33401}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 4026, "data_time": 0.00383, "loss_rpn_cls": 0.02968, "loss_rpn_bbox": 0.00826, "s0.loss_cls": 0.05039, "s0.acc": 98.59375, "s0.loss_bbox": 0.02129, "s1.loss_cls": 0.02304, "s1.acc": 98.57812, "s1.loss_bbox": 0.02243, "s2.loss_cls": 0.01031, "s2.acc": 98.68164, "s2.loss_bbox": 0.01369, "loss": 0.1791, "time": 0.33016}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 4026, "data_time": 0.00379, "loss_rpn_cls": 0.02299, "loss_rpn_bbox": 0.00805, "s0.loss_cls": 0.0491, "s0.acc": 98.5957, "s0.loss_bbox": 0.02273, "s1.loss_cls": 0.02238, "s1.acc": 98.72852, "s1.loss_bbox": 0.0266, "s2.loss_cls": 0.0112, "s2.acc": 98.57227, "s2.loss_bbox": 0.01658, "loss": 0.17963, "time": 0.33024}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 4026, "data_time": 0.0038, "loss_rpn_cls": 0.03458, "loss_rpn_bbox": 0.01122, "s0.loss_cls": 0.05474, "s0.acc": 98.50781, "s0.loss_bbox": 0.02267, "s1.loss_cls": 0.02639, "s1.acc": 98.51562, "s1.loss_bbox": 0.02637, "s2.loss_cls": 0.01166, "s2.acc": 98.71094, "s2.loss_bbox": 0.01611, "loss": 0.20375, "time": 0.33272}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 4026, "data_time": 0.0038, "loss_rpn_cls": 0.02807, "loss_rpn_bbox": 0.01077, "s0.loss_cls": 0.04349, "s0.acc": 98.86523, "s0.loss_bbox": 0.01791, "s1.loss_cls": 0.02054, "s1.acc": 98.76172, "s1.loss_bbox": 0.02348, "s2.loss_cls": 0.0095, "s2.acc": 98.71875, "s2.loss_bbox": 0.01598, "loss": 0.16975, "time": 0.3315}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 4026, "data_time": 0.00371, "loss_rpn_cls": 0.04193, "loss_rpn_bbox": 0.00952, "s0.loss_cls": 0.04694, "s0.acc": 98.74219, "s0.loss_bbox": 0.02105, "s1.loss_cls": 0.02132, "s1.acc": 98.82422, "s1.loss_bbox": 0.02303, "s2.loss_cls": 0.00962, "s2.acc": 98.89062, "s2.loss_bbox": 0.01439, "loss": 0.1878, "time": 0.3354}
