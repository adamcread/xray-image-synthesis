{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: \nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.1+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu110\nOpenCV: 4.5.5\nMMCV: 1.4.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.21.0+c27b3e6", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/100_real_33_fake/helper/annotation/unpaired_no-aug_64.json',\n        img_prefix=\n        '../dataset/xray/composed/100_real_33_fake/unpaired_no-aug_64/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/100_real_33_fake/crcnn/unpaired_no-aug_64/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1522256507, "exp_name": "crcnn_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4024, "data_time": 0.04818, "loss_rpn_cls": 0.06001, "loss_rpn_bbox": 0.00723, "s0.loss_cls": 0.26599, "s0.acc": 96.75977, "s0.loss_bbox": 0.02796, "s1.loss_cls": 0.15867, "s1.acc": 89.95117, "s1.loss_bbox": 0.02081, "s2.loss_cls": 0.07476, "s2.acc": 90.58789, "s2.loss_bbox": 0.00854, "loss": 0.62397, "time": 0.38035}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4024, "data_time": 0.00415, "loss_rpn_cls": 0.03191, "loss_rpn_bbox": 0.00591, "s0.loss_cls": 0.10141, "s0.acc": 97.30273, "s0.loss_bbox": 0.03196, "s1.loss_cls": 0.05265, "s1.acc": 97.12305, "s1.loss_bbox": 0.02827, "s2.loss_cls": 0.02498, "s2.acc": 97.50781, "s2.loss_bbox": 0.0131, "loss": 0.29018, "time": 0.32738}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4024, "data_time": 0.00408, "loss_rpn_cls": 0.03686, "loss_rpn_bbox": 0.00719, "s0.loss_cls": 0.07586, "s0.acc": 98.10742, "s0.loss_bbox": 0.02467, "s1.loss_cls": 0.03627, "s1.acc": 98.00977, "s1.loss_bbox": 0.02505, "s2.loss_cls": 0.01802, "s2.acc": 97.72266, "s2.loss_bbox": 0.01553, "loss": 0.23945, "time": 0.32744}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4024, "data_time": 0.00413, "loss_rpn_cls": 0.04165, "loss_rpn_bbox": 0.0108, "s0.loss_cls": 0.05569, "s0.acc": 98.76758, "s0.loss_bbox": 0.01978, "s1.loss_cls": 0.02362, "s1.acc": 98.92773, "s1.loss_bbox": 0.01573, "s2.loss_cls": 0.01119, "s2.acc": 99.00195, "s2.loss_bbox": 0.01053, "loss": 0.18898, "time": 0.32954}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4024, "data_time": 0.00407, "loss_rpn_cls": 0.04287, "loss_rpn_bbox": 0.01403, "s0.loss_cls": 0.07227, "s0.acc": 98.20898, "s0.loss_bbox": 0.02635, "s1.loss_cls": 0.03133, "s1.acc": 98.43164, "s1.loss_bbox": 0.02114, "s2.loss_cls": 0.0139, "s2.acc": 98.55859, "s2.loss_bbox": 0.0102, "loss": 0.2321, "time": 0.3329}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4024, "data_time": 0.00403, "loss_rpn_cls": 0.05822, "loss_rpn_bbox": 0.01174, "s0.loss_cls": 0.06995, "s0.acc": 98.21094, "s0.loss_bbox": 0.02791, "s1.loss_cls": 0.03125, "s1.acc": 98.3457, "s1.loss_bbox": 0.02698, "s2.loss_cls": 0.01332, "s2.acc": 98.60352, "s2.loss_bbox": 0.01576, "loss": 0.25514, "time": 0.33324}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4024, "data_time": 0.00412, "loss_rpn_cls": 0.0419, "loss_rpn_bbox": 0.00917, "s0.loss_cls": 0.06347, "s0.acc": 98.39062, "s0.loss_bbox": 0.0243, "s1.loss_cls": 0.02779, "s1.acc": 98.52539, "s1.loss_bbox": 0.02098, "s2.loss_cls": 0.01291, "s2.acc": 98.64648, "s2.loss_bbox": 0.01292, "loss": 0.21344, "time": 0.32834}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4024, "data_time": 0.00438, "loss_rpn_cls": 0.03906, "loss_rpn_bbox": 0.01348, "s0.loss_cls": 0.05428, "s0.acc": 98.7207, "s0.loss_bbox": 0.02127, "s1.loss_cls": 0.02547, "s1.acc": 98.75, "s1.loss_bbox": 0.0221, "s2.loss_cls": 0.01059, "s2.acc": 98.89062, "s2.loss_bbox": 0.01227, "loss": 0.19854, "time": 0.33234}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4024, "data_time": 0.00432, "loss_rpn_cls": 0.03995, "loss_rpn_bbox": 0.015, "s0.loss_cls": 0.05029, "s0.acc": 98.78516, "s0.loss_bbox": 0.01944, "s1.loss_cls": 0.02303, "s1.acc": 98.86328, "s1.loss_bbox": 0.01926, "s2.loss_cls": 0.01045, "s2.acc": 98.96094, "s2.loss_bbox": 0.01267, "loss": 0.1901, "time": 0.33565}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4024, "data_time": 0.00409, "loss_rpn_cls": 0.0519, "loss_rpn_bbox": 0.01556, "s0.loss_cls": 0.05926, "s0.acc": 98.63477, "s0.loss_bbox": 0.02305, "s1.loss_cls": 0.0267, "s1.acc": 98.66797, "s1.loss_bbox": 0.0207, "s2.loss_cls": 0.01167, "s2.acc": 98.76172, "s2.loss_bbox": 0.01095, "loss": 0.2198, "time": 0.33303}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4024, "data_time": 0.00436, "loss_rpn_cls": 0.03303, "loss_rpn_bbox": 0.01118, "s0.loss_cls": 0.05553, "s0.acc": 98.64453, "s0.loss_bbox": 0.02305, "s1.loss_cls": 0.02281, "s1.acc": 98.85742, "s1.loss_bbox": 0.02137, "s2.loss_cls": 0.01037, "s2.acc": 98.80664, "s2.loss_bbox": 0.01112, "loss": 0.18845, "time": 0.33461}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4024, "data_time": 0.00424, "loss_rpn_cls": 0.03467, "loss_rpn_bbox": 0.01061, "s0.loss_cls": 0.05337, "s0.acc": 98.6875, "s0.loss_bbox": 0.02009, "s1.loss_cls": 0.02344, "s1.acc": 98.78906, "s1.loss_bbox": 0.01771, "s2.loss_cls": 0.01036, "s2.acc": 98.87891, "s2.loss_bbox": 0.01002, "loss": 0.18027, "time": 0.33593}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4024, "data_time": 0.00423, "loss_rpn_cls": 0.02822, "loss_rpn_bbox": 0.01062, "s0.loss_cls": 0.05948, "s0.acc": 98.52344, "s0.loss_bbox": 0.02139, "s1.loss_cls": 0.02603, "s1.acc": 98.58789, "s1.loss_bbox": 0.02228, "s2.loss_cls": 0.01178, "s2.acc": 98.68359, "s2.loss_bbox": 0.01507, "loss": 0.19486, "time": 0.33894}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4024, "data_time": 0.00418, "loss_rpn_cls": 0.02878, "loss_rpn_bbox": 0.00882, "s0.loss_cls": 0.06093, "s0.acc": 98.43164, "s0.loss_bbox": 0.02536, "s1.loss_cls": 0.02704, "s1.acc": 98.49805, "s1.loss_bbox": 0.02528, "s2.loss_cls": 0.01185, "s2.acc": 98.61914, "s2.loss_bbox": 0.01505, "loss": 0.20311, "time": 0.33659}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4024, "data_time": 0.00427, "loss_rpn_cls": 0.03779, "loss_rpn_bbox": 0.01216, "s0.loss_cls": 0.06355, "s0.acc": 98.30859, "s0.loss_bbox": 0.02592, "s1.loss_cls": 0.02935, "s1.acc": 98.29297, "s1.loss_bbox": 0.02633, "s2.loss_cls": 0.01304, "s2.acc": 98.38867, "s2.loss_bbox": 0.01552, "loss": 0.22368, "time": 0.33388}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4024, "data_time": 0.00429, "loss_rpn_cls": 0.03274, "loss_rpn_bbox": 0.00807, "s0.loss_cls": 0.05653, "s0.acc": 98.63281, "s0.loss_bbox": 0.02135, "s1.loss_cls": 0.0264, "s1.acc": 98.66406, "s1.loss_bbox": 0.02145, "s2.loss_cls": 0.01124, "s2.acc": 98.86328, "s2.loss_bbox": 0.01255, "loss": 0.19034, "time": 0.33326}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4024, "data_time": 0.01022, "loss_rpn_cls": 0.03532, "loss_rpn_bbox": 0.01161, "s0.loss_cls": 0.05312, "s0.acc": 98.5293, "s0.loss_bbox": 0.02092, "s1.loss_cls": 0.02451, "s1.acc": 98.53125, "s1.loss_bbox": 0.02337, "s2.loss_cls": 0.01156, "s2.acc": 98.63867, "s2.loss_bbox": 0.01358, "loss": 0.19398, "time": 0.33954}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4024, "data_time": 0.00432, "loss_rpn_cls": 0.03469, "loss_rpn_bbox": 0.01261, "s0.loss_cls": 0.04483, "s0.acc": 98.83789, "s0.loss_bbox": 0.01865, "s1.loss_cls": 0.02161, "s1.acc": 98.87305, "s1.loss_bbox": 0.02082, "s2.loss_cls": 0.00874, "s2.acc": 99.05273, "s2.loss_bbox": 0.01199, "loss": 0.17394, "time": 0.33925}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4024, "data_time": 0.02602, "loss_rpn_cls": 0.03316, "loss_rpn_bbox": 0.01051, "s0.loss_cls": 0.05044, "s0.acc": 98.68164, "s0.loss_bbox": 0.02168, "s1.loss_cls": 0.02277, "s1.acc": 98.83203, "s1.loss_bbox": 0.02167, "s2.loss_cls": 0.00987, "s2.acc": 98.79102, "s2.loss_bbox": 0.01249, "loss": 0.18259, "time": 0.35376}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4024, "data_time": 0.00439, "loss_rpn_cls": 0.03339, "loss_rpn_bbox": 0.01079, "s0.loss_cls": 0.05019, "s0.acc": 98.7168, "s0.loss_bbox": 0.01998, "s1.loss_cls": 0.02393, "s1.acc": 98.74414, "s1.loss_bbox": 0.02234, "s2.loss_cls": 0.01037, "s2.acc": 98.91016, "s2.loss_bbox": 0.01365, "loss": 0.18463, "time": 0.33177}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4024, "data_time": 0.00426, "loss_rpn_cls": 0.03278, "loss_rpn_bbox": 0.00726, "s0.loss_cls": 0.04668, "s0.acc": 98.79688, "s0.loss_bbox": 0.01852, "s1.loss_cls": 0.02235, "s1.acc": 98.80664, "s1.loss_bbox": 0.02151, "s2.loss_cls": 0.00939, "s2.acc": 98.97656, "s2.loss_bbox": 0.01244, "loss": 0.17093, "time": 0.33458}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4024, "data_time": 0.00432, "loss_rpn_cls": 0.02535, "loss_rpn_bbox": 0.01349, "s0.loss_cls": 0.04482, "s0.acc": 98.75391, "s0.loss_bbox": 0.0194, "s1.loss_cls": 0.0218, "s1.acc": 98.69531, "s1.loss_bbox": 0.02325, "s2.loss_cls": 0.01062, "s2.acc": 98.65234, "s2.loss_bbox": 0.0153, "loss": 0.17403, "time": 0.34012}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4024, "data_time": 0.00884, "loss_rpn_cls": 0.03686, "loss_rpn_bbox": 0.00954, "s0.loss_cls": 0.05391, "s0.acc": 98.59766, "s0.loss_bbox": 0.02212, "s1.loss_cls": 0.02367, "s1.acc": 98.72656, "s1.loss_bbox": 0.02221, "s2.loss_cls": 0.0099, "s2.acc": 98.94141, "s2.loss_bbox": 0.01414, "loss": 0.19235, "time": 0.33997}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 4024, "data_time": 0.00431, "loss_rpn_cls": 0.02541, "loss_rpn_bbox": 0.00709, "s0.loss_cls": 0.04779, "s0.acc": 98.71484, "s0.loss_bbox": 0.01833, "s1.loss_cls": 0.02153, "s1.acc": 98.75195, "s1.loss_bbox": 0.02222, "s2.loss_cls": 0.00984, "s2.acc": 98.73047, "s2.loss_bbox": 0.01552, "loss": 0.16773, "time": 0.33539}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 4024, "data_time": 0.01077, "loss_rpn_cls": 0.0332, "loss_rpn_bbox": 0.0115, "s0.loss_cls": 0.04868, "s0.acc": 98.60547, "s0.loss_bbox": 0.02105, "s1.loss_cls": 0.02464, "s1.acc": 98.51758, "s1.loss_bbox": 0.02724, "s2.loss_cls": 0.0113, "s2.acc": 98.71094, "s2.loss_bbox": 0.01889, "loss": 0.19651, "time": 0.3433}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 4024, "data_time": 0.00442, "loss_rpn_cls": 0.02907, "loss_rpn_bbox": 0.00856, "s0.loss_cls": 0.05118, "s0.acc": 98.65039, "s0.loss_bbox": 0.02002, "s1.loss_cls": 0.02198, "s1.acc": 98.74219, "s1.loss_bbox": 0.02192, "s2.loss_cls": 0.0097, "s2.acc": 98.76172, "s2.loss_bbox": 0.01414, "loss": 0.17657, "time": 0.33535}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 4024, "data_time": 0.00422, "loss_rpn_cls": 0.03308, "loss_rpn_bbox": 0.01004, "s0.loss_cls": 0.0569, "s0.acc": 98.625, "s0.loss_bbox": 0.02326, "s1.loss_cls": 0.02423, "s1.acc": 98.76562, "s1.loss_bbox": 0.02273, "s2.loss_cls": 0.00988, "s2.acc": 99.02734, "s2.loss_bbox": 0.01439, "loss": 0.19452, "time": 0.33813}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 4024, "data_time": 0.00441, "loss_rpn_cls": 0.02965, "loss_rpn_bbox": 0.00965, "s0.loss_cls": 0.05111, "s0.acc": 98.71094, "s0.loss_bbox": 0.0203, "s1.loss_cls": 0.022, "s1.acc": 98.8125, "s1.loss_bbox": 0.01972, "s2.loss_cls": 0.00946, "s2.acc": 98.84766, "s2.loss_bbox": 0.01239, "loss": 0.17427, "time": 0.33498}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 4024, "data_time": 0.0092, "loss_rpn_cls": 0.03642, "loss_rpn_bbox": 0.00779, "s0.loss_cls": 0.04425, "s0.acc": 98.85547, "s0.loss_bbox": 0.01912, "s1.loss_cls": 0.01844, "s1.acc": 98.95508, "s1.loss_bbox": 0.02083, "s2.loss_cls": 0.00798, "s2.acc": 98.99023, "s2.loss_bbox": 0.01403, "loss": 0.16887, "time": 0.3425}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 4024, "data_time": 0.00426, "loss_rpn_cls": 0.02774, "loss_rpn_bbox": 0.00924, "s0.loss_cls": 0.05224, "s0.acc": 98.57617, "s0.loss_bbox": 0.02329, "s1.loss_cls": 0.02285, "s1.acc": 98.70508, "s1.loss_bbox": 0.02393, "s2.loss_cls": 0.00968, "s2.acc": 98.94922, "s2.loss_bbox": 0.01409, "loss": 0.18305, "time": 0.33745}
