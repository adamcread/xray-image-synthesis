2022-04-04 13:51:25,428 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0
NVCC: 
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.7.1+cu110
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2+cu110
OpenCV: 4.5.5
MMCV: 1.4.8
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.23.0+21b6da3
------------------------------------------------------------

2022-04-04 13:51:26,132 - mmdet - INFO - Distributed training: False
2022-04-04 13:51:26,822 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained',
                      checkpoint='torchvision://resnet101')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'COCODataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/composed/50_real_50_fake/helper/annotation/unpaired_combined_dice_500.json',
        img_prefix=
        '../dataset/xray/composed/50_real_50_fake/unpaired_combined_dice_500/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ],
        classes=('FIREARM', 'KNIFE')),
    val=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',
        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('FIREARM', 'KNIFE')),
    test=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',
        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('FIREARM', 'KNIFE')))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
classes = ('FIREARM', 'KNIFE')
work_dir = 'work_dirs/50_real_50_fake/crcnn/unpaired_combined_dice_500/'
auto_resume = False
gpu_ids = [0]

2022-04-04 13:51:26,822 - mmdet - INFO - Set random seed to 201871877, deterministic: False
2022-04-04 13:51:27,756 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
2022-04-04 13:51:28,421 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2022-04-04 13:51:28,444 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2022-04-04 13:51:28,452 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-04 13:51:28,570 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-04 13:51:28,680 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2022-04-04 13:51:34,126 - mmdet - INFO - load checkpoint from local path: ./checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth
2022-04-04 13:51:34,778 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
2022-04-04 13:51:34,788 - mmdet - INFO - Start running, host: dflc39@gpu6, work_dir: /home2/dflc39/ADAM_DISS/xray_image_synthesis/object_detection/work_dirs/50_real_50_fake/crcnn/unpaired_combined_dice_500
2022-04-04 13:51:34,789 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-04-04 13:51:34,789 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2022-04-04 13:51:34,789 - mmdet - INFO - Checkpoints will be saved to /home2/dflc39/ADAM_DISS/xray_image_synthesis/object_detection/work_dirs/50_real_50_fake/crcnn/unpaired_combined_dice_500 by HardDiskBackend.
2022-04-04 13:51:53,930 - mmdet - INFO - Epoch [1][50/2116]	lr: 1.978e-03, eta: 2:41:36, time: 0.383, data_time: 0.048, memory: 4026, loss_rpn_cls: 0.0637, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.2937, s0.acc: 91.1934, s0.loss_bbox: 0.0328, s1.loss_cls: 0.1365, s1.acc: 96.0000, s1.loss_bbox: 0.0206, s2.loss_cls: 0.0889, s2.acc: 83.6621, s2.loss_bbox: 0.0077, loss: 0.6525
2022-04-04 13:52:10,316 - mmdet - INFO - Epoch [1][100/2116]	lr: 3.976e-03, eta: 2:29:42, time: 0.328, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0308, loss_rpn_bbox: 0.0085, s0.loss_cls: 0.1166, s0.acc: 97.2461, s0.loss_bbox: 0.0448, s1.loss_cls: 0.0503, s1.acc: 97.6680, s1.loss_bbox: 0.0317, s2.loss_cls: 0.0203, s2.acc: 98.3359, s2.loss_bbox: 0.0105, loss: 0.3134
2022-04-04 13:52:26,946 - mmdet - INFO - Epoch [1][150/2116]	lr: 5.974e-03, eta: 2:26:14, time: 0.333, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0225, loss_rpn_bbox: 0.0046, s0.loss_cls: 0.1173, s0.acc: 97.0547, s0.loss_bbox: 0.0485, s1.loss_cls: 0.0510, s1.acc: 97.3457, s1.loss_bbox: 0.0360, s2.loss_cls: 0.0206, s2.acc: 98.0781, s2.loss_bbox: 0.0132, loss: 0.3137
2022-04-04 13:52:43,716 - mmdet - INFO - Epoch [1][200/2116]	lr: 7.972e-03, eta: 2:24:40, time: 0.335, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0325, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0996, s0.acc: 97.4785, s0.loss_bbox: 0.0403, s1.loss_cls: 0.0435, s1.acc: 97.6367, s1.loss_bbox: 0.0297, s2.loss_cls: 0.0175, s2.acc: 98.0273, s2.loss_bbox: 0.0112, loss: 0.2819
2022-04-04 13:53:00,668 - mmdet - INFO - Epoch [1][250/2116]	lr: 9.970e-03, eta: 2:23:55, time: 0.339, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0364, loss_rpn_bbox: 0.0098, s0.loss_cls: 0.0971, s0.acc: 97.6777, s0.loss_bbox: 0.0394, s1.loss_cls: 0.0399, s1.acc: 98.0137, s1.loss_bbox: 0.0328, s2.loss_cls: 0.0167, s2.acc: 98.1289, s2.loss_bbox: 0.0140, loss: 0.2861
2022-04-04 13:53:17,849 - mmdet - INFO - Epoch [1][300/2116]	lr: 1.197e-02, eta: 2:23:38, time: 0.344, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0305, loss_rpn_bbox: 0.0098, s0.loss_cls: 0.0780, s0.acc: 97.8730, s0.loss_bbox: 0.0312, s1.loss_cls: 0.0343, s1.acc: 97.9551, s1.loss_bbox: 0.0267, s2.loss_cls: 0.0154, s2.acc: 98.2012, s2.loss_bbox: 0.0137, loss: 0.2396
2022-04-04 13:53:35,191 - mmdet - INFO - Epoch [1][350/2116]	lr: 1.397e-02, eta: 2:23:33, time: 0.347, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0241, loss_rpn_bbox: 0.0097, s0.loss_cls: 0.0740, s0.acc: 98.0078, s0.loss_bbox: 0.0309, s1.loss_cls: 0.0338, s1.acc: 97.8594, s1.loss_bbox: 0.0331, s2.loss_cls: 0.0153, s2.acc: 98.1172, s2.loss_bbox: 0.0163, loss: 0.2372
2022-04-04 13:53:52,437 - mmdet - INFO - Epoch [1][400/2116]	lr: 1.596e-02, eta: 2:23:19, time: 0.345, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0350, loss_rpn_bbox: 0.0111, s0.loss_cls: 0.0964, s0.acc: 97.6699, s0.loss_bbox: 0.0368, s1.loss_cls: 0.0405, s1.acc: 97.9492, s1.loss_bbox: 0.0304, s2.loss_cls: 0.0170, s2.acc: 98.1934, s2.loss_bbox: 0.0139, loss: 0.2811
2022-04-04 13:54:09,642 - mmdet - INFO - Epoch [1][450/2116]	lr: 1.796e-02, eta: 2:23:02, time: 0.344, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0313, loss_rpn_bbox: 0.0108, s0.loss_cls: 0.0850, s0.acc: 97.9082, s0.loss_bbox: 0.0366, s1.loss_cls: 0.0365, s1.acc: 98.0684, s1.loss_bbox: 0.0332, s2.loss_cls: 0.0156, s2.acc: 98.3105, s2.loss_bbox: 0.0163, loss: 0.2653
2022-04-04 13:54:26,542 - mmdet - INFO - Epoch [1][500/2116]	lr: 1.996e-02, eta: 2:22:29, time: 0.338, data_time: 0.005, memory: 4026, loss_rpn_cls: 0.0324, loss_rpn_bbox: 0.0095, s0.loss_cls: 0.0869, s0.acc: 97.8945, s0.loss_bbox: 0.0339, s1.loss_cls: 0.0363, s1.acc: 98.0508, s1.loss_bbox: 0.0293, s2.loss_cls: 0.0144, s2.acc: 98.4062, s2.loss_bbox: 0.0130, loss: 0.2556
2022-04-04 13:54:43,470 - mmdet - INFO - Epoch [1][550/2116]	lr: 2.000e-02, eta: 2:22:01, time: 0.339, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0328, loss_rpn_bbox: 0.0131, s0.loss_cls: 0.0681, s0.acc: 98.0801, s0.loss_bbox: 0.0303, s1.loss_cls: 0.0321, s1.acc: 98.1309, s1.loss_bbox: 0.0285, s2.loss_cls: 0.0146, s2.acc: 98.0176, s2.loss_bbox: 0.0167, loss: 0.2361
2022-04-04 13:55:01,123 - mmdet - INFO - Epoch [1][600/2116]	lr: 2.000e-02, eta: 2:22:05, time: 0.353, data_time: 0.005, memory: 4026, loss_rpn_cls: 0.0268, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0762, s0.acc: 97.9785, s0.loss_bbox: 0.0314, s1.loss_cls: 0.0336, s1.acc: 98.1172, s1.loss_bbox: 0.0310, s2.loss_cls: 0.0148, s2.acc: 98.2500, s2.loss_bbox: 0.0175, loss: 0.2400
2022-04-04 13:55:19,067 - mmdet - INFO - Epoch [1][650/2116]	lr: 2.000e-02, eta: 2:22:16, time: 0.359, data_time: 0.005, memory: 4026, loss_rpn_cls: 0.0301, loss_rpn_bbox: 0.0099, s0.loss_cls: 0.0733, s0.acc: 98.0742, s0.loss_bbox: 0.0274, s1.loss_cls: 0.0325, s1.acc: 98.1836, s1.loss_bbox: 0.0261, s2.loss_cls: 0.0145, s2.acc: 98.1973, s2.loss_bbox: 0.0156, loss: 0.2294
2022-04-04 13:55:36,912 - mmdet - INFO - Epoch [1][700/2116]	lr: 2.000e-02, eta: 2:22:20, time: 0.357, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0395, loss_rpn_bbox: 0.0114, s0.loss_cls: 0.0713, s0.acc: 98.2148, s0.loss_bbox: 0.0276, s1.loss_cls: 0.0327, s1.acc: 98.3008, s1.loss_bbox: 0.0265, s2.loss_cls: 0.0145, s2.acc: 98.2793, s2.loss_bbox: 0.0161, loss: 0.2397
2022-04-04 13:55:54,228 - mmdet - INFO - Epoch [1][750/2116]	lr: 2.000e-02, eta: 2:22:03, time: 0.346, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0262, loss_rpn_bbox: 0.0073, s0.loss_cls: 0.0719, s0.acc: 98.1719, s0.loss_bbox: 0.0277, s1.loss_cls: 0.0327, s1.acc: 98.1602, s1.loss_bbox: 0.0289, s2.loss_cls: 0.0146, s2.acc: 98.3887, s2.loss_bbox: 0.0179, loss: 0.2273
2022-04-04 13:56:11,497 - mmdet - INFO - Epoch [1][800/2116]	lr: 2.000e-02, eta: 2:21:45, time: 0.345, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0194, loss_rpn_bbox: 0.0047, s0.loss_cls: 0.0758, s0.acc: 97.9082, s0.loss_bbox: 0.0318, s1.loss_cls: 0.0358, s1.acc: 97.8418, s1.loss_bbox: 0.0355, s2.loss_cls: 0.0154, s2.acc: 97.9980, s2.loss_bbox: 0.0204, loss: 0.2388
2022-04-04 13:56:28,351 - mmdet - INFO - Epoch [1][850/2116]	lr: 2.000e-02, eta: 2:21:15, time: 0.337, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0260, loss_rpn_bbox: 0.0064, s0.loss_cls: 0.0750, s0.acc: 98.0000, s0.loss_bbox: 0.0342, s1.loss_cls: 0.0351, s1.acc: 98.0547, s1.loss_bbox: 0.0366, s2.loss_cls: 0.0147, s2.acc: 98.3281, s2.loss_bbox: 0.0197, loss: 0.2477
2022-04-04 13:56:45,974 - mmdet - INFO - Epoch [1][900/2116]	lr: 2.000e-02, eta: 2:21:07, time: 0.352, data_time: 0.005, memory: 4026, loss_rpn_cls: 0.0263, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.0826, s0.acc: 97.8691, s0.loss_bbox: 0.0339, s1.loss_cls: 0.0353, s1.acc: 97.9336, s1.loss_bbox: 0.0344, s2.loss_cls: 0.0152, s2.acc: 97.9785, s2.loss_bbox: 0.0225, loss: 0.2587
2022-04-04 13:57:03,579 - mmdet - INFO - Epoch [1][950/2116]	lr: 2.000e-02, eta: 2:20:58, time: 0.352, data_time: 0.005, memory: 4026, loss_rpn_cls: 0.0226, loss_rpn_bbox: 0.0079, s0.loss_cls: 0.0813, s0.acc: 97.9375, s0.loss_bbox: 0.0369, s1.loss_cls: 0.0337, s1.acc: 98.1562, s1.loss_bbox: 0.0337, s2.loss_cls: 0.0150, s2.acc: 98.0625, s2.loss_bbox: 0.0178, loss: 0.2490
2022-04-04 13:57:21,574 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 13:57:21,574 - mmdet - INFO - Epoch [1][1000/2116]	lr: 2.000e-02, eta: 2:20:58, time: 0.360, data_time: 0.005, memory: 4026, loss_rpn_cls: 0.0305, loss_rpn_bbox: 0.0114, s0.loss_cls: 0.0639, s0.acc: 98.3652, s0.loss_bbox: 0.0259, s1.loss_cls: 0.0281, s1.acc: 98.5078, s1.loss_bbox: 0.0289, s2.loss_cls: 0.0126, s2.acc: 98.5117, s2.loss_bbox: 0.0176, loss: 0.2189
2022-04-04 13:57:39,251 - mmdet - INFO - Epoch [1][1050/2116]	lr: 2.000e-02, eta: 2:20:48, time: 0.354, data_time: 0.005, memory: 4026, loss_rpn_cls: 0.0423, loss_rpn_bbox: 0.0106, s0.loss_cls: 0.0635, s0.acc: 98.2422, s0.loss_bbox: 0.0279, s1.loss_cls: 0.0290, s1.acc: 98.4531, s1.loss_bbox: 0.0321, s2.loss_cls: 0.0126, s2.acc: 98.6152, s2.loss_bbox: 0.0184, loss: 0.2365
2022-04-04 13:57:56,957 - mmdet - INFO - Epoch [1][1100/2116]	lr: 2.000e-02, eta: 2:20:39, time: 0.354, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0247, loss_rpn_bbox: 0.0070, s0.loss_cls: 0.0626, s0.acc: 98.2910, s0.loss_bbox: 0.0301, s1.loss_cls: 0.0289, s1.acc: 98.3555, s1.loss_bbox: 0.0338, s2.loss_cls: 0.0130, s2.acc: 98.3555, s2.loss_bbox: 0.0195, loss: 0.2196
2022-04-04 13:58:14,269 - mmdet - INFO - Epoch [1][1150/2116]	lr: 2.000e-02, eta: 2:20:20, time: 0.346, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0256, loss_rpn_bbox: 0.0072, s0.loss_cls: 0.0731, s0.acc: 98.0469, s0.loss_bbox: 0.0319, s1.loss_cls: 0.0337, s1.acc: 98.1465, s1.loss_bbox: 0.0309, s2.loss_cls: 0.0144, s2.acc: 98.2617, s2.loss_bbox: 0.0176, loss: 0.2344
2022-04-04 13:58:31,470 - mmdet - INFO - Epoch [1][1200/2116]	lr: 2.000e-02, eta: 2:19:59, time: 0.344, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0212, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0749, s0.acc: 97.8223, s0.loss_bbox: 0.0367, s1.loss_cls: 0.0367, s1.acc: 97.6426, s1.loss_bbox: 0.0425, s2.loss_cls: 0.0156, s2.acc: 98.1055, s2.loss_bbox: 0.0257, loss: 0.2610
2022-04-04 13:58:48,755 - mmdet - INFO - Epoch [1][1250/2116]	lr: 2.000e-02, eta: 2:19:41, time: 0.346, data_time: 0.005, memory: 4026, loss_rpn_cls: 0.0261, loss_rpn_bbox: 0.0073, s0.loss_cls: 0.0746, s0.acc: 97.9648, s0.loss_bbox: 0.0349, s1.loss_cls: 0.0334, s1.acc: 97.9805, s1.loss_bbox: 0.0376, s2.loss_cls: 0.0151, s2.acc: 97.9707, s2.loss_bbox: 0.0208, loss: 0.2497
2022-04-04 13:59:06,012 - mmdet - INFO - Epoch [1][1300/2116]	lr: 2.000e-02, eta: 2:19:21, time: 0.345, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0282, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0738, s0.acc: 98.0449, s0.loss_bbox: 0.0334, s1.loss_cls: 0.0326, s1.acc: 98.1602, s1.loss_bbox: 0.0315, s2.loss_cls: 0.0138, s2.acc: 98.3027, s2.loss_bbox: 0.0172, loss: 0.2377
2022-04-04 13:59:23,049 - mmdet - INFO - Epoch [1][1350/2116]	lr: 2.000e-02, eta: 2:18:58, time: 0.341, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0233, loss_rpn_bbox: 0.0055, s0.loss_cls: 0.0688, s0.acc: 98.1953, s0.loss_bbox: 0.0315, s1.loss_cls: 0.0310, s1.acc: 98.3711, s1.loss_bbox: 0.0350, s2.loss_cls: 0.0143, s2.acc: 98.2480, s2.loss_bbox: 0.0218, loss: 0.2312
2022-04-04 13:59:40,292 - mmdet - INFO - Epoch [1][1400/2116]	lr: 2.000e-02, eta: 2:18:39, time: 0.345, data_time: 0.007, memory: 4027, loss_rpn_cls: 0.0200, loss_rpn_bbox: 0.0069, s0.loss_cls: 0.0606, s0.acc: 98.1992, s0.loss_bbox: 0.0255, s1.loss_cls: 0.0305, s1.acc: 98.0352, s1.loss_bbox: 0.0334, s2.loss_cls: 0.0146, s2.acc: 97.8906, s2.loss_bbox: 0.0231, loss: 0.2145
2022-04-04 13:59:57,590 - mmdet - INFO - Epoch [1][1450/2116]	lr: 2.000e-02, eta: 2:18:21, time: 0.346, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0179, loss_rpn_bbox: 0.0069, s0.loss_cls: 0.0663, s0.acc: 98.1777, s0.loss_bbox: 0.0289, s1.loss_cls: 0.0320, s1.acc: 98.1328, s1.loss_bbox: 0.0335, s2.loss_cls: 0.0144, s2.acc: 98.1621, s2.loss_bbox: 0.0209, loss: 0.2208
2022-04-04 14:00:15,609 - mmdet - INFO - Epoch [1][1500/2116]	lr: 2.000e-02, eta: 2:18:15, time: 0.360, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0219, loss_rpn_bbox: 0.0106, s0.loss_cls: 0.0597, s0.acc: 98.3086, s0.loss_bbox: 0.0279, s1.loss_cls: 0.0292, s1.acc: 98.1777, s1.loss_bbox: 0.0335, s2.loss_cls: 0.0138, s2.acc: 98.2324, s2.loss_bbox: 0.0225, loss: 0.2191
2022-04-04 14:00:33,670 - mmdet - INFO - Epoch [1][1550/2116]	lr: 2.000e-02, eta: 2:18:08, time: 0.361, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0267, loss_rpn_bbox: 0.0072, s0.loss_cls: 0.0688, s0.acc: 98.1484, s0.loss_bbox: 0.0308, s1.loss_cls: 0.0290, s1.acc: 98.1660, s1.loss_bbox: 0.0322, s2.loss_cls: 0.0129, s2.acc: 98.3867, s2.loss_bbox: 0.0200, loss: 0.2276
2022-04-04 14:00:51,126 - mmdet - INFO - Epoch [1][1600/2116]	lr: 2.000e-02, eta: 2:17:52, time: 0.349, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0253, loss_rpn_bbox: 0.0069, s0.loss_cls: 0.0621, s0.acc: 98.3086, s0.loss_bbox: 0.0278, s1.loss_cls: 0.0293, s1.acc: 98.4473, s1.loss_bbox: 0.0353, s2.loss_cls: 0.0134, s2.acc: 98.4316, s2.loss_bbox: 0.0230, loss: 0.2230
2022-04-04 14:01:08,572 - mmdet - INFO - Epoch [1][1650/2116]	lr: 2.000e-02, eta: 2:17:35, time: 0.349, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0365, loss_rpn_bbox: 0.0099, s0.loss_cls: 0.0670, s0.acc: 98.1875, s0.loss_bbox: 0.0266, s1.loss_cls: 0.0290, s1.acc: 98.2461, s1.loss_bbox: 0.0272, s2.loss_cls: 0.0131, s2.acc: 98.4863, s2.loss_bbox: 0.0174, loss: 0.2267
2022-04-04 14:01:25,900 - mmdet - INFO - Epoch [1][1700/2116]	lr: 2.000e-02, eta: 2:17:17, time: 0.347, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0229, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0702, s0.acc: 97.9980, s0.loss_bbox: 0.0314, s1.loss_cls: 0.0335, s1.acc: 97.8926, s1.loss_bbox: 0.0375, s2.loss_cls: 0.0147, s2.acc: 98.1016, s2.loss_bbox: 0.0202, loss: 0.2372
2022-04-04 14:01:43,016 - mmdet - INFO - Epoch [1][1750/2116]	lr: 2.000e-02, eta: 2:16:56, time: 0.342, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0317, loss_rpn_bbox: 0.0097, s0.loss_cls: 0.0595, s0.acc: 98.3730, s0.loss_bbox: 0.0239, s1.loss_cls: 0.0285, s1.acc: 98.3086, s1.loss_bbox: 0.0300, s2.loss_cls: 0.0127, s2.acc: 98.3750, s2.loss_bbox: 0.0194, loss: 0.2154
2022-04-04 14:02:00,346 - mmdet - INFO - Epoch [1][1800/2116]	lr: 2.000e-02, eta: 2:16:38, time: 0.347, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0283, loss_rpn_bbox: 0.0101, s0.loss_cls: 0.0602, s0.acc: 98.4141, s0.loss_bbox: 0.0259, s1.loss_cls: 0.0282, s1.acc: 98.4688, s1.loss_bbox: 0.0278, s2.loss_cls: 0.0123, s2.acc: 98.4863, s2.loss_bbox: 0.0181, loss: 0.2108
2022-04-04 14:02:16,951 - mmdet - INFO - Epoch [1][1850/2116]	lr: 2.000e-02, eta: 2:16:11, time: 0.332, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0213, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0695, s0.acc: 98.2754, s0.loss_bbox: 0.0317, s1.loss_cls: 0.0320, s1.acc: 98.1855, s1.loss_bbox: 0.0332, s2.loss_cls: 0.0136, s2.acc: 98.3984, s2.loss_bbox: 0.0197, loss: 0.2286
2022-04-04 14:02:33,974 - mmdet - INFO - Epoch [1][1900/2116]	lr: 2.000e-02, eta: 2:15:49, time: 0.340, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0277, loss_rpn_bbox: 0.0098, s0.loss_cls: 0.0668, s0.acc: 98.2227, s0.loss_bbox: 0.0279, s1.loss_cls: 0.0304, s1.acc: 98.1973, s1.loss_bbox: 0.0330, s2.loss_cls: 0.0130, s2.acc: 98.2715, s2.loss_bbox: 0.0201, loss: 0.2287
2022-04-04 14:02:50,999 - mmdet - INFO - Epoch [1][1950/2116]	lr: 2.000e-02, eta: 2:15:28, time: 0.340, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0283, loss_rpn_bbox: 0.0069, s0.loss_cls: 0.0749, s0.acc: 98.0703, s0.loss_bbox: 0.0382, s1.loss_cls: 0.0318, s1.acc: 98.3379, s1.loss_bbox: 0.0394, s2.loss_cls: 0.0144, s2.acc: 98.0645, s2.loss_bbox: 0.0197, loss: 0.2536
2022-04-04 14:03:08,281 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 14:03:08,282 - mmdet - INFO - Epoch [1][2000/2116]	lr: 2.000e-02, eta: 2:15:10, time: 0.346, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0332, loss_rpn_bbox: 0.0104, s0.loss_cls: 0.0646, s0.acc: 98.2129, s0.loss_bbox: 0.0302, s1.loss_cls: 0.0286, s1.acc: 98.3574, s1.loss_bbox: 0.0322, s2.loss_cls: 0.0120, s2.acc: 98.5234, s2.loss_bbox: 0.0186, loss: 0.2296
2022-04-04 14:03:25,465 - mmdet - INFO - Epoch [1][2050/2116]	lr: 2.000e-02, eta: 2:14:51, time: 0.344, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0211, loss_rpn_bbox: 0.0079, s0.loss_cls: 0.0668, s0.acc: 98.0000, s0.loss_bbox: 0.0302, s1.loss_cls: 0.0303, s1.acc: 98.1973, s1.loss_bbox: 0.0350, s2.loss_cls: 0.0139, s2.acc: 98.3125, s2.loss_bbox: 0.0228, loss: 0.2281
2022-04-04 14:03:42,559 - mmdet - INFO - Epoch [1][2100/2116]	lr: 2.000e-02, eta: 2:14:31, time: 0.342, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0226, loss_rpn_bbox: 0.0056, s0.loss_cls: 0.0684, s0.acc: 98.2070, s0.loss_bbox: 0.0309, s1.loss_cls: 0.0282, s1.acc: 98.4551, s1.loss_bbox: 0.0346, s2.loss_cls: 0.0122, s2.acc: 98.5254, s2.loss_bbox: 0.0218, loss: 0.2243
2022-04-04 14:03:48,494 - mmdet - INFO - Saving checkpoint at 1 epochs
2022-04-04 14:06:10,079 - mmdet - INFO - Evaluating bbox...
2022-04-04 14:06:11,098 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.359
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.551
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.441
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.365
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.465
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.465
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.465
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.465
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000

2022-04-04 14:06:11,120 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 14:06:11,120 - mmdet - INFO - Epoch(val) [1][1918]	bbox_mAP: 0.3590, bbox_mAP_50: 0.5510, bbox_mAP_75: 0.4410, bbox_mAP_s: 0.3650, bbox_mAP_m: -1.0000, bbox_mAP_l: -1.0000, bbox_mAP_copypaste: 0.359 0.551 0.441 0.365 -1.000 -1.000
2022-04-04 14:06:30,359 - mmdet - INFO - Epoch [2][50/2116]	lr: 2.000e-02, eta: 2:13:29, time: 0.385, data_time: 0.049, memory: 4027, loss_rpn_cls: 0.0241, loss_rpn_bbox: 0.0092, s0.loss_cls: 0.0738, s0.acc: 97.8574, s0.loss_bbox: 0.0324, s1.loss_cls: 0.0319, s1.acc: 98.0859, s1.loss_bbox: 0.0360, s2.loss_cls: 0.0136, s2.acc: 98.2832, s2.loss_bbox: 0.0216, loss: 0.2426
2022-04-04 14:06:47,599 - mmdet - INFO - Epoch [2][100/2116]	lr: 2.000e-02, eta: 2:13:12, time: 0.345, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0251, loss_rpn_bbox: 0.0060, s0.loss_cls: 0.0706, s0.acc: 98.1055, s0.loss_bbox: 0.0314, s1.loss_cls: 0.0315, s1.acc: 98.1875, s1.loss_bbox: 0.0358, s2.loss_cls: 0.0139, s2.acc: 98.1895, s2.loss_bbox: 0.0225, loss: 0.2369
2022-04-04 14:07:04,396 - mmdet - INFO - Epoch [2][150/2116]	lr: 2.000e-02, eta: 2:12:50, time: 0.336, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0157, loss_rpn_bbox: 0.0058, s0.loss_cls: 0.0672, s0.acc: 98.0723, s0.loss_bbox: 0.0289, s1.loss_cls: 0.0318, s1.acc: 98.0586, s1.loss_bbox: 0.0332, s2.loss_cls: 0.0143, s2.acc: 98.2285, s2.loss_bbox: 0.0230, loss: 0.2199
2022-04-04 14:07:21,597 - mmdet - INFO - Epoch [2][200/2116]	lr: 2.000e-02, eta: 2:12:33, time: 0.344, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0295, loss_rpn_bbox: 0.0079, s0.loss_cls: 0.0555, s0.acc: 98.5234, s0.loss_bbox: 0.0262, s1.loss_cls: 0.0241, s1.acc: 98.6895, s1.loss_bbox: 0.0290, s2.loss_cls: 0.0113, s2.acc: 98.7285, s2.loss_bbox: 0.0200, loss: 0.2034
2022-04-04 14:07:39,642 - mmdet - INFO - Epoch [2][250/2116]	lr: 2.000e-02, eta: 2:12:23, time: 0.361, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0219, loss_rpn_bbox: 0.0096, s0.loss_cls: 0.0570, s0.acc: 98.5215, s0.loss_bbox: 0.0260, s1.loss_cls: 0.0248, s1.acc: 98.5820, s1.loss_bbox: 0.0286, s2.loss_cls: 0.0109, s2.acc: 98.7031, s2.loss_bbox: 0.0191, loss: 0.1979
2022-04-04 14:07:57,172 - mmdet - INFO - Epoch [2][300/2116]	lr: 2.000e-02, eta: 2:12:09, time: 0.351, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0195, loss_rpn_bbox: 0.0058, s0.loss_cls: 0.0554, s0.acc: 98.4902, s0.loss_bbox: 0.0256, s1.loss_cls: 0.0252, s1.acc: 98.5332, s1.loss_bbox: 0.0334, s2.loss_cls: 0.0111, s2.acc: 98.6641, s2.loss_bbox: 0.0212, loss: 0.1973
2022-04-04 14:08:14,341 - mmdet - INFO - Epoch [2][350/2116]	lr: 2.000e-02, eta: 2:11:51, time: 0.343, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0203, loss_rpn_bbox: 0.0056, s0.loss_cls: 0.0637, s0.acc: 98.4004, s0.loss_bbox: 0.0287, s1.loss_cls: 0.0261, s1.acc: 98.5801, s1.loss_bbox: 0.0305, s2.loss_cls: 0.0110, s2.acc: 98.6621, s2.loss_bbox: 0.0180, loss: 0.2038
2022-04-04 14:08:32,058 - mmdet - INFO - Epoch [2][400/2116]	lr: 2.000e-02, eta: 2:11:38, time: 0.354, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0213, loss_rpn_bbox: 0.0078, s0.loss_cls: 0.0592, s0.acc: 98.3906, s0.loss_bbox: 0.0279, s1.loss_cls: 0.0255, s1.acc: 98.6582, s1.loss_bbox: 0.0326, s2.loss_cls: 0.0107, s2.acc: 98.6914, s2.loss_bbox: 0.0203, loss: 0.2052
2022-04-04 14:08:49,081 - mmdet - INFO - Epoch [2][450/2116]	lr: 2.000e-02, eta: 2:11:18, time: 0.340, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0202, loss_rpn_bbox: 0.0096, s0.loss_cls: 0.0694, s0.acc: 98.0234, s0.loss_bbox: 0.0310, s1.loss_cls: 0.0329, s1.acc: 98.0449, s1.loss_bbox: 0.0388, s2.loss_cls: 0.0131, s2.acc: 98.4238, s2.loss_bbox: 0.0230, loss: 0.2380
2022-04-04 14:09:05,667 - mmdet - INFO - Epoch [2][500/2116]	lr: 2.000e-02, eta: 2:10:55, time: 0.332, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0341, loss_rpn_bbox: 0.0117, s0.loss_cls: 0.0676, s0.acc: 98.1309, s0.loss_bbox: 0.0318, s1.loss_cls: 0.0300, s1.acc: 98.1484, s1.loss_bbox: 0.0317, s2.loss_cls: 0.0130, s2.acc: 98.2344, s2.loss_bbox: 0.0192, loss: 0.2391
2022-04-04 14:09:22,789 - mmdet - INFO - Epoch [2][550/2116]	lr: 2.000e-02, eta: 2:10:37, time: 0.342, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0179, loss_rpn_bbox: 0.0065, s0.loss_cls: 0.0594, s0.acc: 98.2891, s0.loss_bbox: 0.0278, s1.loss_cls: 0.0278, s1.acc: 98.2871, s1.loss_bbox: 0.0293, s2.loss_cls: 0.0134, s2.acc: 98.2188, s2.loss_bbox: 0.0195, loss: 0.2016
2022-04-04 14:09:39,473 - mmdet - INFO - Epoch [2][600/2116]	lr: 2.000e-02, eta: 2:10:15, time: 0.334, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0198, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0561, s0.acc: 98.4453, s0.loss_bbox: 0.0270, s1.loss_cls: 0.0258, s1.acc: 98.5469, s1.loss_bbox: 0.0330, s2.loss_cls: 0.0117, s2.acc: 98.5000, s2.loss_bbox: 0.0210, loss: 0.2030
2022-04-04 14:09:56,917 - mmdet - INFO - Epoch [2][650/2116]	lr: 2.000e-02, eta: 2:09:59, time: 0.349, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0209, loss_rpn_bbox: 0.0089, s0.loss_cls: 0.0516, s0.acc: 98.5742, s0.loss_bbox: 0.0265, s1.loss_cls: 0.0235, s1.acc: 98.6582, s1.loss_bbox: 0.0322, s2.loss_cls: 0.0111, s2.acc: 98.5098, s2.loss_bbox: 0.0193, loss: 0.1940
2022-04-04 14:10:14,293 - mmdet - INFO - Epoch [2][700/2116]	lr: 2.000e-02, eta: 2:09:43, time: 0.348, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0202, loss_rpn_bbox: 0.0059, s0.loss_cls: 0.0708, s0.acc: 98.1758, s0.loss_bbox: 0.0315, s1.loss_cls: 0.0320, s1.acc: 98.1562, s1.loss_bbox: 0.0373, s2.loss_cls: 0.0133, s2.acc: 98.2500, s2.loss_bbox: 0.0225, loss: 0.2335
2022-04-04 14:10:31,838 - mmdet - INFO - Epoch [2][750/2116]	lr: 2.000e-02, eta: 2:09:28, time: 0.351, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0239, loss_rpn_bbox: 0.0099, s0.loss_cls: 0.0525, s0.acc: 98.4883, s0.loss_bbox: 0.0262, s1.loss_cls: 0.0252, s1.acc: 98.5605, s1.loss_bbox: 0.0320, s2.loss_cls: 0.0121, s2.acc: 98.4961, s2.loss_bbox: 0.0211, loss: 0.2028
2022-04-04 14:10:48,794 - mmdet - INFO - Epoch [2][800/2116]	lr: 2.000e-02, eta: 2:09:09, time: 0.339, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0196, loss_rpn_bbox: 0.0049, s0.loss_cls: 0.0520, s0.acc: 98.5684, s0.loss_bbox: 0.0226, s1.loss_cls: 0.0252, s1.acc: 98.5469, s1.loss_bbox: 0.0314, s2.loss_cls: 0.0118, s2.acc: 98.5527, s2.loss_bbox: 0.0216, loss: 0.1891
2022-04-04 14:11:06,235 - mmdet - INFO - Epoch [2][850/2116]	lr: 2.000e-02, eta: 2:08:53, time: 0.349, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0161, loss_rpn_bbox: 0.0043, s0.loss_cls: 0.0521, s0.acc: 98.5254, s0.loss_bbox: 0.0272, s1.loss_cls: 0.0238, s1.acc: 98.6191, s1.loss_bbox: 0.0345, s2.loss_cls: 0.0107, s2.acc: 98.6484, s2.loss_bbox: 0.0216, loss: 0.1903
2022-04-04 14:11:23,517 - mmdet - INFO - Epoch [2][900/2116]	lr: 2.000e-02, eta: 2:08:36, time: 0.346, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0218, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.0733, s0.acc: 97.8730, s0.loss_bbox: 0.0354, s1.loss_cls: 0.0358, s1.acc: 97.7676, s1.loss_bbox: 0.0407, s2.loss_cls: 0.0157, s2.acc: 97.8574, s2.loss_bbox: 0.0222, loss: 0.2536
2022-04-04 14:11:40,542 - mmdet - INFO - Epoch [2][950/2116]	lr: 2.000e-02, eta: 2:08:17, time: 0.340, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0256, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.0642, s0.acc: 98.2402, s0.loss_bbox: 0.0295, s1.loss_cls: 0.0287, s1.acc: 98.3984, s1.loss_bbox: 0.0324, s2.loss_cls: 0.0119, s2.acc: 98.5273, s2.loss_bbox: 0.0215, loss: 0.2224
2022-04-04 14:11:57,432 - mmdet - INFO - Epoch [2][1000/2116]	lr: 2.000e-02, eta: 2:07:58, time: 0.338, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0210, loss_rpn_bbox: 0.0063, s0.loss_cls: 0.0607, s0.acc: 98.2852, s0.loss_bbox: 0.0287, s1.loss_cls: 0.0272, s1.acc: 98.4238, s1.loss_bbox: 0.0332, s2.loss_cls: 0.0122, s2.acc: 98.4180, s2.loss_bbox: 0.0200, loss: 0.2092
2022-04-04 14:12:14,697 - mmdet - INFO - Epoch [2][1050/2116]	lr: 2.000e-02, eta: 2:07:41, time: 0.345, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0280, loss_rpn_bbox: 0.0078, s0.loss_cls: 0.0624, s0.acc: 98.2969, s0.loss_bbox: 0.0279, s1.loss_cls: 0.0272, s1.acc: 98.4023, s1.loss_bbox: 0.0261, s2.loss_cls: 0.0113, s2.acc: 98.7402, s2.loss_bbox: 0.0169, loss: 0.2077
2022-04-04 14:12:31,703 - mmdet - INFO - Epoch [2][1100/2116]	lr: 2.000e-02, eta: 2:07:22, time: 0.340, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0188, loss_rpn_bbox: 0.0061, s0.loss_cls: 0.0699, s0.acc: 98.2070, s0.loss_bbox: 0.0296, s1.loss_cls: 0.0322, s1.acc: 98.3301, s1.loss_bbox: 0.0358, s2.loss_cls: 0.0132, s2.acc: 98.4746, s2.loss_bbox: 0.0235, loss: 0.2291
2022-04-04 14:12:48,826 - mmdet - INFO - Epoch [2][1150/2116]	lr: 2.000e-02, eta: 2:07:04, time: 0.342, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0241, loss_rpn_bbox: 0.0121, s0.loss_cls: 0.0593, s0.acc: 98.3320, s0.loss_bbox: 0.0278, s1.loss_cls: 0.0274, s1.acc: 98.3047, s1.loss_bbox: 0.0335, s2.loss_cls: 0.0118, s2.acc: 98.5762, s2.loss_bbox: 0.0211, loss: 0.2170
2022-04-04 14:13:05,834 - mmdet - INFO - Epoch [2][1200/2116]	lr: 2.000e-02, eta: 2:06:45, time: 0.340, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0179, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0624, s0.acc: 98.1445, s0.loss_bbox: 0.0306, s1.loss_cls: 0.0290, s1.acc: 98.2129, s1.loss_bbox: 0.0395, s2.loss_cls: 0.0129, s2.acc: 98.1660, s2.loss_bbox: 0.0249, loss: 0.2241
2022-04-04 14:13:23,075 - mmdet - INFO - Epoch [2][1250/2116]	lr: 2.000e-02, eta: 2:06:28, time: 0.345, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0189, loss_rpn_bbox: 0.0066, s0.loss_cls: 0.0634, s0.acc: 98.2676, s0.loss_bbox: 0.0264, s1.loss_cls: 0.0273, s1.acc: 98.4395, s1.loss_bbox: 0.0309, s2.loss_cls: 0.0112, s2.acc: 98.6133, s2.loss_bbox: 0.0211, loss: 0.2058
2022-04-04 14:13:40,091 - mmdet - INFO - Epoch [2][1300/2116]	lr: 2.000e-02, eta: 2:06:09, time: 0.340, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0230, loss_rpn_bbox: 0.0070, s0.loss_cls: 0.0634, s0.acc: 98.2285, s0.loss_bbox: 0.0298, s1.loss_cls: 0.0273, s1.acc: 98.3750, s1.loss_bbox: 0.0336, s2.loss_cls: 0.0115, s2.acc: 98.5684, s2.loss_bbox: 0.0218, loss: 0.2173
2022-04-04 14:13:56,891 - mmdet - INFO - Epoch [2][1350/2116]	lr: 2.000e-02, eta: 2:05:49, time: 0.336, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0179, loss_rpn_bbox: 0.0053, s0.loss_cls: 0.0707, s0.acc: 98.0762, s0.loss_bbox: 0.0303, s1.loss_cls: 0.0323, s1.acc: 98.1836, s1.loss_bbox: 0.0365, s2.loss_cls: 0.0145, s2.acc: 98.2090, s2.loss_bbox: 0.0249, loss: 0.2325
2022-04-04 14:14:13,803 - mmdet - INFO - Epoch [2][1400/2116]	lr: 2.000e-02, eta: 2:05:30, time: 0.338, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0196, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0712, s0.acc: 98.1035, s0.loss_bbox: 0.0299, s1.loss_cls: 0.0321, s1.acc: 98.1465, s1.loss_bbox: 0.0313, s2.loss_cls: 0.0137, s2.acc: 98.2168, s2.loss_bbox: 0.0194, loss: 0.2243
2022-04-04 14:14:31,086 - mmdet - INFO - Epoch [2][1450/2116]	lr: 2.000e-02, eta: 2:05:14, time: 0.346, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0133, loss_rpn_bbox: 0.0058, s0.loss_cls: 0.0608, s0.acc: 98.2266, s0.loss_bbox: 0.0308, s1.loss_cls: 0.0300, s1.acc: 98.2539, s1.loss_bbox: 0.0385, s2.loss_cls: 0.0126, s2.acc: 98.5156, s2.loss_bbox: 0.0235, loss: 0.2154
2022-04-04 14:14:48,276 - mmdet - INFO - Epoch [2][1500/2116]	lr: 2.000e-02, eta: 2:04:56, time: 0.344, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0179, loss_rpn_bbox: 0.0072, s0.loss_cls: 0.0669, s0.acc: 98.0918, s0.loss_bbox: 0.0307, s1.loss_cls: 0.0294, s1.acc: 98.3105, s1.loss_bbox: 0.0356, s2.loss_cls: 0.0120, s2.acc: 98.5352, s2.loss_bbox: 0.0236, loss: 0.2232
2022-04-04 14:15:05,386 - mmdet - INFO - Epoch [2][1550/2116]	lr: 2.000e-02, eta: 2:04:38, time: 0.342, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0193, loss_rpn_bbox: 0.0065, s0.loss_cls: 0.0688, s0.acc: 98.2012, s0.loss_bbox: 0.0306, s1.loss_cls: 0.0325, s1.acc: 98.2188, s1.loss_bbox: 0.0381, s2.loss_cls: 0.0133, s2.acc: 98.3613, s2.loss_bbox: 0.0255, loss: 0.2345
2022-04-04 14:15:22,334 - mmdet - INFO - Epoch [2][1600/2116]	lr: 2.000e-02, eta: 2:04:20, time: 0.339, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0191, loss_rpn_bbox: 0.0054, s0.loss_cls: 0.0670, s0.acc: 98.2871, s0.loss_bbox: 0.0314, s1.loss_cls: 0.0282, s1.acc: 98.4980, s1.loss_bbox: 0.0359, s2.loss_cls: 0.0115, s2.acc: 98.5059, s2.loss_bbox: 0.0234, loss: 0.2219
2022-04-04 14:15:39,343 - mmdet - INFO - Epoch [2][1650/2116]	lr: 2.000e-02, eta: 2:04:01, time: 0.340, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0199, loss_rpn_bbox: 0.0084, s0.loss_cls: 0.0660, s0.acc: 98.1621, s0.loss_bbox: 0.0326, s1.loss_cls: 0.0281, s1.acc: 98.4023, s1.loss_bbox: 0.0373, s2.loss_cls: 0.0122, s2.acc: 98.4766, s2.loss_bbox: 0.0225, loss: 0.2271
2022-04-04 14:15:56,743 - mmdet - INFO - Epoch [2][1700/2116]	lr: 2.000e-02, eta: 2:03:45, time: 0.348, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0139, loss_rpn_bbox: 0.0038, s0.loss_cls: 0.0658, s0.acc: 98.2188, s0.loss_bbox: 0.0321, s1.loss_cls: 0.0297, s1.acc: 98.2285, s1.loss_bbox: 0.0386, s2.loss_cls: 0.0122, s2.acc: 98.3145, s2.loss_bbox: 0.0269, loss: 0.2231
2022-04-04 14:16:13,812 - mmdet - INFO - Epoch [2][1750/2116]	lr: 2.000e-02, eta: 2:03:27, time: 0.341, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0196, loss_rpn_bbox: 0.0052, s0.loss_cls: 0.0634, s0.acc: 98.3945, s0.loss_bbox: 0.0307, s1.loss_cls: 0.0249, s1.acc: 98.6699, s1.loss_bbox: 0.0347, s2.loss_cls: 0.0102, s2.acc: 98.7656, s2.loss_bbox: 0.0223, loss: 0.2109
2022-04-04 14:16:31,370 - mmdet - INFO - Epoch [2][1800/2116]	lr: 2.000e-02, eta: 2:03:12, time: 0.351, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0036, s0.loss_cls: 0.0649, s0.acc: 98.2656, s0.loss_bbox: 0.0308, s1.loss_cls: 0.0276, s1.acc: 98.4531, s1.loss_bbox: 0.0345, s2.loss_cls: 0.0118, s2.acc: 98.6328, s2.loss_bbox: 0.0227, loss: 0.2099
2022-04-04 14:16:48,928 - mmdet - INFO - Epoch [2][1850/2116]	lr: 2.000e-02, eta: 2:02:57, time: 0.351, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0234, loss_rpn_bbox: 0.0122, s0.loss_cls: 0.0642, s0.acc: 98.1953, s0.loss_bbox: 0.0300, s1.loss_cls: 0.0276, s1.acc: 98.2812, s1.loss_bbox: 0.0332, s2.loss_cls: 0.0116, s2.acc: 98.4297, s2.loss_bbox: 0.0209, loss: 0.2231
2022-04-04 14:17:06,008 - mmdet - INFO - Epoch [2][1900/2116]	lr: 2.000e-02, eta: 2:02:39, time: 0.342, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0156, loss_rpn_bbox: 0.0054, s0.loss_cls: 0.0670, s0.acc: 98.0684, s0.loss_bbox: 0.0289, s1.loss_cls: 0.0296, s1.acc: 98.1426, s1.loss_bbox: 0.0340, s2.loss_cls: 0.0135, s2.acc: 98.1035, s2.loss_bbox: 0.0234, loss: 0.2174
2022-04-04 14:17:22,936 - mmdet - INFO - Epoch [2][1950/2116]	lr: 2.000e-02, eta: 2:02:20, time: 0.339, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0237, loss_rpn_bbox: 0.0064, s0.loss_cls: 0.0588, s0.acc: 98.3496, s0.loss_bbox: 0.0275, s1.loss_cls: 0.0252, s1.acc: 98.5117, s1.loss_bbox: 0.0287, s2.loss_cls: 0.0110, s2.acc: 98.6270, s2.loss_bbox: 0.0201, loss: 0.2015
2022-04-04 14:17:40,691 - mmdet - INFO - Epoch [2][2000/2116]	lr: 2.000e-02, eta: 2:02:06, time: 0.355, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0188, loss_rpn_bbox: 0.0083, s0.loss_cls: 0.0636, s0.acc: 98.2188, s0.loss_bbox: 0.0324, s1.loss_cls: 0.0273, s1.acc: 98.4043, s1.loss_bbox: 0.0342, s2.loss_cls: 0.0120, s2.acc: 98.4785, s2.loss_bbox: 0.0219, loss: 0.2185
2022-04-04 14:17:58,261 - mmdet - INFO - Epoch [2][2050/2116]	lr: 2.000e-02, eta: 2:01:50, time: 0.351, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0199, loss_rpn_bbox: 0.0067, s0.loss_cls: 0.0629, s0.acc: 98.2969, s0.loss_bbox: 0.0305, s1.loss_cls: 0.0267, s1.acc: 98.4238, s1.loss_bbox: 0.0329, s2.loss_cls: 0.0116, s2.acc: 98.3867, s2.loss_bbox: 0.0227, loss: 0.2140
2022-04-04 14:18:15,676 - mmdet - INFO - Epoch [2][2100/2116]	lr: 2.000e-02, eta: 2:01:34, time: 0.348, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0225, loss_rpn_bbox: 0.0065, s0.loss_cls: 0.0622, s0.acc: 98.3672, s0.loss_bbox: 0.0285, s1.loss_cls: 0.0267, s1.acc: 98.6074, s1.loss_bbox: 0.0314, s2.loss_cls: 0.0114, s2.acc: 98.5508, s2.loss_bbox: 0.0195, loss: 0.2087
2022-04-04 14:18:21,119 - mmdet - INFO - Saving checkpoint at 2 epochs
2022-04-04 14:20:42,605 - mmdet - INFO - Evaluating bbox...
2022-04-04 14:20:43,792 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.393
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.584
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.469
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.393
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000

2022-04-04 14:20:43,812 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 14:20:43,813 - mmdet - INFO - Epoch(val) [2][1918]	bbox_mAP: 0.3930, bbox_mAP_50: 0.5840, bbox_mAP_75: 0.4690, bbox_mAP_s: 0.3930, bbox_mAP_m: -1.0000, bbox_mAP_l: -1.0000, bbox_mAP_copypaste: 0.393 0.584 0.469 0.393 -1.000 -1.000
2022-04-04 14:21:03,548 - mmdet - INFO - Epoch [3][50/2116]	lr: 2.000e-02, eta: 2:00:56, time: 0.394, data_time: 0.049, memory: 4027, loss_rpn_cls: 0.0191, loss_rpn_bbox: 0.0057, s0.loss_cls: 0.0669, s0.acc: 98.2852, s0.loss_bbox: 0.0285, s1.loss_cls: 0.0280, s1.acc: 98.4727, s1.loss_bbox: 0.0320, s2.loss_cls: 0.0116, s2.acc: 98.6387, s2.loss_bbox: 0.0192, loss: 0.2111
2022-04-04 14:21:20,820 - mmdet - INFO - Epoch [3][100/2116]	lr: 2.000e-02, eta: 2:00:39, time: 0.345, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0165, loss_rpn_bbox: 0.0074, s0.loss_cls: 0.0544, s0.acc: 98.4512, s0.loss_bbox: 0.0253, s1.loss_cls: 0.0250, s1.acc: 98.5293, s1.loss_bbox: 0.0325, s2.loss_cls: 0.0117, s2.acc: 98.5176, s2.loss_bbox: 0.0244, loss: 0.1973
2022-04-04 14:21:38,124 - mmdet - INFO - Epoch [3][150/2116]	lr: 2.000e-02, eta: 2:00:23, time: 0.346, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0187, loss_rpn_bbox: 0.0058, s0.loss_cls: 0.0529, s0.acc: 98.4277, s0.loss_bbox: 0.0265, s1.loss_cls: 0.0247, s1.acc: 98.4336, s1.loss_bbox: 0.0304, s2.loss_cls: 0.0114, s2.acc: 98.5078, s2.loss_bbox: 0.0212, loss: 0.1915
2022-04-04 14:21:55,267 - mmdet - INFO - Epoch [3][200/2116]	lr: 2.000e-02, eta: 2:00:05, time: 0.343, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0179, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0577, s0.acc: 98.3652, s0.loss_bbox: 0.0265, s1.loss_cls: 0.0256, s1.acc: 98.5547, s1.loss_bbox: 0.0311, s2.loss_cls: 0.0110, s2.acc: 98.6895, s2.loss_bbox: 0.0203, loss: 0.1976
2022-04-04 14:22:11,924 - mmdet - INFO - Epoch [3][250/2116]	lr: 2.000e-02, eta: 1:59:46, time: 0.333, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0169, loss_rpn_bbox: 0.0062, s0.loss_cls: 0.0531, s0.acc: 98.4219, s0.loss_bbox: 0.0270, s1.loss_cls: 0.0242, s1.acc: 98.5000, s1.loss_bbox: 0.0356, s2.loss_cls: 0.0104, s2.acc: 98.7891, s2.loss_bbox: 0.0249, loss: 0.1983
2022-04-04 14:22:28,989 - mmdet - INFO - Epoch [3][300/2116]	lr: 2.000e-02, eta: 1:59:28, time: 0.341, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0190, loss_rpn_bbox: 0.0059, s0.loss_cls: 0.0520, s0.acc: 98.5820, s0.loss_bbox: 0.0245, s1.loss_cls: 0.0231, s1.acc: 98.7070, s1.loss_bbox: 0.0287, s2.loss_cls: 0.0101, s2.acc: 98.7324, s2.loss_bbox: 0.0216, loss: 0.1848
2022-04-04 14:22:45,990 - mmdet - INFO - Epoch [3][350/2116]	lr: 2.000e-02, eta: 1:59:10, time: 0.340, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0155, loss_rpn_bbox: 0.0072, s0.loss_cls: 0.0467, s0.acc: 98.6309, s0.loss_bbox: 0.0263, s1.loss_cls: 0.0205, s1.acc: 98.7441, s1.loss_bbox: 0.0357, s2.loss_cls: 0.0094, s2.acc: 98.6582, s2.loss_bbox: 0.0268, loss: 0.1881
2022-04-04 14:23:03,269 - mmdet - INFO - Epoch [3][400/2116]	lr: 2.000e-02, eta: 1:58:53, time: 0.346, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0164, loss_rpn_bbox: 0.0054, s0.loss_cls: 0.0604, s0.acc: 98.2090, s0.loss_bbox: 0.0285, s1.loss_cls: 0.0281, s1.acc: 98.2227, s1.loss_bbox: 0.0334, s2.loss_cls: 0.0129, s2.acc: 98.1309, s2.loss_bbox: 0.0199, loss: 0.2051
2022-04-04 14:23:20,077 - mmdet - INFO - Epoch [3][450/2116]	lr: 2.000e-02, eta: 1:58:34, time: 0.336, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0150, loss_rpn_bbox: 0.0046, s0.loss_cls: 0.0553, s0.acc: 98.4434, s0.loss_bbox: 0.0265, s1.loss_cls: 0.0242, s1.acc: 98.5234, s1.loss_bbox: 0.0298, s2.loss_cls: 0.0103, s2.acc: 98.6211, s2.loss_bbox: 0.0207, loss: 0.1865
2022-04-04 14:23:37,402 - mmdet - INFO - Epoch [3][500/2116]	lr: 2.000e-02, eta: 1:58:18, time: 0.347, data_time: 0.005, memory: 4027, loss_rpn_cls: 0.0178, loss_rpn_bbox: 0.0060, s0.loss_cls: 0.0593, s0.acc: 98.2773, s0.loss_bbox: 0.0296, s1.loss_cls: 0.0248, s1.acc: 98.5273, s1.loss_bbox: 0.0334, s2.loss_cls: 0.0107, s2.acc: 98.5020, s2.loss_bbox: 0.0214, loss: 0.2030
2022-04-04 14:23:54,692 - mmdet - INFO - Epoch [3][550/2116]	lr: 2.000e-02, eta: 1:58:01, time: 0.346, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0136, loss_rpn_bbox: 0.0067, s0.loss_cls: 0.0604, s0.acc: 98.3770, s0.loss_bbox: 0.0274, s1.loss_cls: 0.0258, s1.acc: 98.5059, s1.loss_bbox: 0.0341, s2.loss_cls: 0.0111, s2.acc: 98.5215, s2.loss_bbox: 0.0205, loss: 0.1996
2022-04-04 14:24:12,175 - mmdet - INFO - Epoch [3][600/2116]	lr: 2.000e-02, eta: 1:57:45, time: 0.350, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0255, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0631, s0.acc: 98.1035, s0.loss_bbox: 0.0256, s1.loss_cls: 0.0288, s1.acc: 98.1367, s1.loss_bbox: 0.0293, s2.loss_cls: 0.0127, s2.acc: 98.3105, s2.loss_bbox: 0.0174, loss: 0.2092
2022-04-04 14:24:29,468 - mmdet - INFO - Epoch [3][650/2116]	lr: 2.000e-02, eta: 1:57:29, time: 0.346, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0155, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0474, s0.acc: 98.5254, s0.loss_bbox: 0.0233, s1.loss_cls: 0.0232, s1.acc: 98.4531, s1.loss_bbox: 0.0326, s2.loss_cls: 0.0111, s2.acc: 98.3828, s2.loss_bbox: 0.0239, loss: 0.1846
