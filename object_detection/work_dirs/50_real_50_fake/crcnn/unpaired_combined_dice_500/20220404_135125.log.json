{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: \nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.1+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu110\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.23.0+21b6da3", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/50_real_50_fake/helper/annotation/unpaired_combined_dice_500.json',\n        img_prefix=\n        '../dataset/xray/composed/50_real_50_fake/unpaired_combined_dice_500/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/50_real_50_fake/crcnn/unpaired_combined_dice_500/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 201871877, "exp_name": "crcnn_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4026, "data_time": 0.04812, "loss_rpn_cls": 0.06368, "loss_rpn_bbox": 0.00861, "s0.loss_cls": 0.29369, "s0.acc": 91.19336, "s0.loss_bbox": 0.03282, "s1.loss_cls": 0.13648, "s1.acc": 96.0, "s1.loss_bbox": 0.02061, "s2.loss_cls": 0.08893, "s2.acc": 83.66211, "s2.loss_bbox": 0.00768, "loss": 0.65249, "time": 0.38262}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4026, "data_time": 0.00413, "loss_rpn_cls": 0.03081, "loss_rpn_bbox": 0.00847, "s0.loss_cls": 0.11655, "s0.acc": 97.24609, "s0.loss_bbox": 0.04484, "s1.loss_cls": 0.05028, "s1.acc": 97.66797, "s1.loss_bbox": 0.03175, "s2.loss_cls": 0.02025, "s2.acc": 98.33594, "s2.loss_bbox": 0.01049, "loss": 0.31345, "time": 0.32769}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4026, "data_time": 0.0043, "loss_rpn_cls": 0.02247, "loss_rpn_bbox": 0.00463, "s0.loss_cls": 0.1173, "s0.acc": 97.05469, "s0.loss_bbox": 0.04848, "s1.loss_cls": 0.05096, "s1.acc": 97.3457, "s1.loss_bbox": 0.03604, "s2.loss_cls": 0.02057, "s2.acc": 98.07812, "s2.loss_bbox": 0.01323, "loss": 0.31368, "time": 0.33259}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4026, "data_time": 0.00419, "loss_rpn_cls": 0.03247, "loss_rpn_bbox": 0.00761, "s0.loss_cls": 0.0996, "s0.acc": 97.47852, "s0.loss_bbox": 0.04033, "s1.loss_cls": 0.04352, "s1.acc": 97.63672, "s1.loss_bbox": 0.0297, "s2.loss_cls": 0.01747, "s2.acc": 98.02734, "s2.loss_bbox": 0.01119, "loss": 0.28188, "time": 0.3354}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4026, "data_time": 0.00409, "loss_rpn_cls": 0.03639, "loss_rpn_bbox": 0.00985, "s0.loss_cls": 0.09709, "s0.acc": 97.67773, "s0.loss_bbox": 0.03943, "s1.loss_cls": 0.03987, "s1.acc": 98.01367, "s1.loss_bbox": 0.03281, "s2.loss_cls": 0.01667, "s2.acc": 98.12891, "s2.loss_bbox": 0.01402, "loss": 0.28614, "time": 0.33902}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4026, "data_time": 0.00419, "loss_rpn_cls": 0.03046, "loss_rpn_bbox": 0.00984, "s0.loss_cls": 0.07803, "s0.acc": 97.87305, "s0.loss_bbox": 0.03118, "s1.loss_cls": 0.03429, "s1.acc": 97.95508, "s1.loss_bbox": 0.02668, "s2.loss_cls": 0.0154, "s2.acc": 98.20117, "s2.loss_bbox": 0.01366, "loss": 0.23955, "time": 0.34362}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4026, "data_time": 0.00421, "loss_rpn_cls": 0.02407, "loss_rpn_bbox": 0.00967, "s0.loss_cls": 0.07405, "s0.acc": 98.00781, "s0.loss_bbox": 0.03086, "s1.loss_cls": 0.0338, "s1.acc": 97.85938, "s1.loss_bbox": 0.03314, "s2.loss_cls": 0.01526, "s2.acc": 98.11719, "s2.loss_bbox": 0.01635, "loss": 0.2372, "time": 0.34683}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4026, "data_time": 0.00437, "loss_rpn_cls": 0.03499, "loss_rpn_bbox": 0.01111, "s0.loss_cls": 0.09644, "s0.acc": 97.66992, "s0.loss_bbox": 0.03681, "s1.loss_cls": 0.04048, "s1.acc": 97.94922, "s1.loss_bbox": 0.03042, "s2.loss_cls": 0.01697, "s2.acc": 98.19336, "s2.loss_bbox": 0.01387, "loss": 0.28108, "time": 0.34491}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4026, "data_time": 0.00416, "loss_rpn_cls": 0.03129, "loss_rpn_bbox": 0.0108, "s0.loss_cls": 0.08498, "s0.acc": 97.9082, "s0.loss_bbox": 0.0366, "s1.loss_cls": 0.03649, "s1.acc": 98.06836, "s1.loss_bbox": 0.03324, "s2.loss_cls": 0.01562, "s2.acc": 98.31055, "s2.loss_bbox": 0.0163, "loss": 0.26532, "time": 0.3441}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4026, "data_time": 0.00451, "loss_rpn_cls": 0.03244, "loss_rpn_bbox": 0.00946, "s0.loss_cls": 0.08687, "s0.acc": 97.89453, "s0.loss_bbox": 0.03388, "s1.loss_cls": 0.03629, "s1.acc": 98.05078, "s1.loss_bbox": 0.02925, "s2.loss_cls": 0.01441, "s2.acc": 98.40625, "s2.loss_bbox": 0.01301, "loss": 0.25561, "time": 0.33797}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4026, "data_time": 0.00449, "loss_rpn_cls": 0.03279, "loss_rpn_bbox": 0.01309, "s0.loss_cls": 0.06807, "s0.acc": 98.08008, "s0.loss_bbox": 0.03029, "s1.loss_cls": 0.03209, "s1.acc": 98.13086, "s1.loss_bbox": 0.02849, "s2.loss_cls": 0.01464, "s2.acc": 98.01758, "s2.loss_bbox": 0.01666, "loss": 0.23612, "time": 0.33856}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4026, "data_time": 0.00464, "loss_rpn_cls": 0.02683, "loss_rpn_bbox": 0.00872, "s0.loss_cls": 0.0762, "s0.acc": 97.97852, "s0.loss_bbox": 0.03142, "s1.loss_cls": 0.03357, "s1.acc": 98.11719, "s1.loss_bbox": 0.03096, "s2.loss_cls": 0.01477, "s2.acc": 98.25, "s2.loss_bbox": 0.01755, "loss": 0.24002, "time": 0.35306}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4026, "data_time": 0.00452, "loss_rpn_cls": 0.03005, "loss_rpn_bbox": 0.00989, "s0.loss_cls": 0.07327, "s0.acc": 98.07422, "s0.loss_bbox": 0.02743, "s1.loss_cls": 0.03249, "s1.acc": 98.18359, "s1.loss_bbox": 0.02613, "s2.loss_cls": 0.0145, "s2.acc": 98.19727, "s2.loss_bbox": 0.01558, "loss": 0.22935, "time": 0.35887}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4026, "data_time": 0.00439, "loss_rpn_cls": 0.03951, "loss_rpn_bbox": 0.01137, "s0.loss_cls": 0.07131, "s0.acc": 98.21484, "s0.loss_bbox": 0.02763, "s1.loss_cls": 0.03268, "s1.acc": 98.30078, "s1.loss_bbox": 0.02652, "s2.loss_cls": 0.01455, "s2.acc": 98.2793, "s2.loss_bbox": 0.01608, "loss": 0.23966, "time": 0.35688}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4026, "data_time": 0.0044, "loss_rpn_cls": 0.02625, "loss_rpn_bbox": 0.00733, "s0.loss_cls": 0.07194, "s0.acc": 98.17188, "s0.loss_bbox": 0.02769, "s1.loss_cls": 0.03266, "s1.acc": 98.16016, "s1.loss_bbox": 0.02891, "s2.loss_cls": 0.01462, "s2.acc": 98.38867, "s2.loss_bbox": 0.01793, "loss": 0.22733, "time": 0.34632}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4026, "data_time": 0.0043, "loss_rpn_cls": 0.01942, "loss_rpn_bbox": 0.00469, "s0.loss_cls": 0.07582, "s0.acc": 97.9082, "s0.loss_bbox": 0.03181, "s1.loss_cls": 0.03579, "s1.acc": 97.8418, "s1.loss_bbox": 0.03549, "s2.loss_cls": 0.01544, "s2.acc": 97.99805, "s2.loss_bbox": 0.0204, "loss": 0.23884, "time": 0.34536}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4026, "data_time": 0.00439, "loss_rpn_cls": 0.02598, "loss_rpn_bbox": 0.00636, "s0.loss_cls": 0.07501, "s0.acc": 98.0, "s0.loss_bbox": 0.03425, "s1.loss_cls": 0.03507, "s1.acc": 98.05469, "s1.loss_bbox": 0.03658, "s2.loss_cls": 0.01473, "s2.acc": 98.32812, "s2.loss_bbox": 0.01971, "loss": 0.2477, "time": 0.33707}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4026, "data_time": 0.00454, "loss_rpn_cls": 0.02627, "loss_rpn_bbox": 0.00863, "s0.loss_cls": 0.0826, "s0.acc": 97.86914, "s0.loss_bbox": 0.03387, "s1.loss_cls": 0.0353, "s1.acc": 97.93359, "s1.loss_bbox": 0.03445, "s2.loss_cls": 0.01515, "s2.acc": 97.97852, "s2.loss_bbox": 0.02246, "loss": 0.25873, "time": 0.35246}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4026, "data_time": 0.00482, "loss_rpn_cls": 0.02261, "loss_rpn_bbox": 0.00792, "s0.loss_cls": 0.0813, "s0.acc": 97.9375, "s0.loss_bbox": 0.03693, "s1.loss_cls": 0.03372, "s1.acc": 98.15625, "s1.loss_bbox": 0.03366, "s2.loss_cls": 0.01501, "s2.acc": 98.0625, "s2.loss_bbox": 0.01784, "loss": 0.24899, "time": 0.35209}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4026, "data_time": 0.00476, "loss_rpn_cls": 0.03055, "loss_rpn_bbox": 0.01145, "s0.loss_cls": 0.0639, "s0.acc": 98.36523, "s0.loss_bbox": 0.02587, "s1.loss_cls": 0.0281, "s1.acc": 98.50781, "s1.loss_bbox": 0.02887, "s2.loss_cls": 0.01261, "s2.acc": 98.51172, "s2.loss_bbox": 0.01758, "loss": 0.21893, "time": 0.35989}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4026, "data_time": 0.00459, "loss_rpn_cls": 0.04231, "loss_rpn_bbox": 0.01059, "s0.loss_cls": 0.06352, "s0.acc": 98.24219, "s0.loss_bbox": 0.02793, "s1.loss_cls": 0.02901, "s1.acc": 98.45312, "s1.loss_bbox": 0.03215, "s2.loss_cls": 0.01258, "s2.acc": 98.61523, "s2.loss_bbox": 0.01836, "loss": 0.23646, "time": 0.35353}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4026, "data_time": 0.00447, "loss_rpn_cls": 0.02469, "loss_rpn_bbox": 0.007, "s0.loss_cls": 0.06262, "s0.acc": 98.29102, "s0.loss_bbox": 0.03007, "s1.loss_cls": 0.02891, "s1.acc": 98.35547, "s1.loss_bbox": 0.03381, "s2.loss_cls": 0.01302, "s2.acc": 98.35547, "s2.loss_bbox": 0.01947, "loss": 0.21957, "time": 0.35412}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4026, "data_time": 0.00437, "loss_rpn_cls": 0.02558, "loss_rpn_bbox": 0.00715, "s0.loss_cls": 0.07307, "s0.acc": 98.04688, "s0.loss_bbox": 0.03194, "s1.loss_cls": 0.03371, "s1.acc": 98.14648, "s1.loss_bbox": 0.03092, "s2.loss_cls": 0.01443, "s2.acc": 98.26172, "s2.loss_bbox": 0.01761, "loss": 0.23442, "time": 0.34621}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 4026, "data_time": 0.00429, "loss_rpn_cls": 0.02121, "loss_rpn_bbox": 0.00758, "s0.loss_cls": 0.07493, "s0.acc": 97.82227, "s0.loss_bbox": 0.03674, "s1.loss_cls": 0.03674, "s1.acc": 97.64258, "s1.loss_bbox": 0.04254, "s2.loss_cls": 0.01558, "s2.acc": 98.10547, "s2.loss_bbox": 0.02569, "loss": 0.26102, "time": 0.34402}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 4026, "data_time": 0.00458, "loss_rpn_cls": 0.02611, "loss_rpn_bbox": 0.00729, "s0.loss_cls": 0.0746, "s0.acc": 97.96484, "s0.loss_bbox": 0.03486, "s1.loss_cls": 0.03339, "s1.acc": 97.98047, "s1.loss_bbox": 0.03755, "s2.loss_cls": 0.0151, "s2.acc": 97.9707, "s2.loss_bbox": 0.0208, "loss": 0.24971, "time": 0.34569}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 4026, "data_time": 0.0043, "loss_rpn_cls": 0.02817, "loss_rpn_bbox": 0.00706, "s0.loss_cls": 0.0738, "s0.acc": 98.04492, "s0.loss_bbox": 0.03345, "s1.loss_cls": 0.03265, "s1.acc": 98.16016, "s1.loss_bbox": 0.03151, "s2.loss_cls": 0.01383, "s2.acc": 98.30273, "s2.loss_bbox": 0.01725, "loss": 0.2377, "time": 0.34513}
