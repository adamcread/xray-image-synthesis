{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: \nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.1+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu110\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.23.0+21b6da3", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/50_real_50_fake/helper/annotation/unpaired_combined_tversky_700.json',\n        img_prefix=\n        '../dataset/xray/composed/50_real_50_fake/unpaired_combined_tversky_700/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/50_real_50_fake/crcnn/unpaired_combined_tversky_700/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 601776733, "exp_name": "crcnn_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4023, "data_time": 0.04692, "loss_rpn_cls": 0.04694, "loss_rpn_bbox": 0.00835, "s0.loss_cls": 0.29479, "s0.acc": 94.01562, "s0.loss_bbox": 0.03961, "s1.loss_cls": 0.15288, "s1.acc": 93.16406, "s1.loss_bbox": 0.02625, "s2.loss_cls": 0.06421, "s2.acc": 95.43164, "s2.loss_bbox": 0.00858, "loss": 0.64162, "time": 0.3644}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4023, "data_time": 0.00368, "loss_rpn_cls": 0.03436, "loss_rpn_bbox": 0.008, "s0.loss_cls": 0.11657, "s0.acc": 97.0332, "s0.loss_bbox": 0.0458, "s1.loss_cls": 0.05294, "s1.acc": 97.33594, "s1.loss_bbox": 0.03383, "s2.loss_cls": 0.02242, "s2.acc": 97.94727, "s2.loss_bbox": 0.01333, "loss": 0.32725, "time": 0.31661}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4023, "data_time": 0.00384, "loss_rpn_cls": 0.03355, "loss_rpn_bbox": 0.00717, "s0.loss_cls": 0.1054, "s0.acc": 97.42188, "s0.loss_bbox": 0.0402, "s1.loss_cls": 0.04698, "s1.acc": 97.38281, "s1.loss_bbox": 0.03134, "s2.loss_cls": 0.02007, "s2.acc": 97.87695, "s2.loss_bbox": 0.01412, "loss": 0.29883, "time": 0.3193}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4023, "data_time": 0.00373, "loss_rpn_cls": 0.03555, "loss_rpn_bbox": 0.00763, "s0.loss_cls": 0.09018, "s0.acc": 97.5957, "s0.loss_bbox": 0.03813, "s1.loss_cls": 0.04112, "s1.acc": 97.77148, "s1.loss_bbox": 0.03411, "s2.loss_cls": 0.01771, "s2.acc": 97.88281, "s2.loss_bbox": 0.01529, "loss": 0.27972, "time": 0.32258}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4023, "data_time": 0.00372, "loss_rpn_cls": 0.02917, "loss_rpn_bbox": 0.00927, "s0.loss_cls": 0.07081, "s0.acc": 97.98047, "s0.loss_bbox": 0.02693, "s1.loss_cls": 0.036, "s1.acc": 97.88477, "s1.loss_bbox": 0.03221, "s2.loss_cls": 0.01725, "s2.acc": 97.77734, "s2.loss_bbox": 0.01729, "loss": 0.23894, "time": 0.3252}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4023, "data_time": 0.00385, "loss_rpn_cls": 0.02427, "loss_rpn_bbox": 0.00645, "s0.loss_cls": 0.07586, "s0.acc": 97.93555, "s0.loss_bbox": 0.034, "s1.loss_cls": 0.0334, "s1.acc": 97.92188, "s1.loss_bbox": 0.03426, "s2.loss_cls": 0.01552, "s2.acc": 98.05859, "s2.loss_bbox": 0.01726, "loss": 0.24101, "time": 0.32181}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4023, "data_time": 0.00399, "loss_rpn_cls": 0.01936, "loss_rpn_bbox": 0.00845, "s0.loss_cls": 0.0824, "s0.acc": 97.8418, "s0.loss_bbox": 0.03629, "s1.loss_cls": 0.03771, "s1.acc": 97.87695, "s1.loss_bbox": 0.03716, "s2.loss_cls": 0.01836, "s2.acc": 97.63672, "s2.loss_bbox": 0.02161, "loss": 0.26134, "time": 0.3272}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4023, "data_time": 0.00405, "loss_rpn_cls": 0.02889, "loss_rpn_bbox": 0.00929, "s0.loss_cls": 0.07695, "s0.acc": 98.07617, "s0.loss_bbox": 0.03112, "s1.loss_cls": 0.03242, "s1.acc": 98.21484, "s1.loss_bbox": 0.02813, "s2.loss_cls": 0.01388, "s2.acc": 98.30859, "s2.loss_bbox": 0.01482, "loss": 0.2355, "time": 0.3253}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4023, "data_time": 0.00413, "loss_rpn_cls": 0.03792, "loss_rpn_bbox": 0.00993, "s0.loss_cls": 0.08091, "s0.acc": 97.95312, "s0.loss_bbox": 0.02938, "s1.loss_cls": 0.03532, "s1.acc": 98.04102, "s1.loss_bbox": 0.03229, "s2.loss_cls": 0.01464, "s2.acc": 98.2207, "s2.loss_bbox": 0.01615, "loss": 0.25654, "time": 0.32808}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4023, "data_time": 0.00395, "loss_rpn_cls": 0.03472, "loss_rpn_bbox": 0.01382, "s0.loss_cls": 0.08074, "s0.acc": 97.86523, "s0.loss_bbox": 0.02853, "s1.loss_cls": 0.03763, "s1.acc": 97.6875, "s1.loss_bbox": 0.02639, "s2.loss_cls": 0.01689, "s2.acc": 97.66797, "s2.loss_bbox": 0.01419, "loss": 0.2529, "time": 0.32415}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4023, "data_time": 0.00387, "loss_rpn_cls": 0.02848, "loss_rpn_bbox": 0.00768, "s0.loss_cls": 0.06804, "s0.acc": 98.10352, "s0.loss_bbox": 0.02734, "s1.loss_cls": 0.0343, "s1.acc": 97.92773, "s1.loss_bbox": 0.02961, "s2.loss_cls": 0.01584, "s2.acc": 97.93945, "s2.loss_bbox": 0.0151, "loss": 0.2264, "time": 0.32746}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4023, "data_time": 0.00402, "loss_rpn_cls": 0.02466, "loss_rpn_bbox": 0.01007, "s0.loss_cls": 0.07325, "s0.acc": 97.99219, "s0.loss_bbox": 0.03403, "s1.loss_cls": 0.03357, "s1.acc": 97.98438, "s1.loss_bbox": 0.03622, "s2.loss_cls": 0.01588, "s2.acc": 97.92773, "s2.loss_bbox": 0.02278, "loss": 0.25046, "time": 0.3301}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4023, "data_time": 0.00401, "loss_rpn_cls": 0.0195, "loss_rpn_bbox": 0.00819, "s0.loss_cls": 0.07963, "s0.acc": 97.77148, "s0.loss_bbox": 0.03253, "s1.loss_cls": 0.03703, "s1.acc": 97.71289, "s1.loss_bbox": 0.03631, "s2.loss_cls": 0.01659, "s2.acc": 97.84961, "s2.loss_bbox": 0.02039, "loss": 0.25017, "time": 0.32954}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4023, "data_time": 0.00388, "loss_rpn_cls": 0.02112, "loss_rpn_bbox": 0.00601, "s0.loss_cls": 0.07796, "s0.acc": 97.78125, "s0.loss_bbox": 0.03253, "s1.loss_cls": 0.03778, "s1.acc": 97.77734, "s1.loss_bbox": 0.03462, "s2.loss_cls": 0.01689, "s2.acc": 97.89453, "s2.loss_bbox": 0.02014, "loss": 0.24705, "time": 0.32717}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4023, "data_time": 0.0041, "loss_rpn_cls": 0.02572, "loss_rpn_bbox": 0.00762, "s0.loss_cls": 0.06863, "s0.acc": 98.18359, "s0.loss_bbox": 0.03101, "s1.loss_cls": 0.03051, "s1.acc": 98.24219, "s1.loss_bbox": 0.03114, "s2.loss_cls": 0.01359, "s2.acc": 98.33008, "s2.loss_bbox": 0.01754, "loss": 0.22574, "time": 0.33195}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4023, "data_time": 0.00402, "loss_rpn_cls": 0.0201, "loss_rpn_bbox": 0.00911, "s0.loss_cls": 0.07721, "s0.acc": 97.95898, "s0.loss_bbox": 0.03838, "s1.loss_cls": 0.03443, "s1.acc": 98.17188, "s1.loss_bbox": 0.03507, "s2.loss_cls": 0.01358, "s2.acc": 98.27734, "s2.loss_bbox": 0.01626, "loss": 0.24413, "time": 0.33243}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4023, "data_time": 0.00415, "loss_rpn_cls": 0.02254, "loss_rpn_bbox": 0.0063, "s0.loss_cls": 0.08138, "s0.acc": 97.94727, "s0.loss_bbox": 0.03395, "s1.loss_cls": 0.03543, "s1.acc": 98.04102, "s1.loss_bbox": 0.03189, "s2.loss_cls": 0.0145, "s2.acc": 98.24805, "s2.loss_bbox": 0.01676, "loss": 0.24275, "time": 0.33154}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4024, "data_time": 0.00396, "loss_rpn_cls": 0.03146, "loss_rpn_bbox": 0.00754, "s0.loss_cls": 0.07453, "s0.acc": 97.96094, "s0.loss_bbox": 0.03293, "s1.loss_cls": 0.03419, "s1.acc": 98.03516, "s1.loss_bbox": 0.03177, "s2.loss_cls": 0.01446, "s2.acc": 98.22266, "s2.loss_bbox": 0.01763, "loss": 0.24451, "time": 0.32993}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4024, "data_time": 0.00404, "loss_rpn_cls": 0.0253, "loss_rpn_bbox": 0.00819, "s0.loss_cls": 0.05472, "s0.acc": 98.45312, "s0.loss_bbox": 0.02733, "s1.loss_cls": 0.02574, "s1.acc": 98.49023, "s1.loss_bbox": 0.03159, "s2.loss_cls": 0.01368, "s2.acc": 98.20898, "s2.loss_bbox": 0.01943, "loss": 0.20599, "time": 0.33302}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4024, "data_time": 0.00392, "loss_rpn_cls": 0.02215, "loss_rpn_bbox": 0.00872, "s0.loss_cls": 0.05904, "s0.acc": 98.29688, "s0.loss_bbox": 0.02843, "s1.loss_cls": 0.0297, "s1.acc": 98.17383, "s1.loss_bbox": 0.03566, "s2.loss_cls": 0.01413, "s2.acc": 98.12305, "s2.loss_bbox": 0.02227, "loss": 0.22009, "time": 0.33323}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4024, "data_time": 0.00417, "loss_rpn_cls": 0.02348, "loss_rpn_bbox": 0.00908, "s0.loss_cls": 0.07586, "s0.acc": 98.01367, "s0.loss_bbox": 0.03567, "s1.loss_cls": 0.0352, "s1.acc": 98.11523, "s1.loss_bbox": 0.0403, "s2.loss_cls": 0.01495, "s2.acc": 98.16602, "s2.loss_bbox": 0.02269, "loss": 0.25724, "time": 0.33333}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4024, "data_time": 0.00407, "loss_rpn_cls": 0.0219, "loss_rpn_bbox": 0.00572, "s0.loss_cls": 0.07021, "s0.acc": 98.17578, "s0.loss_bbox": 0.0303, "s1.loss_cls": 0.0312, "s1.acc": 98.21484, "s1.loss_bbox": 0.03346, "s2.loss_cls": 0.01313, "s2.acc": 98.4082, "s2.loss_bbox": 0.0198, "loss": 0.22574, "time": 0.33472}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4024, "data_time": 0.00407, "loss_rpn_cls": 0.03377, "loss_rpn_bbox": 0.0085, "s0.loss_cls": 0.07551, "s0.acc": 97.90039, "s0.loss_bbox": 0.03242, "s1.loss_cls": 0.03611, "s1.acc": 97.83594, "s1.loss_bbox": 0.03402, "s2.loss_cls": 0.0164, "s2.acc": 98.08203, "s2.loss_bbox": 0.02083, "loss": 0.25754, "time": 0.33236}
