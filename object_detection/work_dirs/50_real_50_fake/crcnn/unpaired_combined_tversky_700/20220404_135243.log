2022-04-04 13:52:43,120 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0
NVCC: 
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.7.1+cu110
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2+cu110
OpenCV: 4.5.5
MMCV: 1.4.8
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.23.0+21b6da3
------------------------------------------------------------

2022-04-04 13:52:43,803 - mmdet - INFO - Distributed training: False
2022-04-04 13:52:44,454 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained',
                      checkpoint='torchvision://resnet101')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'COCODataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/composed/50_real_50_fake/helper/annotation/unpaired_combined_tversky_700.json',
        img_prefix=
        '../dataset/xray/composed/50_real_50_fake/unpaired_combined_tversky_700/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ],
        classes=('FIREARM', 'KNIFE')),
    val=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',
        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('FIREARM', 'KNIFE')),
    test=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',
        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('FIREARM', 'KNIFE')))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
classes = ('FIREARM', 'KNIFE')
work_dir = 'work_dirs/50_real_50_fake/crcnn/unpaired_combined_tversky_700/'
auto_resume = False
gpu_ids = [0]

2022-04-04 13:52:44,454 - mmdet - INFO - Set random seed to 601776733, deterministic: False
2022-04-04 13:52:45,167 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
2022-04-04 13:52:45,750 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2022-04-04 13:52:45,773 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2022-04-04 13:52:45,780 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-04 13:52:45,864 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-04 13:52:45,947 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2022-04-04 13:52:50,986 - mmdet - INFO - load checkpoint from local path: ./checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth
2022-04-04 13:52:51,647 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
2022-04-04 13:52:51,655 - mmdet - INFO - Start running, host: dflc39@gpu5, work_dir: /home2/dflc39/ADAM_DISS/xray_image_synthesis/object_detection/work_dirs/50_real_50_fake/crcnn/unpaired_combined_tversky_700
2022-04-04 13:52:51,655 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-04-04 13:52:51,656 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2022-04-04 13:52:51,656 - mmdet - INFO - Checkpoints will be saved to /home2/dflc39/ADAM_DISS/xray_image_synthesis/object_detection/work_dirs/50_real_50_fake/crcnn/unpaired_combined_tversky_700 by HardDiskBackend.
2022-04-04 13:53:09,887 - mmdet - INFO - Epoch [1][50/2112]	lr: 1.978e-03, eta: 2:33:37, time: 0.364, data_time: 0.047, memory: 4023, loss_rpn_cls: 0.0469, loss_rpn_bbox: 0.0084, s0.loss_cls: 0.2948, s0.acc: 94.0156, s0.loss_bbox: 0.0396, s1.loss_cls: 0.1529, s1.acc: 93.1641, s1.loss_bbox: 0.0262, s2.loss_cls: 0.0642, s2.acc: 95.4316, s2.loss_bbox: 0.0086, loss: 0.6416
2022-04-04 13:53:25,717 - mmdet - INFO - Epoch [1][100/2112]	lr: 3.976e-03, eta: 2:23:15, time: 0.317, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0344, loss_rpn_bbox: 0.0080, s0.loss_cls: 0.1166, s0.acc: 97.0332, s0.loss_bbox: 0.0458, s1.loss_cls: 0.0529, s1.acc: 97.3359, s1.loss_bbox: 0.0338, s2.loss_cls: 0.0224, s2.acc: 97.9473, s2.loss_bbox: 0.0133, loss: 0.3273
2022-04-04 13:53:41,683 - mmdet - INFO - Epoch [1][150/2112]	lr: 5.974e-03, eta: 2:20:00, time: 0.319, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0335, loss_rpn_bbox: 0.0072, s0.loss_cls: 0.1054, s0.acc: 97.4219, s0.loss_bbox: 0.0402, s1.loss_cls: 0.0470, s1.acc: 97.3828, s1.loss_bbox: 0.0313, s2.loss_cls: 0.0201, s2.acc: 97.8770, s2.loss_bbox: 0.0141, loss: 0.2988
2022-04-04 13:53:57,813 - mmdet - INFO - Epoch [1][200/2112]	lr: 7.972e-03, eta: 2:18:35, time: 0.323, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0355, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0902, s0.acc: 97.5957, s0.loss_bbox: 0.0381, s1.loss_cls: 0.0411, s1.acc: 97.7715, s1.loss_bbox: 0.0341, s2.loss_cls: 0.0177, s2.acc: 97.8828, s2.loss_bbox: 0.0153, loss: 0.2797
2022-04-04 13:54:14,073 - mmdet - INFO - Epoch [1][250/2112]	lr: 9.970e-03, eta: 2:17:51, time: 0.325, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0292, loss_rpn_bbox: 0.0093, s0.loss_cls: 0.0708, s0.acc: 97.9805, s0.loss_bbox: 0.0269, s1.loss_cls: 0.0360, s1.acc: 97.8848, s1.loss_bbox: 0.0322, s2.loss_cls: 0.0173, s2.acc: 97.7773, s2.loss_bbox: 0.0173, loss: 0.2389
2022-04-04 13:54:30,164 - mmdet - INFO - Epoch [1][300/2112]	lr: 1.197e-02, eta: 2:17:02, time: 0.322, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0243, loss_rpn_bbox: 0.0065, s0.loss_cls: 0.0759, s0.acc: 97.9355, s0.loss_bbox: 0.0340, s1.loss_cls: 0.0334, s1.acc: 97.9219, s1.loss_bbox: 0.0343, s2.loss_cls: 0.0155, s2.acc: 98.0586, s2.loss_bbox: 0.0173, loss: 0.2410
2022-04-04 13:54:46,524 - mmdet - INFO - Epoch [1][350/2112]	lr: 1.397e-02, eta: 2:16:42, time: 0.327, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0194, loss_rpn_bbox: 0.0085, s0.loss_cls: 0.0824, s0.acc: 97.8418, s0.loss_bbox: 0.0363, s1.loss_cls: 0.0377, s1.acc: 97.8770, s1.loss_bbox: 0.0372, s2.loss_cls: 0.0184, s2.acc: 97.6367, s2.loss_bbox: 0.0216, loss: 0.2613
2022-04-04 13:55:02,789 - mmdet - INFO - Epoch [1][400/2112]	lr: 1.596e-02, eta: 2:16:16, time: 0.325, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0289, loss_rpn_bbox: 0.0093, s0.loss_cls: 0.0769, s0.acc: 98.0762, s0.loss_bbox: 0.0311, s1.loss_cls: 0.0324, s1.acc: 98.2148, s1.loss_bbox: 0.0281, s2.loss_cls: 0.0139, s2.acc: 98.3086, s2.loss_bbox: 0.0148, loss: 0.2355
2022-04-04 13:55:19,194 - mmdet - INFO - Epoch [1][450/2112]	lr: 1.796e-02, eta: 2:16:01, time: 0.328, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0379, loss_rpn_bbox: 0.0099, s0.loss_cls: 0.0809, s0.acc: 97.9531, s0.loss_bbox: 0.0294, s1.loss_cls: 0.0353, s1.acc: 98.0410, s1.loss_bbox: 0.0323, s2.loss_cls: 0.0146, s2.acc: 98.2207, s2.loss_bbox: 0.0161, loss: 0.2565
2022-04-04 13:55:35,402 - mmdet - INFO - Epoch [1][500/2112]	lr: 1.996e-02, eta: 2:15:35, time: 0.324, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0347, loss_rpn_bbox: 0.0138, s0.loss_cls: 0.0807, s0.acc: 97.8652, s0.loss_bbox: 0.0285, s1.loss_cls: 0.0376, s1.acc: 97.6875, s1.loss_bbox: 0.0264, s2.loss_cls: 0.0169, s2.acc: 97.6680, s2.loss_bbox: 0.0142, loss: 0.2529
2022-04-04 13:55:51,775 - mmdet - INFO - Epoch [1][550/2112]	lr: 2.000e-02, eta: 2:15:19, time: 0.327, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0285, loss_rpn_bbox: 0.0077, s0.loss_cls: 0.0680, s0.acc: 98.1035, s0.loss_bbox: 0.0273, s1.loss_cls: 0.0343, s1.acc: 97.9277, s1.loss_bbox: 0.0296, s2.loss_cls: 0.0158, s2.acc: 97.9395, s2.loss_bbox: 0.0151, loss: 0.2264
2022-04-04 13:56:08,281 - mmdet - INFO - Epoch [1][600/2112]	lr: 2.000e-02, eta: 2:15:08, time: 0.330, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0247, loss_rpn_bbox: 0.0101, s0.loss_cls: 0.0732, s0.acc: 97.9922, s0.loss_bbox: 0.0340, s1.loss_cls: 0.0336, s1.acc: 97.9844, s1.loss_bbox: 0.0362, s2.loss_cls: 0.0159, s2.acc: 97.9277, s2.loss_bbox: 0.0228, loss: 0.2505
2022-04-04 13:56:24,758 - mmdet - INFO - Epoch [1][650/2112]	lr: 2.000e-02, eta: 2:14:55, time: 0.330, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0195, loss_rpn_bbox: 0.0082, s0.loss_cls: 0.0796, s0.acc: 97.7715, s0.loss_bbox: 0.0325, s1.loss_cls: 0.0370, s1.acc: 97.7129, s1.loss_bbox: 0.0363, s2.loss_cls: 0.0166, s2.acc: 97.8496, s2.loss_bbox: 0.0204, loss: 0.2502
2022-04-04 13:56:41,117 - mmdet - INFO - Epoch [1][700/2112]	lr: 2.000e-02, eta: 2:14:37, time: 0.327, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0211, loss_rpn_bbox: 0.0060, s0.loss_cls: 0.0780, s0.acc: 97.7812, s0.loss_bbox: 0.0325, s1.loss_cls: 0.0378, s1.acc: 97.7773, s1.loss_bbox: 0.0346, s2.loss_cls: 0.0169, s2.acc: 97.8945, s2.loss_bbox: 0.0201, loss: 0.2470
2022-04-04 13:56:57,714 - mmdet - INFO - Epoch [1][750/2112]	lr: 2.000e-02, eta: 2:14:28, time: 0.332, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0257, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0686, s0.acc: 98.1836, s0.loss_bbox: 0.0310, s1.loss_cls: 0.0305, s1.acc: 98.2422, s1.loss_bbox: 0.0311, s2.loss_cls: 0.0136, s2.acc: 98.3301, s2.loss_bbox: 0.0175, loss: 0.2257
2022-04-04 13:57:14,336 - mmdet - INFO - Epoch [1][800/2112]	lr: 2.000e-02, eta: 2:14:18, time: 0.332, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0091, s0.loss_cls: 0.0772, s0.acc: 97.9590, s0.loss_bbox: 0.0384, s1.loss_cls: 0.0344, s1.acc: 98.1719, s1.loss_bbox: 0.0351, s2.loss_cls: 0.0136, s2.acc: 98.2773, s2.loss_bbox: 0.0163, loss: 0.2441
2022-04-04 13:57:30,914 - mmdet - INFO - Epoch [1][850/2112]	lr: 2.000e-02, eta: 2:14:06, time: 0.332, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0225, loss_rpn_bbox: 0.0063, s0.loss_cls: 0.0814, s0.acc: 97.9473, s0.loss_bbox: 0.0340, s1.loss_cls: 0.0354, s1.acc: 98.0410, s1.loss_bbox: 0.0319, s2.loss_cls: 0.0145, s2.acc: 98.2480, s2.loss_bbox: 0.0168, loss: 0.2427
2022-04-04 13:57:47,410 - mmdet - INFO - Epoch [1][900/2112]	lr: 2.000e-02, eta: 2:13:52, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0315, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0745, s0.acc: 97.9609, s0.loss_bbox: 0.0329, s1.loss_cls: 0.0342, s1.acc: 98.0352, s1.loss_bbox: 0.0318, s2.loss_cls: 0.0145, s2.acc: 98.2227, s2.loss_bbox: 0.0176, loss: 0.2445
2022-04-04 13:58:04,062 - mmdet - INFO - Epoch [1][950/2112]	lr: 2.000e-02, eta: 2:13:41, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0253, loss_rpn_bbox: 0.0082, s0.loss_cls: 0.0547, s0.acc: 98.4531, s0.loss_bbox: 0.0273, s1.loss_cls: 0.0257, s1.acc: 98.4902, s1.loss_bbox: 0.0316, s2.loss_cls: 0.0137, s2.acc: 98.2090, s2.loss_bbox: 0.0194, loss: 0.2060
2022-04-04 13:58:20,724 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 13:58:20,724 - mmdet - INFO - Epoch [1][1000/2112]	lr: 2.000e-02, eta: 2:13:30, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0221, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0590, s0.acc: 98.2969, s0.loss_bbox: 0.0284, s1.loss_cls: 0.0297, s1.acc: 98.1738, s1.loss_bbox: 0.0357, s2.loss_cls: 0.0141, s2.acc: 98.1230, s2.loss_bbox: 0.0223, loss: 0.2201
2022-04-04 13:58:37,391 - mmdet - INFO - Epoch [1][1050/2112]	lr: 2.000e-02, eta: 2:13:18, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0235, loss_rpn_bbox: 0.0091, s0.loss_cls: 0.0759, s0.acc: 98.0137, s0.loss_bbox: 0.0357, s1.loss_cls: 0.0352, s1.acc: 98.1152, s1.loss_bbox: 0.0403, s2.loss_cls: 0.0150, s2.acc: 98.1660, s2.loss_bbox: 0.0227, loss: 0.2572
2022-04-04 13:58:54,123 - mmdet - INFO - Epoch [1][1100/2112]	lr: 2.000e-02, eta: 2:13:08, time: 0.335, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0219, loss_rpn_bbox: 0.0057, s0.loss_cls: 0.0702, s0.acc: 98.1758, s0.loss_bbox: 0.0303, s1.loss_cls: 0.0312, s1.acc: 98.2148, s1.loss_bbox: 0.0335, s2.loss_cls: 0.0131, s2.acc: 98.4082, s2.loss_bbox: 0.0198, loss: 0.2257
2022-04-04 13:59:10,746 - mmdet - INFO - Epoch [1][1150/2112]	lr: 2.000e-02, eta: 2:12:54, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0338, loss_rpn_bbox: 0.0085, s0.loss_cls: 0.0755, s0.acc: 97.9004, s0.loss_bbox: 0.0324, s1.loss_cls: 0.0361, s1.acc: 97.8359, s1.loss_bbox: 0.0340, s2.loss_cls: 0.0164, s2.acc: 98.0820, s2.loss_bbox: 0.0208, loss: 0.2575
2022-04-04 13:59:27,446 - mmdet - INFO - Epoch [1][1200/2112]	lr: 2.000e-02, eta: 2:12:42, time: 0.334, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0182, loss_rpn_bbox: 0.0083, s0.loss_cls: 0.0648, s0.acc: 98.2305, s0.loss_bbox: 0.0260, s1.loss_cls: 0.0302, s1.acc: 98.1895, s1.loss_bbox: 0.0305, s2.loss_cls: 0.0136, s2.acc: 98.3320, s2.loss_bbox: 0.0191, loss: 0.2107
2022-04-04 13:59:44,154 - mmdet - INFO - Epoch [1][1250/2112]	lr: 2.000e-02, eta: 2:12:30, time: 0.334, data_time: 0.006, memory: 4024, loss_rpn_cls: 0.0205, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0703, s0.acc: 97.9727, s0.loss_bbox: 0.0311, s1.loss_cls: 0.0357, s1.acc: 97.8633, s1.loss_bbox: 0.0367, s2.loss_cls: 0.0171, s2.acc: 97.6309, s2.loss_bbox: 0.0237, loss: 0.2419
2022-04-04 14:00:00,727 - mmdet - INFO - Epoch [1][1300/2112]	lr: 2.000e-02, eta: 2:12:15, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0269, loss_rpn_bbox: 0.0080, s0.loss_cls: 0.0592, s0.acc: 98.3262, s0.loss_bbox: 0.0268, s1.loss_cls: 0.0272, s1.acc: 98.4844, s1.loss_bbox: 0.0300, s2.loss_cls: 0.0132, s2.acc: 98.4434, s2.loss_bbox: 0.0201, loss: 0.2115
2022-04-04 14:00:17,582 - mmdet - INFO - Epoch [1][1350/2112]	lr: 2.000e-02, eta: 2:12:05, time: 0.337, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0066, s0.loss_cls: 0.0583, s0.acc: 98.3086, s0.loss_bbox: 0.0273, s1.loss_cls: 0.0267, s1.acc: 98.3301, s1.loss_bbox: 0.0360, s2.loss_cls: 0.0127, s2.acc: 98.3633, s2.loss_bbox: 0.0250, loss: 0.2126
2022-04-04 14:00:34,115 - mmdet - INFO - Epoch [1][1400/2112]	lr: 2.000e-02, eta: 2:11:49, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0213, loss_rpn_bbox: 0.0065, s0.loss_cls: 0.0689, s0.acc: 98.1719, s0.loss_bbox: 0.0310, s1.loss_cls: 0.0311, s1.acc: 98.2070, s1.loss_bbox: 0.0391, s2.loss_cls: 0.0147, s2.acc: 98.1230, s2.loss_bbox: 0.0265, loss: 0.2392
2022-04-04 14:00:50,843 - mmdet - INFO - Epoch [1][1450/2112]	lr: 2.000e-02, eta: 2:11:35, time: 0.335, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0252, loss_rpn_bbox: 0.0077, s0.loss_cls: 0.0701, s0.acc: 98.0605, s0.loss_bbox: 0.0292, s1.loss_cls: 0.0325, s1.acc: 98.0840, s1.loss_bbox: 0.0343, s2.loss_cls: 0.0153, s2.acc: 98.0234, s2.loss_bbox: 0.0212, loss: 0.2355
2022-04-04 14:01:07,555 - mmdet - INFO - Epoch [1][1500/2112]	lr: 2.000e-02, eta: 2:11:22, time: 0.334, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0279, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0574, s0.acc: 98.4180, s0.loss_bbox: 0.0246, s1.loss_cls: 0.0288, s1.acc: 98.2930, s1.loss_bbox: 0.0301, s2.loss_cls: 0.0138, s2.acc: 98.1895, s2.loss_bbox: 0.0202, loss: 0.2104
2022-04-04 14:01:24,355 - mmdet - INFO - Epoch [1][1550/2112]	lr: 2.000e-02, eta: 2:11:10, time: 0.336, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0258, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0612, s0.acc: 98.3320, s0.loss_bbox: 0.0265, s1.loss_cls: 0.0280, s1.acc: 98.3965, s1.loss_bbox: 0.0287, s2.loss_cls: 0.0124, s2.acc: 98.6328, s2.loss_bbox: 0.0183, loss: 0.2084
2022-04-04 14:01:40,630 - mmdet - INFO - Epoch [1][1600/2112]	lr: 2.000e-02, eta: 2:10:49, time: 0.326, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0406, loss_rpn_bbox: 0.0121, s0.loss_cls: 0.0553, s0.acc: 98.4688, s0.loss_bbox: 0.0257, s1.loss_cls: 0.0244, s1.acc: 98.5859, s1.loss_bbox: 0.0294, s2.loss_cls: 0.0106, s2.acc: 98.6992, s2.loss_bbox: 0.0189, loss: 0.2171
2022-04-04 14:01:57,099 - mmdet - INFO - Epoch [1][1650/2112]	lr: 2.000e-02, eta: 2:10:32, time: 0.329, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0186, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0561, s0.acc: 98.3926, s0.loss_bbox: 0.0256, s1.loss_cls: 0.0272, s1.acc: 98.3516, s1.loss_bbox: 0.0296, s2.loss_cls: 0.0128, s2.acc: 98.2812, s2.loss_bbox: 0.0183, loss: 0.1958
2022-04-04 14:02:13,698 - mmdet - INFO - Epoch [1][1700/2112]	lr: 2.000e-02, eta: 2:10:16, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0214, loss_rpn_bbox: 0.0084, s0.loss_cls: 0.0548, s0.acc: 98.4570, s0.loss_bbox: 0.0281, s1.loss_cls: 0.0244, s1.acc: 98.5430, s1.loss_bbox: 0.0305, s2.loss_cls: 0.0114, s2.acc: 98.5508, s2.loss_bbox: 0.0183, loss: 0.1973
2022-04-04 14:02:30,261 - mmdet - INFO - Epoch [1][1750/2112]	lr: 2.000e-02, eta: 2:10:00, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0237, loss_rpn_bbox: 0.0074, s0.loss_cls: 0.0621, s0.acc: 98.2812, s0.loss_bbox: 0.0287, s1.loss_cls: 0.0294, s1.acc: 98.4258, s1.loss_bbox: 0.0303, s2.loss_cls: 0.0123, s2.acc: 98.6582, s2.loss_bbox: 0.0180, loss: 0.2120
2022-04-04 14:02:46,833 - mmdet - INFO - Epoch [1][1800/2112]	lr: 2.000e-02, eta: 2:09:44, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0217, loss_rpn_bbox: 0.0096, s0.loss_cls: 0.0683, s0.acc: 98.0938, s0.loss_bbox: 0.0320, s1.loss_cls: 0.0320, s1.acc: 98.0645, s1.loss_bbox: 0.0341, s2.loss_cls: 0.0150, s2.acc: 98.1855, s2.loss_bbox: 0.0199, loss: 0.2326
2022-04-04 14:03:03,546 - mmdet - INFO - Epoch [1][1850/2112]	lr: 2.000e-02, eta: 2:09:30, time: 0.334, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0311, loss_rpn_bbox: 0.0085, s0.loss_cls: 0.0621, s0.acc: 98.3555, s0.loss_bbox: 0.0306, s1.loss_cls: 0.0275, s1.acc: 98.3379, s1.loss_bbox: 0.0353, s2.loss_cls: 0.0113, s2.acc: 98.5176, s2.loss_bbox: 0.0208, loss: 0.2273
2022-04-04 14:03:20,320 - mmdet - INFO - Epoch [1][1900/2112]	lr: 2.000e-02, eta: 2:09:16, time: 0.335, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0266, loss_rpn_bbox: 0.0119, s0.loss_cls: 0.0630, s0.acc: 98.3418, s0.loss_bbox: 0.0310, s1.loss_cls: 0.0269, s1.acc: 98.5098, s1.loss_bbox: 0.0337, s2.loss_cls: 0.0118, s2.acc: 98.5508, s2.loss_bbox: 0.0193, loss: 0.2241
2022-04-04 14:03:36,958 - mmdet - INFO - Epoch [1][1950/2112]	lr: 2.000e-02, eta: 2:09:01, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0227, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0474, s0.acc: 98.6973, s0.loss_bbox: 0.0226, s1.loss_cls: 0.0217, s1.acc: 98.7051, s1.loss_bbox: 0.0283, s2.loss_cls: 0.0098, s2.acc: 98.6875, s2.loss_bbox: 0.0193, loss: 0.1793
2022-04-04 14:03:53,779 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 14:03:53,779 - mmdet - INFO - Epoch [1][2000/2112]	lr: 2.000e-02, eta: 2:08:48, time: 0.336, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0250, loss_rpn_bbox: 0.0103, s0.loss_cls: 0.0554, s0.acc: 98.4102, s0.loss_bbox: 0.0236, s1.loss_cls: 0.0272, s1.acc: 98.3730, s1.loss_bbox: 0.0285, s2.loss_cls: 0.0130, s2.acc: 98.3535, s2.loss_bbox: 0.0182, loss: 0.2013
2022-04-04 14:04:10,400 - mmdet - INFO - Epoch [1][2050/2112]	lr: 2.000e-02, eta: 2:08:32, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0184, loss_rpn_bbox: 0.0066, s0.loss_cls: 0.0648, s0.acc: 98.2422, s0.loss_bbox: 0.0300, s1.loss_cls: 0.0279, s1.acc: 98.3594, s1.loss_bbox: 0.0330, s2.loss_cls: 0.0124, s2.acc: 98.3926, s2.loss_bbox: 0.0209, loss: 0.2140
2022-04-04 14:04:27,115 - mmdet - INFO - Epoch [1][2100/2112]	lr: 2.000e-02, eta: 2:08:17, time: 0.334, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0198, loss_rpn_bbox: 0.0112, s0.loss_cls: 0.0642, s0.acc: 98.2656, s0.loss_bbox: 0.0278, s1.loss_cls: 0.0316, s1.acc: 98.0879, s1.loss_bbox: 0.0288, s2.loss_cls: 0.0147, s2.acc: 98.0469, s2.loss_bbox: 0.0180, loss: 0.2162
2022-04-04 14:04:31,180 - mmdet - INFO - Saving checkpoint at 1 epochs
2022-04-04 14:06:50,905 - mmdet - INFO - Evaluating bbox...
2022-04-04 14:06:51,938 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.365
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.581
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.429
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.368
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.475
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.475
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.475
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.475
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000

2022-04-04 14:06:51,959 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 14:06:51,959 - mmdet - INFO - Epoch(val) [1][1918]	bbox_mAP: 0.3650, bbox_mAP_50: 0.5810, bbox_mAP_75: 0.4290, bbox_mAP_s: 0.3680, bbox_mAP_m: -1.0000, bbox_mAP_l: -1.0000, bbox_mAP_copypaste: 0.365 0.581 0.429 0.368 -1.000 -1.000
2022-04-04 14:07:10,801 - mmdet - INFO - Epoch [2][50/2112]	lr: 2.000e-02, eta: 2:07:38, time: 0.377, data_time: 0.046, memory: 4024, loss_rpn_cls: 0.0198, loss_rpn_bbox: 0.0059, s0.loss_cls: 0.0541, s0.acc: 98.4844, s0.loss_bbox: 0.0240, s1.loss_cls: 0.0261, s1.acc: 98.4805, s1.loss_bbox: 0.0301, s2.loss_cls: 0.0117, s2.acc: 98.5879, s2.loss_bbox: 0.0212, loss: 0.1927
2022-04-04 14:07:27,603 - mmdet - INFO - Epoch [2][100/2112]	lr: 2.000e-02, eta: 2:07:25, time: 0.336, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0200, loss_rpn_bbox: 0.0082, s0.loss_cls: 0.0530, s0.acc: 98.5430, s0.loss_bbox: 0.0227, s1.loss_cls: 0.0255, s1.acc: 98.4922, s1.loss_bbox: 0.0324, s2.loss_cls: 0.0111, s2.acc: 98.5918, s2.loss_bbox: 0.0230, loss: 0.1960
2022-04-04 14:07:44,321 - mmdet - INFO - Epoch [2][150/2112]	lr: 2.000e-02, eta: 2:07:10, time: 0.334, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0224, loss_rpn_bbox: 0.0102, s0.loss_cls: 0.0656, s0.acc: 98.3359, s0.loss_bbox: 0.0280, s1.loss_cls: 0.0290, s1.acc: 98.2988, s1.loss_bbox: 0.0307, s2.loss_cls: 0.0126, s2.acc: 98.3535, s2.loss_bbox: 0.0191, loss: 0.2175
2022-04-04 14:08:01,097 - mmdet - INFO - Epoch [2][200/2112]	lr: 2.000e-02, eta: 2:06:56, time: 0.336, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0556, s0.acc: 98.3770, s0.loss_bbox: 0.0253, s1.loss_cls: 0.0267, s1.acc: 98.3145, s1.loss_bbox: 0.0353, s2.loss_cls: 0.0125, s2.acc: 98.3398, s2.loss_bbox: 0.0259, loss: 0.2086
2022-04-04 14:08:17,838 - mmdet - INFO - Epoch [2][250/2112]	lr: 2.000e-02, eta: 2:06:41, time: 0.335, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0144, loss_rpn_bbox: 0.0057, s0.loss_cls: 0.0539, s0.acc: 98.4707, s0.loss_bbox: 0.0255, s1.loss_cls: 0.0248, s1.acc: 98.4824, s1.loss_bbox: 0.0322, s2.loss_cls: 0.0111, s2.acc: 98.5234, s2.loss_bbox: 0.0215, loss: 0.1893
2022-04-04 14:08:34,358 - mmdet - INFO - Epoch [2][300/2112]	lr: 2.000e-02, eta: 2:06:25, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0259, loss_rpn_bbox: 0.0080, s0.loss_cls: 0.0625, s0.acc: 98.3398, s0.loss_bbox: 0.0276, s1.loss_cls: 0.0259, s1.acc: 98.5801, s1.loss_bbox: 0.0299, s2.loss_cls: 0.0117, s2.acc: 98.5801, s2.loss_bbox: 0.0201, loss: 0.2115
2022-04-04 14:08:50,914 - mmdet - INFO - Epoch [2][350/2112]	lr: 2.000e-02, eta: 2:06:08, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0172, loss_rpn_bbox: 0.0081, s0.loss_cls: 0.0628, s0.acc: 98.1777, s0.loss_bbox: 0.0289, s1.loss_cls: 0.0307, s1.acc: 98.1250, s1.loss_bbox: 0.0354, s2.loss_cls: 0.0151, s2.acc: 98.0449, s2.loss_bbox: 0.0236, loss: 0.2217
2022-04-04 14:09:07,629 - mmdet - INFO - Epoch [2][400/2112]	lr: 2.000e-02, eta: 2:05:53, time: 0.334, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0226, loss_rpn_bbox: 0.0085, s0.loss_cls: 0.0619, s0.acc: 98.2930, s0.loss_bbox: 0.0304, s1.loss_cls: 0.0274, s1.acc: 98.3750, s1.loss_bbox: 0.0364, s2.loss_cls: 0.0123, s2.acc: 98.5137, s2.loss_bbox: 0.0218, loss: 0.2214
2022-04-04 14:09:24,268 - mmdet - INFO - Epoch [2][450/2112]	lr: 2.000e-02, eta: 2:05:38, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0182, loss_rpn_bbox: 0.0065, s0.loss_cls: 0.0619, s0.acc: 98.2109, s0.loss_bbox: 0.0320, s1.loss_cls: 0.0258, s1.acc: 98.5449, s1.loss_bbox: 0.0311, s2.loss_cls: 0.0104, s2.acc: 98.9102, s2.loss_bbox: 0.0211, loss: 0.2069
2022-04-04 14:09:40,886 - mmdet - INFO - Epoch [2][500/2112]	lr: 2.000e-02, eta: 2:05:22, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0197, loss_rpn_bbox: 0.0090, s0.loss_cls: 0.0634, s0.acc: 98.2227, s0.loss_bbox: 0.0269, s1.loss_cls: 0.0294, s1.acc: 98.1855, s1.loss_bbox: 0.0320, s2.loss_cls: 0.0139, s2.acc: 98.0273, s2.loss_bbox: 0.0223, loss: 0.2167
2022-04-04 14:09:57,366 - mmdet - INFO - Epoch [2][550/2112]	lr: 2.000e-02, eta: 2:05:05, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0225, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0548, s0.acc: 98.5000, s0.loss_bbox: 0.0234, s1.loss_cls: 0.0261, s1.acc: 98.4824, s1.loss_bbox: 0.0303, s2.loss_cls: 0.0119, s2.acc: 98.5801, s2.loss_bbox: 0.0215, loss: 0.1981
2022-04-04 14:10:13,945 - mmdet - INFO - Epoch [2][600/2112]	lr: 2.000e-02, eta: 2:04:48, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0186, loss_rpn_bbox: 0.0066, s0.loss_cls: 0.0573, s0.acc: 98.3926, s0.loss_bbox: 0.0262, s1.loss_cls: 0.0278, s1.acc: 98.3027, s1.loss_bbox: 0.0315, s2.loss_cls: 0.0126, s2.acc: 98.4219, s2.loss_bbox: 0.0207, loss: 0.2013
2022-04-04 14:10:30,646 - mmdet - INFO - Epoch [2][650/2112]	lr: 2.000e-02, eta: 2:04:33, time: 0.334, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0174, loss_rpn_bbox: 0.0064, s0.loss_cls: 0.0535, s0.acc: 98.4434, s0.loss_bbox: 0.0246, s1.loss_cls: 0.0252, s1.acc: 98.5703, s1.loss_bbox: 0.0300, s2.loss_cls: 0.0113, s2.acc: 98.6758, s2.loss_bbox: 0.0217, loss: 0.1902
2022-04-04 14:10:47,270 - mmdet - INFO - Epoch [2][700/2112]	lr: 2.000e-02, eta: 2:04:17, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0225, loss_rpn_bbox: 0.0072, s0.loss_cls: 0.0480, s0.acc: 98.6172, s0.loss_bbox: 0.0256, s1.loss_cls: 0.0224, s1.acc: 98.5566, s1.loss_bbox: 0.0313, s2.loss_cls: 0.0104, s2.acc: 98.5664, s2.loss_bbox: 0.0221, loss: 0.1896
2022-04-04 14:11:03,783 - mmdet - INFO - Epoch [2][750/2112]	lr: 2.000e-02, eta: 2:04:00, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0215, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0613, s0.acc: 98.2598, s0.loss_bbox: 0.0290, s1.loss_cls: 0.0283, s1.acc: 98.2148, s1.loss_bbox: 0.0334, s2.loss_cls: 0.0126, s2.acc: 98.3281, s2.loss_bbox: 0.0213, loss: 0.2145
2022-04-04 14:11:20,372 - mmdet - INFO - Epoch [2][800/2112]	lr: 2.000e-02, eta: 2:03:44, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0152, loss_rpn_bbox: 0.0052, s0.loss_cls: 0.0561, s0.acc: 98.4180, s0.loss_bbox: 0.0262, s1.loss_cls: 0.0279, s1.acc: 98.2754, s1.loss_bbox: 0.0348, s2.loss_cls: 0.0138, s2.acc: 98.2051, s2.loss_bbox: 0.0246, loss: 0.2038
2022-04-04 14:11:36,986 - mmdet - INFO - Epoch [2][850/2112]	lr: 2.000e-02, eta: 2:03:28, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0196, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0602, s0.acc: 98.4023, s0.loss_bbox: 0.0293, s1.loss_cls: 0.0262, s1.acc: 98.4844, s1.loss_bbox: 0.0319, s2.loss_cls: 0.0106, s2.acc: 98.6172, s2.loss_bbox: 0.0198, loss: 0.2051
2022-04-04 14:11:53,499 - mmdet - INFO - Epoch [2][900/2112]	lr: 2.000e-02, eta: 2:03:11, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0162, loss_rpn_bbox: 0.0060, s0.loss_cls: 0.0521, s0.acc: 98.4180, s0.loss_bbox: 0.0243, s1.loss_cls: 0.0261, s1.acc: 98.3848, s1.loss_bbox: 0.0328, s2.loss_cls: 0.0128, s2.acc: 98.2852, s2.loss_bbox: 0.0246, loss: 0.1950
2022-04-04 14:12:09,945 - mmdet - INFO - Epoch [2][950/2112]	lr: 2.000e-02, eta: 2:02:54, time: 0.329, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0206, loss_rpn_bbox: 0.0065, s0.loss_cls: 0.0622, s0.acc: 98.2480, s0.loss_bbox: 0.0257, s1.loss_cls: 0.0305, s1.acc: 98.2949, s1.loss_bbox: 0.0326, s2.loss_cls: 0.0139, s2.acc: 98.2070, s2.loss_bbox: 0.0223, loss: 0.2142
2022-04-04 14:12:26,442 - mmdet - INFO - Epoch [2][1000/2112]	lr: 2.000e-02, eta: 2:02:37, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0274, loss_rpn_bbox: 0.0098, s0.loss_cls: 0.0615, s0.acc: 98.3809, s0.loss_bbox: 0.0275, s1.loss_cls: 0.0257, s1.acc: 98.5879, s1.loss_bbox: 0.0305, s2.loss_cls: 0.0115, s2.acc: 98.6172, s2.loss_bbox: 0.0227, loss: 0.2165
2022-04-04 14:12:42,913 - mmdet - INFO - Epoch [2][1050/2112]	lr: 2.000e-02, eta: 2:02:20, time: 0.329, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0177, loss_rpn_bbox: 0.0055, s0.loss_cls: 0.0579, s0.acc: 98.2520, s0.loss_bbox: 0.0256, s1.loss_cls: 0.0296, s1.acc: 98.1035, s1.loss_bbox: 0.0359, s2.loss_cls: 0.0134, s2.acc: 98.1602, s2.loss_bbox: 0.0248, loss: 0.2104
2022-04-04 14:12:59,293 - mmdet - INFO - Epoch [2][1100/2112]	lr: 2.000e-02, eta: 2:02:02, time: 0.328, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0211, loss_rpn_bbox: 0.0083, s0.loss_cls: 0.0491, s0.acc: 98.6738, s0.loss_bbox: 0.0237, s1.loss_cls: 0.0227, s1.acc: 98.6328, s1.loss_bbox: 0.0313, s2.loss_cls: 0.0108, s2.acc: 98.4902, s2.loss_bbox: 0.0199, loss: 0.1869
2022-04-04 14:13:15,927 - mmdet - INFO - Epoch [2][1150/2112]	lr: 2.000e-02, eta: 2:01:46, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0204, loss_rpn_bbox: 0.0082, s0.loss_cls: 0.0578, s0.acc: 98.3340, s0.loss_bbox: 0.0261, s1.loss_cls: 0.0269, s1.acc: 98.3477, s1.loss_bbox: 0.0329, s2.loss_cls: 0.0117, s2.acc: 98.4746, s2.loss_bbox: 0.0208, loss: 0.2048
2022-04-04 14:13:32,448 - mmdet - INFO - Epoch [2][1200/2112]	lr: 2.000e-02, eta: 2:01:30, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0173, loss_rpn_bbox: 0.0051, s0.loss_cls: 0.0618, s0.acc: 98.2207, s0.loss_bbox: 0.0291, s1.loss_cls: 0.0292, s1.acc: 98.1660, s1.loss_bbox: 0.0365, s2.loss_cls: 0.0138, s2.acc: 98.1289, s2.loss_bbox: 0.0241, loss: 0.2168
2022-04-04 14:13:49,087 - mmdet - INFO - Epoch [2][1250/2112]	lr: 2.000e-02, eta: 2:01:14, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0227, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0574, s0.acc: 98.2812, s0.loss_bbox: 0.0275, s1.loss_cls: 0.0272, s1.acc: 98.1836, s1.loss_bbox: 0.0331, s2.loss_cls: 0.0132, s2.acc: 98.1191, s2.loss_bbox: 0.0220, loss: 0.2106
2022-04-04 14:14:05,759 - mmdet - INFO - Epoch [2][1300/2112]	lr: 2.000e-02, eta: 2:00:58, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0185, loss_rpn_bbox: 0.0063, s0.loss_cls: 0.0595, s0.acc: 98.1934, s0.loss_bbox: 0.0279, s1.loss_cls: 0.0266, s1.acc: 98.2793, s1.loss_bbox: 0.0339, s2.loss_cls: 0.0128, s2.acc: 98.3379, s2.loss_bbox: 0.0242, loss: 0.2097
2022-04-04 14:14:22,305 - mmdet - INFO - Epoch [2][1350/2112]	lr: 2.000e-02, eta: 2:00:41, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0174, loss_rpn_bbox: 0.0055, s0.loss_cls: 0.0531, s0.acc: 98.3496, s0.loss_bbox: 0.0246, s1.loss_cls: 0.0273, s1.acc: 98.2480, s1.loss_bbox: 0.0328, s2.loss_cls: 0.0125, s2.acc: 98.6016, s2.loss_bbox: 0.0207, loss: 0.1939
2022-04-04 14:14:38,819 - mmdet - INFO - Epoch [2][1400/2112]	lr: 2.000e-02, eta: 2:00:25, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0246, loss_rpn_bbox: 0.0107, s0.loss_cls: 0.0582, s0.acc: 98.2988, s0.loss_bbox: 0.0260, s1.loss_cls: 0.0294, s1.acc: 98.1191, s1.loss_bbox: 0.0343, s2.loss_cls: 0.0127, s2.acc: 98.3926, s2.loss_bbox: 0.0239, loss: 0.2198
2022-04-04 14:14:55,394 - mmdet - INFO - Epoch [2][1450/2112]	lr: 2.000e-02, eta: 2:00:08, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0202, loss_rpn_bbox: 0.0059, s0.loss_cls: 0.0631, s0.acc: 98.2188, s0.loss_bbox: 0.0298, s1.loss_cls: 0.0303, s1.acc: 98.1621, s1.loss_bbox: 0.0319, s2.loss_cls: 0.0134, s2.acc: 98.3027, s2.loss_bbox: 0.0193, loss: 0.2138
2022-04-04 14:15:11,965 - mmdet - INFO - Epoch [2][1500/2112]	lr: 2.000e-02, eta: 1:59:52, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0216, loss_rpn_bbox: 0.0074, s0.loss_cls: 0.0506, s0.acc: 98.6035, s0.loss_bbox: 0.0257, s1.loss_cls: 0.0224, s1.acc: 98.6797, s1.loss_bbox: 0.0307, s2.loss_cls: 0.0100, s2.acc: 98.7012, s2.loss_bbox: 0.0214, loss: 0.1897
2022-04-04 14:15:28,465 - mmdet - INFO - Epoch [2][1550/2112]	lr: 2.000e-02, eta: 1:59:35, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0204, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.0505, s0.acc: 98.5625, s0.loss_bbox: 0.0221, s1.loss_cls: 0.0254, s1.acc: 98.5703, s1.loss_bbox: 0.0282, s2.loss_cls: 0.0121, s2.acc: 98.6133, s2.loss_bbox: 0.0204, loss: 0.1877
2022-04-04 14:15:45,157 - mmdet - INFO - Epoch [2][1600/2112]	lr: 2.000e-02, eta: 1:59:19, time: 0.334, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0185, loss_rpn_bbox: 0.0070, s0.loss_cls: 0.0540, s0.acc: 98.4102, s0.loss_bbox: 0.0250, s1.loss_cls: 0.0250, s1.acc: 98.5547, s1.loss_bbox: 0.0316, s2.loss_cls: 0.0118, s2.acc: 98.5898, s2.loss_bbox: 0.0212, loss: 0.1943
2022-04-04 14:16:01,741 - mmdet - INFO - Epoch [2][1650/2112]	lr: 2.000e-02, eta: 1:59:03, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0156, loss_rpn_bbox: 0.0051, s0.loss_cls: 0.0586, s0.acc: 98.3613, s0.loss_bbox: 0.0273, s1.loss_cls: 0.0286, s1.acc: 98.2871, s1.loss_bbox: 0.0317, s2.loss_cls: 0.0129, s2.acc: 98.3008, s2.loss_bbox: 0.0200, loss: 0.2000
2022-04-04 14:16:18,398 - mmdet - INFO - Epoch [2][1700/2112]	lr: 2.000e-02, eta: 1:58:47, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0161, loss_rpn_bbox: 0.0067, s0.loss_cls: 0.0511, s0.acc: 98.5996, s0.loss_bbox: 0.0255, s1.loss_cls: 0.0236, s1.acc: 98.6211, s1.loss_bbox: 0.0313, s2.loss_cls: 0.0105, s2.acc: 98.7441, s2.loss_bbox: 0.0221, loss: 0.1867
2022-04-04 14:16:35,043 - mmdet - INFO - Epoch [2][1750/2112]	lr: 2.000e-02, eta: 1:58:31, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0215, loss_rpn_bbox: 0.0114, s0.loss_cls: 0.0584, s0.acc: 98.3691, s0.loss_bbox: 0.0277, s1.loss_cls: 0.0265, s1.acc: 98.4219, s1.loss_bbox: 0.0337, s2.loss_cls: 0.0122, s2.acc: 98.5215, s2.loss_bbox: 0.0215, loss: 0.2128
2022-04-04 14:16:51,648 - mmdet - INFO - Epoch [2][1800/2112]	lr: 2.000e-02, eta: 1:58:15, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0174, loss_rpn_bbox: 0.0077, s0.loss_cls: 0.0432, s0.acc: 98.7090, s0.loss_bbox: 0.0219, s1.loss_cls: 0.0200, s1.acc: 98.8008, s1.loss_bbox: 0.0306, s2.loss_cls: 0.0099, s2.acc: 98.6543, s2.loss_bbox: 0.0239, loss: 0.1747
2022-04-04 14:17:08,144 - mmdet - INFO - Epoch [2][1850/2112]	lr: 2.000e-02, eta: 1:57:58, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0170, loss_rpn_bbox: 0.0079, s0.loss_cls: 0.0663, s0.acc: 98.1270, s0.loss_bbox: 0.0285, s1.loss_cls: 0.0307, s1.acc: 98.2402, s1.loss_bbox: 0.0360, s2.loss_cls: 0.0131, s2.acc: 98.3965, s2.loss_bbox: 0.0243, loss: 0.2238
2022-04-04 14:17:24,646 - mmdet - INFO - Epoch [2][1900/2112]	lr: 2.000e-02, eta: 1:57:41, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0117, loss_rpn_bbox: 0.0067, s0.loss_cls: 0.0564, s0.acc: 98.3965, s0.loss_bbox: 0.0263, s1.loss_cls: 0.0274, s1.acc: 98.3828, s1.loss_bbox: 0.0336, s2.loss_cls: 0.0123, s2.acc: 98.4336, s2.loss_bbox: 0.0217, loss: 0.1962
2022-04-04 14:17:41,191 - mmdet - INFO - Epoch [2][1950/2112]	lr: 2.000e-02, eta: 1:57:24, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0283, loss_rpn_bbox: 0.0089, s0.loss_cls: 0.0633, s0.acc: 98.1406, s0.loss_bbox: 0.0294, s1.loss_cls: 0.0299, s1.acc: 98.1797, s1.loss_bbox: 0.0324, s2.loss_cls: 0.0121, s2.acc: 98.4590, s2.loss_bbox: 0.0185, loss: 0.2228
2022-04-04 14:17:57,711 - mmdet - INFO - Epoch [2][2000/2112]	lr: 2.000e-02, eta: 1:57:08, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0245, loss_rpn_bbox: 0.0056, s0.loss_cls: 0.0573, s0.acc: 98.4492, s0.loss_bbox: 0.0241, s1.loss_cls: 0.0254, s1.acc: 98.5801, s1.loss_bbox: 0.0294, s2.loss_cls: 0.0108, s2.acc: 98.7012, s2.loss_bbox: 0.0208, loss: 0.1977
2022-04-04 14:18:14,273 - mmdet - INFO - Epoch [2][2050/2112]	lr: 2.000e-02, eta: 1:56:51, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0181, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0480, s0.acc: 98.5703, s0.loss_bbox: 0.0240, s1.loss_cls: 0.0235, s1.acc: 98.4961, s1.loss_bbox: 0.0302, s2.loss_cls: 0.0100, s2.acc: 98.6992, s2.loss_bbox: 0.0205, loss: 0.1819
2022-04-04 14:18:30,745 - mmdet - INFO - Epoch [2][2100/2112]	lr: 2.000e-02, eta: 1:56:34, time: 0.329, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0047, s0.loss_cls: 0.0522, s0.acc: 98.4570, s0.loss_bbox: 0.0256, s1.loss_cls: 0.0257, s1.acc: 98.3906, s1.loss_bbox: 0.0304, s2.loss_cls: 0.0112, s2.acc: 98.5000, s2.loss_bbox: 0.0218, loss: 0.1886
2022-04-04 14:18:34,730 - mmdet - INFO - Saving checkpoint at 2 epochs
2022-04-04 14:20:56,123 - mmdet - INFO - Evaluating bbox...
2022-04-04 14:20:58,058 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.389
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.588
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.473
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.390
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.515
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.515
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.515
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.515
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000

2022-04-04 14:20:58,096 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 14:20:58,096 - mmdet - INFO - Epoch(val) [2][1918]	bbox_mAP: 0.3890, bbox_mAP_50: 0.5880, bbox_mAP_75: 0.4730, bbox_mAP_s: 0.3900, bbox_mAP_m: -1.0000, bbox_mAP_l: -1.0000, bbox_mAP_copypaste: 0.389 0.588 0.473 0.390 -1.000 -1.000
2022-04-04 14:21:16,755 - mmdet - INFO - Epoch [3][50/2112]	lr: 2.000e-02, eta: 1:56:05, time: 0.373, data_time: 0.046, memory: 4024, loss_rpn_cls: 0.0253, loss_rpn_bbox: 0.0084, s0.loss_cls: 0.0516, s0.acc: 98.5430, s0.loss_bbox: 0.0248, s1.loss_cls: 0.0208, s1.acc: 98.7754, s1.loss_bbox: 0.0250, s2.loss_cls: 0.0100, s2.acc: 98.7676, s2.loss_bbox: 0.0186, loss: 0.1845
2022-04-04 14:21:33,408 - mmdet - INFO - Epoch [3][100/2112]	lr: 2.000e-02, eta: 1:55:49, time: 0.333, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0135, loss_rpn_bbox: 0.0047, s0.loss_cls: 0.0570, s0.acc: 98.3867, s0.loss_bbox: 0.0273, s1.loss_cls: 0.0249, s1.acc: 98.5234, s1.loss_bbox: 0.0334, s2.loss_cls: 0.0119, s2.acc: 98.4688, s2.loss_bbox: 0.0237, loss: 0.1963
2022-04-04 14:21:49,953 - mmdet - INFO - Epoch [3][150/2112]	lr: 2.000e-02, eta: 1:55:32, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0114, loss_rpn_bbox: 0.0066, s0.loss_cls: 0.0537, s0.acc: 98.4277, s0.loss_bbox: 0.0243, s1.loss_cls: 0.0255, s1.acc: 98.4902, s1.loss_bbox: 0.0314, s2.loss_cls: 0.0113, s2.acc: 98.5957, s2.loss_bbox: 0.0226, loss: 0.1869
2022-04-04 14:22:06,454 - mmdet - INFO - Epoch [3][200/2112]	lr: 2.000e-02, eta: 1:55:15, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0046, s0.loss_cls: 0.0537, s0.acc: 98.4199, s0.loss_bbox: 0.0263, s1.loss_cls: 0.0252, s1.acc: 98.4688, s1.loss_bbox: 0.0327, s2.loss_cls: 0.0115, s2.acc: 98.3906, s2.loss_bbox: 0.0233, loss: 0.1881
2022-04-04 14:22:23,011 - mmdet - INFO - Epoch [3][250/2112]	lr: 2.000e-02, eta: 1:54:59, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0157, loss_rpn_bbox: 0.0059, s0.loss_cls: 0.0537, s0.acc: 98.5566, s0.loss_bbox: 0.0232, s1.loss_cls: 0.0234, s1.acc: 98.6680, s1.loss_bbox: 0.0295, s2.loss_cls: 0.0107, s2.acc: 98.8164, s2.loss_bbox: 0.0209, loss: 0.1829
2022-04-04 14:22:39,365 - mmdet - INFO - Epoch [3][300/2112]	lr: 2.000e-02, eta: 1:54:42, time: 0.327, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0180, loss_rpn_bbox: 0.0061, s0.loss_cls: 0.0468, s0.acc: 98.7090, s0.loss_bbox: 0.0225, s1.loss_cls: 0.0210, s1.acc: 98.7637, s1.loss_bbox: 0.0282, s2.loss_cls: 0.0092, s2.acc: 98.9336, s2.loss_bbox: 0.0208, loss: 0.1725
2022-04-04 14:22:55,801 - mmdet - INFO - Epoch [3][350/2112]	lr: 2.000e-02, eta: 1:54:25, time: 0.329, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0174, loss_rpn_bbox: 0.0059, s0.loss_cls: 0.0442, s0.acc: 98.7051, s0.loss_bbox: 0.0202, s1.loss_cls: 0.0218, s1.acc: 98.6074, s1.loss_bbox: 0.0262, s2.loss_cls: 0.0109, s2.acc: 98.4004, s2.loss_bbox: 0.0200, loss: 0.1666
2022-04-04 14:23:12,312 - mmdet - INFO - Epoch [3][400/2112]	lr: 2.000e-02, eta: 1:54:08, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0169, loss_rpn_bbox: 0.0049, s0.loss_cls: 0.0487, s0.acc: 98.4883, s0.loss_bbox: 0.0242, s1.loss_cls: 0.0238, s1.acc: 98.3574, s1.loss_bbox: 0.0291, s2.loss_cls: 0.0110, s2.acc: 98.4297, s2.loss_bbox: 0.0212, loss: 0.1798
2022-04-04 14:23:28,859 - mmdet - INFO - Epoch [3][450/2112]	lr: 2.000e-02, eta: 1:53:52, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0133, loss_rpn_bbox: 0.0064, s0.loss_cls: 0.0532, s0.acc: 98.5527, s0.loss_bbox: 0.0228, s1.loss_cls: 0.0239, s1.acc: 98.6504, s1.loss_bbox: 0.0261, s2.loss_cls: 0.0103, s2.acc: 98.8359, s2.loss_bbox: 0.0181, loss: 0.1743
2022-04-04 14:23:45,334 - mmdet - INFO - Epoch [3][500/2112]	lr: 2.000e-02, eta: 1:53:35, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0223, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.0577, s0.acc: 98.4805, s0.loss_bbox: 0.0271, s1.loss_cls: 0.0263, s1.acc: 98.4902, s1.loss_bbox: 0.0299, s2.loss_cls: 0.0116, s2.acc: 98.6191, s2.loss_bbox: 0.0198, loss: 0.2033
2022-04-04 14:24:01,856 - mmdet - INFO - Epoch [3][550/2112]	lr: 2.000e-02, eta: 1:53:18, time: 0.330, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0149, loss_rpn_bbox: 0.0091, s0.loss_cls: 0.0475, s0.acc: 98.6582, s0.loss_bbox: 0.0237, s1.loss_cls: 0.0215, s1.acc: 98.7324, s1.loss_bbox: 0.0291, s2.loss_cls: 0.0095, s2.acc: 98.7969, s2.loss_bbox: 0.0201, loss: 0.1754
2022-04-04 14:24:18,479 - mmdet - INFO - Epoch [3][600/2112]	lr: 2.000e-02, eta: 1:53:02, time: 0.332, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0122, loss_rpn_bbox: 0.0041, s0.loss_cls: 0.0491, s0.acc: 98.5859, s0.loss_bbox: 0.0257, s1.loss_cls: 0.0242, s1.acc: 98.4238, s1.loss_bbox: 0.0358, s2.loss_cls: 0.0120, s2.acc: 98.4512, s2.loss_bbox: 0.0279, loss: 0.1910
2022-04-04 14:24:35,024 - mmdet - INFO - Epoch [3][650/2112]	lr: 2.000e-02, eta: 1:52:46, time: 0.331, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0149, loss_rpn_bbox: 0.0049, s0.loss_cls: 0.0524, s0.acc: 98.4395, s0.loss_bbox: 0.0235, s1.loss_cls: 0.0259, s1.acc: 98.3906, s1.loss_bbox: 0.0331, s2.loss_cls: 0.0121, s2.acc: 98.4082, s2.loss_bbox: 0.0263, loss: 0.1930
