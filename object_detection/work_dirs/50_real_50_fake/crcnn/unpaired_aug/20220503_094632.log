2022-05-03 09:46:33,008 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0
NVCC: 
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.7.1+cu110
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2+cu110
OpenCV: 4.5.5
MMCV: 1.4.5
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.21.0+e97ae44
------------------------------------------------------------

2022-05-03 09:46:33,808 - mmdet - INFO - Distributed training: False
2022-05-03 09:46:34,589 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained',
                      checkpoint='torchvision://resnet101')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'COCODataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/composed/50_real_50_fake/helper/annotation/unpaired_aug.json',
        img_prefix='../dataset/xray/composed/50_real_50_fake/unpaired_aug/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ],
        classes=('FIREARM', 'KNIFE')),
    val=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',
        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('FIREARM', 'KNIFE')),
    test=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',
        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('FIREARM', 'KNIFE')))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
classes = ('FIREARM', 'KNIFE')
work_dir = 'work_dirs/50_real_50_fake/crcnn/unpaired_aug/'
auto_resume = False
gpu_ids = [0]

2022-05-03 09:46:34,590 - mmdet - INFO - Set random seed to 670699413, deterministic: False
2022-05-03 09:46:35,707 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
2022-05-03 09:46:36,124 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2022-05-03 09:46:36,150 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2022-05-03 09:46:36,158 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-05-03 09:46:36,345 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-05-03 09:46:36,463 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2022-05-03 09:46:39,936 - mmdet - INFO - load checkpoint from local path: ./checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth
2022-05-03 09:46:41,264 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
2022-05-03 09:46:41,277 - mmdet - INFO - Start running, host: fsfr78@gpu5, work_dir: /home2/fsfr78/xray_image_synthesis/object_detection/work_dirs/50_real_50_fake/crcnn/unpaired_aug
2022-05-03 09:46:41,278 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-05-03 09:46:41,278 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2022-05-03 09:46:41,278 - mmdet - INFO - Checkpoints will be saved to /home2/fsfr78/xray_image_synthesis/object_detection/work_dirs/50_real_50_fake/crcnn/unpaired_aug by HardDiskBackend.
2022-05-03 09:47:02,151 - mmdet - INFO - Epoch [1][50/2101]	lr: 1.978e-03, eta: 2:39:31, time: 0.380, data_time: 0.048, memory: 4023, loss_rpn_cls: 0.0987, loss_rpn_bbox: 0.0082, s0.loss_cls: 0.2421, s0.acc: 95.1074, s0.loss_bbox: 0.0150, s1.loss_cls: 0.1594, s1.acc: 86.8828, s1.loss_bbox: 0.0129, s2.loss_cls: 0.0720, s2.acc: 90.0664, s2.loss_bbox: 0.0058, loss: 0.6142
2022-05-03 09:47:19,046 - mmdet - INFO - Epoch [1][100/2101]	lr: 3.976e-03, eta: 2:30:18, time: 0.338, data_time: 0.005, memory: 4023, loss_rpn_cls: 0.0558, loss_rpn_bbox: 0.0092, s0.loss_cls: 0.0689, s0.acc: 98.2578, s0.loss_bbox: 0.0163, s1.loss_cls: 0.0354, s1.acc: 98.2051, s1.loss_bbox: 0.0138, s2.loss_cls: 0.0181, s2.acc: 98.3770, s2.loss_bbox: 0.0072, loss: 0.2247
2022-05-03 09:47:35,805 - mmdet - INFO - Epoch [1][150/2101]	lr: 5.974e-03, eta: 2:26:40, time: 0.335, data_time: 0.005, memory: 4023, loss_rpn_cls: 0.0356, loss_rpn_bbox: 0.0058, s0.loss_cls: 0.0483, s0.acc: 98.9512, s0.loss_bbox: 0.0112, s1.loss_cls: 0.0232, s1.acc: 98.8203, s1.loss_bbox: 0.0093, s2.loss_cls: 0.0124, s2.acc: 98.3516, s2.loss_bbox: 0.0060, loss: 0.1519
2022-05-03 09:47:52,524 - mmdet - INFO - Epoch [1][200/2101]	lr: 7.972e-03, eta: 2:24:38, time: 0.334, data_time: 0.004, memory: 4023, loss_rpn_cls: 0.0418, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0459, s0.acc: 98.9805, s0.loss_bbox: 0.0147, s1.loss_cls: 0.0206, s1.acc: 99.0488, s1.loss_bbox: 0.0127, s2.loss_cls: 0.0101, s2.acc: 98.9199, s2.loss_bbox: 0.0063, loss: 0.1590
2022-05-03 09:48:09,623 - mmdet - INFO - Epoch [1][250/2101]	lr: 9.970e-03, eta: 2:23:55, time: 0.342, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0452, loss_rpn_bbox: 0.0079, s0.loss_cls: 0.0457, s0.acc: 98.9766, s0.loss_bbox: 0.0128, s1.loss_cls: 0.0194, s1.acc: 99.1816, s1.loss_bbox: 0.0109, s2.loss_cls: 0.0097, s2.acc: 99.1738, s2.loss_bbox: 0.0078, loss: 0.1594
2022-05-03 09:48:27,194 - mmdet - INFO - Epoch [1][300/2101]	lr: 1.197e-02, eta: 2:24:01, time: 0.351, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0505, loss_rpn_bbox: 0.0088, s0.loss_cls: 0.0439, s0.acc: 99.0820, s0.loss_bbox: 0.0114, s1.loss_cls: 0.0191, s1.acc: 99.1191, s1.loss_bbox: 0.0108, s2.loss_cls: 0.0084, s2.acc: 99.2129, s2.loss_bbox: 0.0060, loss: 0.1589
2022-05-03 09:48:44,796 - mmdet - INFO - Epoch [1][350/2101]	lr: 1.397e-02, eta: 2:24:02, time: 0.352, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0478, loss_rpn_bbox: 0.0098, s0.loss_cls: 0.0461, s0.acc: 99.0859, s0.loss_bbox: 0.0136, s1.loss_cls: 0.0180, s1.acc: 99.2598, s1.loss_bbox: 0.0107, s2.loss_cls: 0.0080, s2.acc: 99.2871, s2.loss_bbox: 0.0048, loss: 0.1588
2022-05-03 09:49:02,464 - mmdet - INFO - Epoch [1][400/2101]	lr: 1.596e-02, eta: 2:24:02, time: 0.353, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0514, loss_rpn_bbox: 0.0112, s0.loss_cls: 0.0401, s0.acc: 99.1465, s0.loss_bbox: 0.0112, s1.loss_cls: 0.0183, s1.acc: 99.1719, s1.loss_bbox: 0.0122, s2.loss_cls: 0.0089, s2.acc: 99.0273, s2.loss_bbox: 0.0079, loss: 0.1612
2022-05-03 09:49:20,430 - mmdet - INFO - Epoch [1][450/2101]	lr: 1.796e-02, eta: 2:24:15, time: 0.359, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0483, loss_rpn_bbox: 0.0065, s0.loss_cls: 0.0463, s0.acc: 98.9727, s0.loss_bbox: 0.0108, s1.loss_cls: 0.0221, s1.acc: 98.8633, s1.loss_bbox: 0.0106, s2.loss_cls: 0.0098, s2.acc: 99.0117, s2.loss_bbox: 0.0057, loss: 0.1601
2022-05-03 09:49:38,053 - mmdet - INFO - Epoch [1][500/2101]	lr: 1.996e-02, eta: 2:24:05, time: 0.352, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0584, loss_rpn_bbox: 0.0148, s0.loss_cls: 0.0396, s0.acc: 99.0938, s0.loss_bbox: 0.0168, s1.loss_cls: 0.0171, s1.acc: 99.1289, s1.loss_bbox: 0.0149, s2.loss_cls: 0.0086, s2.acc: 99.0273, s2.loss_bbox: 0.0079, loss: 0.1779
2022-05-03 09:49:55,830 - mmdet - INFO - Epoch [1][550/2101]	lr: 2.000e-02, eta: 2:24:00, time: 0.356, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0470, loss_rpn_bbox: 0.0104, s0.loss_cls: 0.0414, s0.acc: 99.1602, s0.loss_bbox: 0.0112, s1.loss_cls: 0.0181, s1.acc: 99.1953, s1.loss_bbox: 0.0112, s2.loss_cls: 0.0083, s2.acc: 99.2422, s2.loss_bbox: 0.0059, loss: 0.1535
2022-05-03 09:50:13,468 - mmdet - INFO - Epoch [1][600/2101]	lr: 2.000e-02, eta: 2:23:47, time: 0.353, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0453, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0354, s0.acc: 99.2266, s0.loss_bbox: 0.0105, s1.loss_cls: 0.0166, s1.acc: 99.1523, s1.loss_bbox: 0.0090, s2.loss_cls: 0.0082, s2.acc: 99.1016, s2.loss_bbox: 0.0056, loss: 0.1393
2022-05-03 09:50:31,021 - mmdet - INFO - Epoch [1][650/2101]	lr: 2.000e-02, eta: 2:23:31, time: 0.351, data_time: 0.006, memory: 4024, loss_rpn_cls: 0.0576, loss_rpn_bbox: 0.0115, s0.loss_cls: 0.0366, s0.acc: 99.2734, s0.loss_bbox: 0.0095, s1.loss_cls: 0.0160, s1.acc: 99.3125, s1.loss_bbox: 0.0090, s2.loss_cls: 0.0073, s2.acc: 99.3594, s2.loss_bbox: 0.0057, loss: 0.1531
2022-05-03 09:50:48,770 - mmdet - INFO - Epoch [1][700/2101]	lr: 2.000e-02, eta: 2:23:21, time: 0.355, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0482, loss_rpn_bbox: 0.0142, s0.loss_cls: 0.0375, s0.acc: 99.1855, s0.loss_bbox: 0.0113, s1.loss_cls: 0.0166, s1.acc: 99.2402, s1.loss_bbox: 0.0108, s2.loss_cls: 0.0075, s2.acc: 99.3379, s2.loss_bbox: 0.0069, loss: 0.1528
2022-05-03 09:51:06,647 - mmdet - INFO - Epoch [1][750/2101]	lr: 2.000e-02, eta: 2:23:14, time: 0.358, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0569, loss_rpn_bbox: 0.0139, s0.loss_cls: 0.0359, s0.acc: 99.2461, s0.loss_bbox: 0.0087, s1.loss_cls: 0.0157, s1.acc: 99.3223, s1.loss_bbox: 0.0078, s2.loss_cls: 0.0076, s2.acc: 99.3027, s2.loss_bbox: 0.0048, loss: 0.1514
2022-05-03 09:51:24,211 - mmdet - INFO - Epoch [1][800/2101]	lr: 2.000e-02, eta: 2:22:56, time: 0.351, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0470, loss_rpn_bbox: 0.0103, s0.loss_cls: 0.0372, s0.acc: 99.2539, s0.loss_bbox: 0.0107, s1.loss_cls: 0.0162, s1.acc: 99.3184, s1.loss_bbox: 0.0075, s2.loss_cls: 0.0074, s2.acc: 99.3301, s2.loss_bbox: 0.0046, loss: 0.1407
2022-05-03 09:51:41,471 - mmdet - INFO - Epoch [1][850/2101]	lr: 2.000e-02, eta: 2:22:30, time: 0.345, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0434, loss_rpn_bbox: 0.0074, s0.loss_cls: 0.0422, s0.acc: 99.0996, s0.loss_bbox: 0.0112, s1.loss_cls: 0.0176, s1.acc: 99.1387, s1.loss_bbox: 0.0096, s2.loss_cls: 0.0084, s2.acc: 99.1074, s2.loss_bbox: 0.0061, loss: 0.1459
2022-05-03 09:51:58,998 - mmdet - INFO - Epoch [1][900/2101]	lr: 2.000e-02, eta: 2:22:12, time: 0.351, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0538, loss_rpn_bbox: 0.0109, s0.loss_cls: 0.0490, s0.acc: 98.9570, s0.loss_bbox: 0.0154, s1.loss_cls: 0.0200, s1.acc: 99.1309, s1.loss_bbox: 0.0133, s2.loss_cls: 0.0092, s2.acc: 99.1367, s2.loss_bbox: 0.0084, loss: 0.1800
2022-05-03 09:52:16,601 - mmdet - INFO - Epoch [1][950/2101]	lr: 2.000e-02, eta: 2:21:56, time: 0.352, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0559, loss_rpn_bbox: 0.0141, s0.loss_cls: 0.0405, s0.acc: 99.1816, s0.loss_bbox: 0.0101, s1.loss_cls: 0.0168, s1.acc: 99.2715, s1.loss_bbox: 0.0084, s2.loss_cls: 0.0073, s2.acc: 99.3730, s2.loss_bbox: 0.0047, loss: 0.1578
2022-05-03 09:52:33,957 - mmdet - INFO - Exp name: crcnn_config.py
2022-05-03 09:52:33,957 - mmdet - INFO - Epoch [1][1000/2101]	lr: 2.000e-02, eta: 2:21:33, time: 0.347, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0406, loss_rpn_bbox: 0.0078, s0.loss_cls: 0.0409, s0.acc: 99.1797, s0.loss_bbox: 0.0136, s1.loss_cls: 0.0159, s1.acc: 99.3398, s1.loss_bbox: 0.0126, s2.loss_cls: 0.0064, s2.acc: 99.5293, s2.loss_bbox: 0.0091, loss: 0.1469
2022-05-03 09:52:51,740 - mmdet - INFO - Epoch [1][1050/2101]	lr: 2.000e-02, eta: 2:21:22, time: 0.356, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0487, loss_rpn_bbox: 0.0098, s0.loss_cls: 0.0432, s0.acc: 99.1250, s0.loss_bbox: 0.0126, s1.loss_cls: 0.0175, s1.acc: 99.3027, s1.loss_bbox: 0.0106, s2.loss_cls: 0.0076, s2.acc: 99.3301, s2.loss_bbox: 0.0068, loss: 0.1567
2022-05-03 09:53:08,738 - mmdet - INFO - Epoch [1][1100/2101]	lr: 2.000e-02, eta: 2:20:52, time: 0.340, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0495, loss_rpn_bbox: 0.0115, s0.loss_cls: 0.0354, s0.acc: 99.2305, s0.loss_bbox: 0.0109, s1.loss_cls: 0.0161, s1.acc: 99.2812, s1.loss_bbox: 0.0120, s2.loss_cls: 0.0076, s2.acc: 99.2734, s2.loss_bbox: 0.0067, loss: 0.1497
2022-05-03 09:53:26,587 - mmdet - INFO - Epoch [1][1150/2101]	lr: 2.000e-02, eta: 2:20:41, time: 0.357, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0463, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0443, s0.acc: 99.0449, s0.loss_bbox: 0.0129, s1.loss_cls: 0.0186, s1.acc: 99.1348, s1.loss_bbox: 0.0135, s2.loss_cls: 0.0082, s2.acc: 99.3066, s2.loss_bbox: 0.0082, loss: 0.1606
2022-05-03 09:53:44,146 - mmdet - INFO - Epoch [1][1200/2101]	lr: 2.000e-02, eta: 2:20:24, time: 0.351, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0479, loss_rpn_bbox: 0.0084, s0.loss_cls: 0.0433, s0.acc: 99.1328, s0.loss_bbox: 0.0115, s1.loss_cls: 0.0187, s1.acc: 99.1641, s1.loss_bbox: 0.0104, s2.loss_cls: 0.0078, s2.acc: 99.2578, s2.loss_bbox: 0.0051, loss: 0.1531
2022-05-03 09:54:04,201 - mmdet - INFO - Epoch [1][1250/2101]	lr: 2.000e-02, eta: 2:20:54, time: 0.401, data_time: 0.062, memory: 4024, loss_rpn_cls: 0.0513, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0367, s0.acc: 99.2383, s0.loss_bbox: 0.0105, s1.loss_cls: 0.0149, s1.acc: 99.3633, s1.loss_bbox: 0.0092, s2.loss_cls: 0.0068, s2.acc: 99.3516, s2.loss_bbox: 0.0061, loss: 0.1429
2022-05-03 09:54:21,349 - mmdet - INFO - Epoch [1][1300/2101]	lr: 2.000e-02, eta: 2:20:28, time: 0.343, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0416, loss_rpn_bbox: 0.0089, s0.loss_cls: 0.0447, s0.acc: 98.9863, s0.loss_bbox: 0.0143, s1.loss_cls: 0.0204, s1.acc: 99.0371, s1.loss_bbox: 0.0135, s2.loss_cls: 0.0092, s2.acc: 99.0625, s2.loss_bbox: 0.0079, loss: 0.1605
2022-05-03 09:54:39,056 - mmdet - INFO - Epoch [1][1350/2101]	lr: 2.000e-02, eta: 2:20:12, time: 0.354, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0376, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0416, s0.acc: 99.0918, s0.loss_bbox: 0.0133, s1.loss_cls: 0.0171, s1.acc: 99.1992, s1.loss_bbox: 0.0111, s2.loss_cls: 0.0077, s2.acc: 99.1758, s2.loss_bbox: 0.0069, loss: 0.1439
2022-05-03 09:54:56,635 - mmdet - INFO - Epoch [1][1400/2101]	lr: 2.000e-02, eta: 2:19:53, time: 0.352, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0378, loss_rpn_bbox: 0.0106, s0.loss_cls: 0.0376, s0.acc: 99.1738, s0.loss_bbox: 0.0134, s1.loss_cls: 0.0158, s1.acc: 99.2383, s1.loss_bbox: 0.0147, s2.loss_cls: 0.0080, s2.acc: 99.1035, s2.loss_bbox: 0.0108, loss: 0.1487
2022-05-03 09:55:14,286 - mmdet - INFO - Epoch [1][1450/2101]	lr: 2.000e-02, eta: 2:19:36, time: 0.353, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0431, loss_rpn_bbox: 0.0124, s0.loss_cls: 0.0414, s0.acc: 99.1074, s0.loss_bbox: 0.0116, s1.loss_cls: 0.0168, s1.acc: 99.2480, s1.loss_bbox: 0.0124, s2.loss_cls: 0.0068, s2.acc: 99.3691, s2.loss_bbox: 0.0079, loss: 0.1525
2022-05-03 09:55:31,799 - mmdet - INFO - Epoch [1][1500/2101]	lr: 2.000e-02, eta: 2:19:16, time: 0.350, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0481, loss_rpn_bbox: 0.0113, s0.loss_cls: 0.0372, s0.acc: 99.1230, s0.loss_bbox: 0.0110, s1.loss_cls: 0.0173, s1.acc: 99.1113, s1.loss_bbox: 0.0127, s2.loss_cls: 0.0074, s2.acc: 99.2012, s2.loss_bbox: 0.0079, loss: 0.1528
2022-05-03 09:55:48,603 - mmdet - INFO - Epoch [1][1550/2101]	lr: 2.000e-02, eta: 2:18:46, time: 0.336, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0408, loss_rpn_bbox: 0.0083, s0.loss_cls: 0.0445, s0.acc: 99.0605, s0.loss_bbox: 0.0136, s1.loss_cls: 0.0177, s1.acc: 99.1426, s1.loss_bbox: 0.0126, s2.loss_cls: 0.0079, s2.acc: 99.2246, s2.loss_bbox: 0.0083, loss: 0.1538
2022-05-03 09:56:06,282 - mmdet - INFO - Epoch [1][1600/2101]	lr: 2.000e-02, eta: 2:18:30, time: 0.354, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0391, loss_rpn_bbox: 0.0079, s0.loss_cls: 0.0373, s0.acc: 99.1582, s0.loss_bbox: 0.0124, s1.loss_cls: 0.0156, s1.acc: 99.2441, s1.loss_bbox: 0.0130, s2.loss_cls: 0.0068, s2.acc: 99.3008, s2.loss_bbox: 0.0087, loss: 0.1408
2022-05-03 09:56:23,468 - mmdet - INFO - Epoch [1][1650/2101]	lr: 2.000e-02, eta: 2:18:06, time: 0.344, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0393, loss_rpn_bbox: 0.0084, s0.loss_cls: 0.0452, s0.acc: 99.0801, s0.loss_bbox: 0.0133, s1.loss_cls: 0.0178, s1.acc: 99.1699, s1.loss_bbox: 0.0128, s2.loss_cls: 0.0074, s2.acc: 99.2852, s2.loss_bbox: 0.0073, loss: 0.1514
2022-05-03 09:56:40,393 - mmdet - INFO - Epoch [1][1700/2101]	lr: 2.000e-02, eta: 2:17:40, time: 0.338, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0450, loss_rpn_bbox: 0.0091, s0.loss_cls: 0.0400, s0.acc: 99.1582, s0.loss_bbox: 0.0121, s1.loss_cls: 0.0159, s1.acc: 99.3047, s1.loss_bbox: 0.0119, s2.loss_cls: 0.0073, s2.acc: 99.3828, s2.loss_bbox: 0.0068, loss: 0.1482
2022-05-03 09:57:00,249 - mmdet - INFO - Epoch [1][1750/2101]	lr: 2.000e-02, eta: 2:17:53, time: 0.397, data_time: 0.054, memory: 4024, loss_rpn_cls: 0.0346, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0376, s0.acc: 99.2012, s0.loss_bbox: 0.0123, s1.loss_cls: 0.0157, s1.acc: 99.2500, s1.loss_bbox: 0.0124, s2.loss_cls: 0.0068, s2.acc: 99.3184, s2.loss_bbox: 0.0077, loss: 0.1358
2022-05-03 09:57:17,864 - mmdet - INFO - Epoch [1][1800/2101]	lr: 2.000e-02, eta: 2:17:35, time: 0.352, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0405, loss_rpn_bbox: 0.0088, s0.loss_cls: 0.0403, s0.acc: 99.1250, s0.loss_bbox: 0.0133, s1.loss_cls: 0.0166, s1.acc: 99.2422, s1.loss_bbox: 0.0147, s2.loss_cls: 0.0070, s2.acc: 99.3457, s2.loss_bbox: 0.0086, loss: 0.1500
2022-05-03 09:57:35,242 - mmdet - INFO - Epoch [1][1850/2101]	lr: 2.000e-02, eta: 2:17:14, time: 0.348, data_time: 0.004, memory: 4024, loss_rpn_cls: 0.0380, loss_rpn_bbox: 0.0083, s0.loss_cls: 0.0391, s0.acc: 99.1777, s0.loss_bbox: 0.0139, s1.loss_cls: 0.0152, s1.acc: 99.3828, s1.loss_bbox: 0.0136, s2.loss_cls: 0.0059, s2.acc: 99.4805, s2.loss_bbox: 0.0082, loss: 0.1425
2022-05-03 09:57:52,675 - mmdet - INFO - Epoch [1][1900/2101]	lr: 2.000e-02, eta: 2:16:54, time: 0.349, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0360, loss_rpn_bbox: 0.0090, s0.loss_cls: 0.0383, s0.acc: 99.1230, s0.loss_bbox: 0.0121, s1.loss_cls: 0.0156, s1.acc: 99.2793, s1.loss_bbox: 0.0118, s2.loss_cls: 0.0068, s2.acc: 99.3008, s2.loss_bbox: 0.0071, loss: 0.1367
2022-05-03 09:58:09,804 - mmdet - INFO - Epoch [1][1950/2101]	lr: 2.000e-02, eta: 2:16:31, time: 0.343, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0309, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0388, s0.acc: 99.0801, s0.loss_bbox: 0.0135, s1.loss_cls: 0.0162, s1.acc: 99.2734, s1.loss_bbox: 0.0151, s2.loss_cls: 0.0072, s2.acc: 99.2461, s2.loss_bbox: 0.0101, loss: 0.1392
2022-05-03 09:58:27,301 - mmdet - INFO - Exp name: crcnn_config.py
2022-05-03 09:58:27,302 - mmdet - INFO - Epoch [1][2000/2101]	lr: 2.000e-02, eta: 2:16:12, time: 0.350, data_time: 0.005, memory: 4024, loss_rpn_cls: 0.0408, loss_rpn_bbox: 0.0069, s0.loss_cls: 0.0428, s0.acc: 99.0293, s0.loss_bbox: 0.0161, s1.loss_cls: 0.0176, s1.acc: 99.1914, s1.loss_bbox: 0.0163, s2.loss_cls: 0.0070, s2.acc: 99.3008, s2.loss_bbox: 0.0112, loss: 0.1587
2022-05-03 09:58:42,916 - mmdet - INFO - Epoch [1][2050/2101]	lr: 2.000e-02, eta: 2:15:32, time: 0.312, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 65.8691, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 65.9043, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 65.9023, s2.loss_bbox: nan, loss: nan
2022-05-03 09:58:57,683 - mmdet - INFO - Epoch [1][2100/2101]	lr: 2.000e-02, eta: 2:14:44, time: 0.295, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 46.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 46.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 46.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 09:58:58,102 - mmdet - INFO - Saving checkpoint at 1 epochs
2022-05-03 10:00:45,171 - mmdet - INFO - Evaluating bbox...
2022-05-03 10:00:45,172 - mmdet - ERROR - The testing results of the whole dataset is empty.
2022-05-03 10:00:45,173 - mmdet - INFO - Exp name: crcnn_config.py
2022-05-03 10:00:45,174 - mmdet - INFO - Epoch(val) [1][1912]	
2022-05-03 10:01:01,991 - mmdet - INFO - Epoch [2][50/2101]	lr: 2.000e-02, eta: 2:14:15, time: 0.336, data_time: 0.048, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 56.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 56.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 56.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:01:16,377 - mmdet - INFO - Epoch [2][100/2101]	lr: 2.000e-02, eta: 2:13:25, time: 0.288, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 59.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 59.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 59.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:01:30,789 - mmdet - INFO - Epoch [2][150/2101]	lr: 2.000e-02, eta: 2:12:37, time: 0.288, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 44.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 44.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 44.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:01:44,842 - mmdet - INFO - Epoch [2][200/2101]	lr: 2.000e-02, eta: 2:11:47, time: 0.281, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 51.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 51.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 51.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:01:59,316 - mmdet - INFO - Epoch [2][250/2101]	lr: 2.000e-02, eta: 2:11:03, time: 0.289, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 46.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 46.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 46.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:02:14,052 - mmdet - INFO - Epoch [2][300/2101]	lr: 2.000e-02, eta: 2:10:22, time: 0.295, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 46.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 46.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 46.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:02:29,049 - mmdet - INFO - Epoch [2][350/2101]	lr: 2.000e-02, eta: 2:09:45, time: 0.300, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 58.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 58.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 58.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:02:43,128 - mmdet - INFO - Epoch [2][400/2101]	lr: 2.000e-02, eta: 2:09:01, time: 0.282, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 49.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 49.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 49.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:02:57,967 - mmdet - INFO - Epoch [2][450/2101]	lr: 2.000e-02, eta: 2:08:24, time: 0.297, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 41.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 41.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 41.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:03:13,085 - mmdet - INFO - Epoch [2][500/2101]	lr: 2.000e-02, eta: 2:07:51, time: 0.302, data_time: 0.018, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 57.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 57.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 57.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:03:28,424 - mmdet - INFO - Epoch [2][550/2101]	lr: 2.000e-02, eta: 2:07:20, time: 0.307, data_time: 0.014, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 50.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 50.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 50.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:03:41,939 - mmdet - INFO - Epoch [2][600/2101]	lr: 2.000e-02, eta: 2:06:34, time: 0.270, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 56.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 56.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 56.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:03:56,148 - mmdet - INFO - Epoch [2][650/2101]	lr: 2.000e-02, eta: 2:05:56, time: 0.284, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 44.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 44.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 44.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:04:10,623 - mmdet - INFO - Epoch [2][700/2101]	lr: 2.000e-02, eta: 2:05:20, time: 0.289, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 46.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 46.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 46.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:04:25,348 - mmdet - INFO - Epoch [2][750/2101]	lr: 2.000e-02, eta: 2:04:47, time: 0.294, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 52.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 52.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 52.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:04:39,428 - mmdet - INFO - Epoch [2][800/2101]	lr: 2.000e-02, eta: 2:04:10, time: 0.282, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 47.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 47.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 47.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:04:53,629 - mmdet - INFO - Epoch [2][850/2101]	lr: 2.000e-02, eta: 2:03:35, time: 0.284, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 54.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 54.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 54.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:05:08,373 - mmdet - INFO - Epoch [2][900/2101]	lr: 2.000e-02, eta: 2:03:04, time: 0.295, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 53.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 53.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 53.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:05:22,617 - mmdet - INFO - Epoch [2][950/2101]	lr: 2.000e-02, eta: 2:02:30, time: 0.285, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 50.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 50.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 50.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:05:36,641 - mmdet - INFO - Epoch [2][1000/2101]	lr: 2.000e-02, eta: 2:01:55, time: 0.280, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 46.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 46.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 46.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:05:50,450 - mmdet - INFO - Epoch [2][1050/2101]	lr: 2.000e-02, eta: 2:01:19, time: 0.276, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 48.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 48.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 48.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:06:04,498 - mmdet - INFO - Epoch [2][1100/2101]	lr: 2.000e-02, eta: 2:00:46, time: 0.281, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 53.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 53.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 53.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:06:18,893 - mmdet - INFO - Epoch [2][1150/2101]	lr: 2.000e-02, eta: 2:00:16, time: 0.288, data_time: 0.021, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 44.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 44.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 44.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:06:33,590 - mmdet - INFO - Epoch [2][1200/2101]	lr: 2.000e-02, eta: 1:59:48, time: 0.294, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 56.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 56.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 56.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:06:48,097 - mmdet - INFO - Epoch [2][1250/2101]	lr: 2.000e-02, eta: 1:59:19, time: 0.290, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 50.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 50.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 50.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:07:02,805 - mmdet - INFO - Epoch [2][1300/2101]	lr: 2.000e-02, eta: 1:58:52, time: 0.294, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 44.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 44.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 44.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:07:17,078 - mmdet - INFO - Epoch [2][1350/2101]	lr: 2.000e-02, eta: 1:58:22, time: 0.285, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 52.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 52.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 52.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:07:31,134 - mmdet - INFO - Epoch [2][1400/2101]	lr: 2.000e-02, eta: 1:57:52, time: 0.281, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 47.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 47.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 47.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:07:45,711 - mmdet - INFO - Epoch [2][1450/2101]	lr: 2.000e-02, eta: 1:57:25, time: 0.292, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 48.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 48.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 48.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:08:00,624 - mmdet - INFO - Epoch [2][1500/2101]	lr: 2.000e-02, eta: 1:57:01, time: 0.298, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 46.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 46.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 46.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:08:15,065 - mmdet - INFO - Epoch [2][1550/2101]	lr: 2.000e-02, eta: 1:56:34, time: 0.289, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 55.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 55.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 55.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:08:29,119 - mmdet - INFO - Epoch [2][1600/2101]	lr: 2.000e-02, eta: 1:56:05, time: 0.281, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 57.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 57.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 57.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:08:42,429 - mmdet - INFO - Epoch [2][1650/2101]	lr: 2.000e-02, eta: 1:55:32, time: 0.266, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 42.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 42.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 42.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:08:57,138 - mmdet - INFO - Epoch [2][1700/2101]	lr: 2.000e-02, eta: 1:55:08, time: 0.294, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 42.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 42.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 42.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:09:11,723 - mmdet - INFO - Epoch [2][1750/2101]	lr: 2.000e-02, eta: 1:54:43, time: 0.292, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 56.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 56.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 56.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:09:26,224 - mmdet - INFO - Epoch [2][1800/2101]	lr: 2.000e-02, eta: 1:54:19, time: 0.290, data_time: 0.014, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 56.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 56.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 56.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:09:40,682 - mmdet - INFO - Epoch [2][1850/2101]	lr: 2.000e-02, eta: 1:53:54, time: 0.289, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 48.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 48.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 48.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:09:55,039 - mmdet - INFO - Epoch [2][1900/2101]	lr: 2.000e-02, eta: 1:53:28, time: 0.287, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 48.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 48.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 48.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:10:09,218 - mmdet - INFO - Epoch [2][1950/2101]	lr: 2.000e-02, eta: 1:53:03, time: 0.284, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 53.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 53.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 53.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:10:22,983 - mmdet - INFO - Epoch [2][2000/2101]	lr: 2.000e-02, eta: 1:52:35, time: 0.275, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 53.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 53.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 53.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:10:37,218 - mmdet - INFO - Epoch [2][2050/2101]	lr: 2.000e-02, eta: 1:52:10, time: 0.285, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 49.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 49.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 49.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:10:51,688 - mmdet - INFO - Epoch [2][2100/2101]	lr: 2.000e-02, eta: 1:51:46, time: 0.289, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 50.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 50.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 50.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:10:52,133 - mmdet - INFO - Saving checkpoint at 2 epochs
2022-05-03 10:12:34,569 - mmdet - INFO - Evaluating bbox...
2022-05-03 10:12:34,570 - mmdet - ERROR - The testing results of the whole dataset is empty.
2022-05-03 10:12:34,571 - mmdet - INFO - Exp name: crcnn_config.py
2022-05-03 10:12:34,571 - mmdet - INFO - Epoch(val) [2][1912]	
2022-05-03 10:12:51,027 - mmdet - INFO - Epoch [3][50/2101]	lr: 2.000e-02, eta: 1:51:31, time: 0.329, data_time: 0.048, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 48.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 48.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 48.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:13:05,068 - mmdet - INFO - Epoch [3][100/2101]	lr: 2.000e-02, eta: 1:51:06, time: 0.281, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 51.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 51.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 51.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:13:19,322 - mmdet - INFO - Epoch [3][150/2101]	lr: 2.000e-02, eta: 1:50:42, time: 0.285, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 51.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 51.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 51.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:13:32,982 - mmdet - INFO - Epoch [3][200/2101]	lr: 2.000e-02, eta: 1:50:15, time: 0.273, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 42.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 42.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 42.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:13:47,215 - mmdet - INFO - Epoch [3][250/2101]	lr: 2.000e-02, eta: 1:49:51, time: 0.285, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 50.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 50.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 50.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:14:01,283 - mmdet - INFO - Epoch [3][300/2101]	lr: 2.000e-02, eta: 1:49:27, time: 0.281, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 51.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 51.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 51.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:14:15,630 - mmdet - INFO - Epoch [3][350/2101]	lr: 2.000e-02, eta: 1:49:04, time: 0.287, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 59.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 59.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 59.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:14:29,081 - mmdet - INFO - Epoch [3][400/2101]	lr: 2.000e-02, eta: 1:48:38, time: 0.269, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 47.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 47.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 47.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:14:43,614 - mmdet - INFO - Epoch [3][450/2101]	lr: 2.000e-02, eta: 1:48:16, time: 0.291, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 57.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 57.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 57.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:14:57,838 - mmdet - INFO - Epoch [3][500/2101]	lr: 2.000e-02, eta: 1:47:54, time: 0.284, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 50.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 50.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 50.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:15:10,846 - mmdet - INFO - Epoch [3][550/2101]	lr: 2.000e-02, eta: 1:47:26, time: 0.260, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 47.1667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 47.1667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 47.1667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:15:25,445 - mmdet - INFO - Epoch [3][600/2101]	lr: 2.000e-02, eta: 1:47:05, time: 0.292, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 48.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 48.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 48.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:15:39,802 - mmdet - INFO - Epoch [3][650/2101]	lr: 2.000e-02, eta: 1:46:44, time: 0.287, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 50.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 50.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 50.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:15:54,324 - mmdet - INFO - Epoch [3][700/2101]	lr: 2.000e-02, eta: 1:46:23, time: 0.290, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 57.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 57.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 57.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:16:08,371 - mmdet - INFO - Epoch [3][750/2101]	lr: 2.000e-02, eta: 1:46:01, time: 0.281, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 45.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 45.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 45.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:16:22,057 - mmdet - INFO - Epoch [3][800/2101]	lr: 2.000e-02, eta: 1:45:37, time: 0.274, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 49.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 49.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 49.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:16:35,841 - mmdet - INFO - Epoch [3][850/2101]	lr: 2.000e-02, eta: 1:45:14, time: 0.276, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 45.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 45.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 45.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:16:49,711 - mmdet - INFO - Epoch [3][900/2101]	lr: 2.000e-02, eta: 1:44:51, time: 0.277, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 48.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 48.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 48.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:17:03,914 - mmdet - INFO - Epoch [3][950/2101]	lr: 2.000e-02, eta: 1:44:30, time: 0.284, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 53.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 53.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 53.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:17:18,518 - mmdet - INFO - Epoch [3][1000/2101]	lr: 2.000e-02, eta: 1:44:10, time: 0.292, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 46.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 46.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 46.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:17:32,769 - mmdet - INFO - Epoch [3][1050/2101]	lr: 2.000e-02, eta: 1:43:49, time: 0.285, data_time: 0.010, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 56.3333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 56.3333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 56.3333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:17:46,247 - mmdet - INFO - Epoch [3][1100/2101]	lr: 2.000e-02, eta: 1:43:26, time: 0.270, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 51.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 51.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 51.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:18:00,249 - mmdet - INFO - Epoch [3][1150/2101]	lr: 2.000e-02, eta: 1:43:04, time: 0.280, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 52.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 52.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 52.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:18:14,680 - mmdet - INFO - Epoch [3][1200/2101]	lr: 2.000e-02, eta: 1:42:44, time: 0.289, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 50.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 50.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 50.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:18:28,388 - mmdet - INFO - Epoch [3][1250/2101]	lr: 2.000e-02, eta: 1:42:22, time: 0.274, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 59.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 59.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 59.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:18:42,995 - mmdet - INFO - Epoch [3][1300/2101]	lr: 2.000e-02, eta: 1:42:03, time: 0.292, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 51.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 51.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 51.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:18:57,255 - mmdet - INFO - Epoch [3][1350/2101]	lr: 2.000e-02, eta: 1:41:43, time: 0.285, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 47.8333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 47.8333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 47.8333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:19:10,910 - mmdet - INFO - Epoch [3][1400/2101]	lr: 2.000e-02, eta: 1:41:21, time: 0.273, data_time: 0.005, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 48.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 48.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 48.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:19:24,910 - mmdet - INFO - Epoch [3][1450/2101]	lr: 2.000e-02, eta: 1:41:00, time: 0.280, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 46.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 46.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 46.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:19:38,493 - mmdet - INFO - Epoch [3][1500/2101]	lr: 2.000e-02, eta: 1:40:38, time: 0.272, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 50.8333, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 50.8333, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 50.8333, s2.loss_bbox: nan, loss: nan
2022-05-03 10:19:52,304 - mmdet - INFO - Epoch [3][1550/2101]	lr: 2.000e-02, eta: 1:40:17, time: 0.276, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 54.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 54.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 54.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:20:06,398 - mmdet - INFO - Epoch [3][1600/2101]	lr: 2.000e-02, eta: 1:39:57, time: 0.282, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 49.6667, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 49.6667, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 49.6667, s2.loss_bbox: nan, loss: nan
2022-05-03 10:20:20,583 - mmdet - INFO - Epoch [3][1650/2101]	lr: 2.000e-02, eta: 1:39:38, time: 0.284, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 43.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 43.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 43.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:20:34,578 - mmdet - INFO - Epoch [3][1700/2101]	lr: 2.000e-02, eta: 1:39:17, time: 0.280, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 47.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 47.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 47.0000, s2.loss_bbox: nan, loss: nan
2022-05-03 10:20:49,126 - mmdet - INFO - Epoch [3][1750/2101]	lr: 2.000e-02, eta: 1:38:59, time: 0.291, data_time: 0.004, memory: 4024, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 53.0000, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 53.0000, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 53.0000, s2.loss_bbox: nan, loss: nan
