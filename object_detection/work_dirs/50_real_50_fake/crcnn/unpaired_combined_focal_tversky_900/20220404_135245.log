2022-04-04 13:52:45,949 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0
NVCC: 
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.7.1+cu110
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2+cu110
OpenCV: 4.5.5
MMCV: 1.4.8
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.23.0+21b6da3
------------------------------------------------------------

2022-04-04 13:52:46,638 - mmdet - INFO - Distributed training: False
2022-04-04 13:52:47,320 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained',
                      checkpoint='torchvision://resnet101')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=2,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'COCODataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/composed/50_real_50_fake/helper/annotation/unpaired_combined_focal_tversky_900.json',
        img_prefix=
        '../dataset/xray/composed/50_real_50_fake/unpaired_combined_focal_tversky_900/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ],
        classes=('FIREARM', 'KNIFE')),
    val=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',
        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('FIREARM', 'KNIFE')),
    test=dict(
        type='CocoDataset',
        ann_file=
        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',
        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('FIREARM', 'KNIFE')))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
classes = ('FIREARM', 'KNIFE')
work_dir = 'work_dirs/50_real_50_fake/crcnn/unpaired_combined_focal_tversky_900/'
auto_resume = False
gpu_ids = [0]

2022-04-04 13:52:47,320 - mmdet - INFO - Set random seed to 976838231, deterministic: False
2022-04-04 13:52:48,000 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
2022-04-04 13:52:48,406 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2022-04-04 13:52:48,429 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2022-04-04 13:52:48,436 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-04 13:52:48,518 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-04 13:52:48,600 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([3, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2022-04-04 13:52:52,159 - mmdet - INFO - load checkpoint from local path: ./checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth
2022-04-04 13:52:52,480 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([3, 1024]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([3]).
2022-04-04 13:52:52,493 - mmdet - INFO - Start running, host: dflc39@gpu5, work_dir: /home2/dflc39/ADAM_DISS/xray_image_synthesis/object_detection/work_dirs/50_real_50_fake/crcnn/unpaired_combined_focal_tversky_900
2022-04-04 13:52:52,493 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-04-04 13:52:52,493 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2022-04-04 13:52:52,493 - mmdet - INFO - Checkpoints will be saved to /home2/dflc39/ADAM_DISS/xray_image_synthesis/object_detection/work_dirs/50_real_50_fake/crcnn/unpaired_combined_focal_tversky_900 by HardDiskBackend.
2022-04-04 13:53:10,559 - mmdet - INFO - Epoch [1][50/2115]	lr: 1.978e-03, eta: 2:32:27, time: 0.361, data_time: 0.047, memory: 4026, loss_rpn_cls: 0.0467, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.2764, s0.acc: 95.9863, s0.loss_bbox: 0.0397, s1.loss_cls: 0.1719, s1.acc: 85.6465, s1.loss_bbox: 0.0238, s2.loss_cls: 0.0764, s2.acc: 88.4492, s2.loss_bbox: 0.0074, loss: 0.6491
2022-04-04 13:53:26,337 - mmdet - INFO - Epoch [1][100/2115]	lr: 3.976e-03, eta: 2:22:33, time: 0.316, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0439, loss_rpn_bbox: 0.0113, s0.loss_cls: 0.1043, s0.acc: 97.1953, s0.loss_bbox: 0.0337, s1.loss_cls: 0.0525, s1.acc: 97.1074, s1.loss_bbox: 0.0308, s2.loss_cls: 0.0243, s2.acc: 97.5781, s2.loss_bbox: 0.0137, loss: 0.3145
2022-04-04 13:53:42,291 - mmdet - INFO - Epoch [1][150/2115]	lr: 5.974e-03, eta: 2:19:34, time: 0.319, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0386, loss_rpn_bbox: 0.0095, s0.loss_cls: 0.0880, s0.acc: 97.7090, s0.loss_bbox: 0.0315, s1.loss_cls: 0.0413, s1.acc: 97.7188, s1.loss_bbox: 0.0289, s2.loss_cls: 0.0187, s2.acc: 97.8008, s2.loss_bbox: 0.0134, loss: 0.2699
2022-04-04 13:53:58,376 - mmdet - INFO - Epoch [1][200/2115]	lr: 7.972e-03, eta: 2:18:13, time: 0.322, data_time: 0.004, memory: 4026, loss_rpn_cls: 0.0316, loss_rpn_bbox: 0.0067, s0.loss_cls: 0.0892, s0.acc: 97.8496, s0.loss_bbox: 0.0340, s1.loss_cls: 0.0395, s1.acc: 98.0117, s1.loss_bbox: 0.0288, s2.loss_cls: 0.0167, s2.acc: 98.3164, s2.loss_bbox: 0.0133, loss: 0.2598
2022-04-04 13:54:14,527 - mmdet - INFO - Epoch [1][250/2115]	lr: 9.970e-03, eta: 2:17:24, time: 0.323, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0342, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.0766, s0.acc: 97.8203, s0.loss_bbox: 0.0295, s1.loss_cls: 0.0380, s1.acc: 97.7070, s1.loss_bbox: 0.0278, s2.loss_cls: 0.0173, s2.acc: 97.8379, s2.loss_bbox: 0.0143, loss: 0.2463
2022-04-04 13:54:30,665 - mmdet - INFO - Epoch [1][300/2115]	lr: 1.197e-02, eta: 2:16:46, time: 0.323, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0336, loss_rpn_bbox: 0.0115, s0.loss_cls: 0.0723, s0.acc: 98.2090, s0.loss_bbox: 0.0280, s1.loss_cls: 0.0345, s1.acc: 98.0723, s1.loss_bbox: 0.0277, s2.loss_cls: 0.0153, s2.acc: 97.9883, s2.loss_bbox: 0.0139, loss: 0.2367
2022-04-04 13:54:46,731 - mmdet - INFO - Epoch [1][350/2115]	lr: 1.397e-02, eta: 2:16:08, time: 0.321, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0375, loss_rpn_bbox: 0.0123, s0.loss_cls: 0.0741, s0.acc: 97.9941, s0.loss_bbox: 0.0285, s1.loss_cls: 0.0356, s1.acc: 97.8945, s1.loss_bbox: 0.0316, s2.loss_cls: 0.0159, s2.acc: 97.9414, s2.loss_bbox: 0.0169, loss: 0.2525
2022-04-04 13:55:02,781 - mmdet - INFO - Epoch [1][400/2115]	lr: 1.596e-02, eta: 2:15:35, time: 0.321, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0291, loss_rpn_bbox: 0.0062, s0.loss_cls: 0.0619, s0.acc: 98.4141, s0.loss_bbox: 0.0268, s1.loss_cls: 0.0285, s1.acc: 98.4668, s1.loss_bbox: 0.0267, s2.loss_cls: 0.0127, s2.acc: 98.3652, s2.loss_bbox: 0.0131, loss: 0.2050
2022-04-04 13:55:18,758 - mmdet - INFO - Epoch [1][450/2115]	lr: 1.796e-02, eta: 2:15:02, time: 0.320, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0289, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0684, s0.acc: 98.2344, s0.loss_bbox: 0.0282, s1.loss_cls: 0.0318, s1.acc: 98.2168, s1.loss_bbox: 0.0286, s2.loss_cls: 0.0145, s2.acc: 98.1895, s2.loss_bbox: 0.0153, loss: 0.2230
2022-04-04 13:55:34,907 - mmdet - INFO - Epoch [1][500/2115]	lr: 1.996e-02, eta: 2:14:41, time: 0.323, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0294, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.0728, s0.acc: 98.1230, s0.loss_bbox: 0.0317, s1.loss_cls: 0.0320, s1.acc: 98.1953, s1.loss_bbox: 0.0304, s2.loss_cls: 0.0142, s2.acc: 98.1367, s2.loss_bbox: 0.0156, loss: 0.2348
2022-04-04 13:55:51,024 - mmdet - INFO - Epoch [1][550/2115]	lr: 2.000e-02, eta: 2:14:19, time: 0.322, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0429, loss_rpn_bbox: 0.0084, s0.loss_cls: 0.0777, s0.acc: 98.0449, s0.loss_bbox: 0.0279, s1.loss_cls: 0.0373, s1.acc: 97.8984, s1.loss_bbox: 0.0291, s2.loss_cls: 0.0159, s2.acc: 98.0586, s2.loss_bbox: 0.0168, loss: 0.2561
2022-04-04 13:56:07,135 - mmdet - INFO - Epoch [1][600/2115]	lr: 2.000e-02, eta: 2:13:58, time: 0.322, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0410, loss_rpn_bbox: 0.0119, s0.loss_cls: 0.0568, s0.acc: 98.4297, s0.loss_bbox: 0.0225, s1.loss_cls: 0.0262, s1.acc: 98.4844, s1.loss_bbox: 0.0242, s2.loss_cls: 0.0120, s2.acc: 98.4922, s2.loss_bbox: 0.0137, loss: 0.2083
2022-04-04 13:56:23,330 - mmdet - INFO - Epoch [1][650/2115]	lr: 2.000e-02, eta: 2:13:40, time: 0.324, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0309, loss_rpn_bbox: 0.0077, s0.loss_cls: 0.0671, s0.acc: 98.3613, s0.loss_bbox: 0.0262, s1.loss_cls: 0.0290, s1.acc: 98.4141, s1.loss_bbox: 0.0286, s2.loss_cls: 0.0134, s2.acc: 98.5430, s2.loss_bbox: 0.0176, loss: 0.2206
2022-04-04 13:56:39,600 - mmdet - INFO - Epoch [1][700/2115]	lr: 2.000e-02, eta: 2:13:26, time: 0.325, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0274, loss_rpn_bbox: 0.0080, s0.loss_cls: 0.0567, s0.acc: 98.4766, s0.loss_bbox: 0.0257, s1.loss_cls: 0.0257, s1.acc: 98.3672, s1.loss_bbox: 0.0269, s2.loss_cls: 0.0118, s2.acc: 98.3516, s2.loss_bbox: 0.0197, loss: 0.2019
2022-04-04 13:56:55,831 - mmdet - INFO - Epoch [1][750/2115]	lr: 2.000e-02, eta: 2:13:10, time: 0.325, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0315, loss_rpn_bbox: 0.0094, s0.loss_cls: 0.0685, s0.acc: 98.3496, s0.loss_bbox: 0.0285, s1.loss_cls: 0.0298, s1.acc: 98.5059, s1.loss_bbox: 0.0293, s2.loss_cls: 0.0131, s2.acc: 98.5430, s2.loss_bbox: 0.0168, loss: 0.2269
2022-04-04 13:57:12,188 - mmdet - INFO - Epoch [1][800/2115]	lr: 2.000e-02, eta: 2:12:58, time: 0.327, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0328, loss_rpn_bbox: 0.0108, s0.loss_cls: 0.0599, s0.acc: 98.3926, s0.loss_bbox: 0.0271, s1.loss_cls: 0.0289, s1.acc: 98.3887, s1.loss_bbox: 0.0315, s2.loss_cls: 0.0123, s2.acc: 98.4531, s2.loss_bbox: 0.0174, loss: 0.2206
2022-04-04 13:57:28,420 - mmdet - INFO - Epoch [1][850/2115]	lr: 2.000e-02, eta: 2:12:42, time: 0.325, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0223, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.0765, s0.acc: 97.8789, s0.loss_bbox: 0.0378, s1.loss_cls: 0.0362, s1.acc: 97.6387, s1.loss_bbox: 0.0406, s2.loss_cls: 0.0163, s2.acc: 97.7969, s2.loss_bbox: 0.0203, loss: 0.2587
2022-04-04 13:57:44,783 - mmdet - INFO - Epoch [1][900/2115]	lr: 2.000e-02, eta: 2:12:29, time: 0.327, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0250, loss_rpn_bbox: 0.0085, s0.loss_cls: 0.0657, s0.acc: 98.2168, s0.loss_bbox: 0.0282, s1.loss_cls: 0.0304, s1.acc: 98.1973, s1.loss_bbox: 0.0354, s2.loss_cls: 0.0146, s2.acc: 98.1172, s2.loss_bbox: 0.0233, loss: 0.2311
2022-04-04 13:58:01,009 - mmdet - INFO - Epoch [1][950/2115]	lr: 2.000e-02, eta: 2:12:13, time: 0.325, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0359, loss_rpn_bbox: 0.0113, s0.loss_cls: 0.0619, s0.acc: 98.3652, s0.loss_bbox: 0.0278, s1.loss_cls: 0.0289, s1.acc: 98.3398, s1.loss_bbox: 0.0316, s2.loss_cls: 0.0129, s2.acc: 98.4512, s2.loss_bbox: 0.0189, loss: 0.2293
2022-04-04 13:58:17,166 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 13:58:17,166 - mmdet - INFO - Epoch [1][1000/2115]	lr: 2.000e-02, eta: 2:11:55, time: 0.323, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0280, loss_rpn_bbox: 0.0093, s0.loss_cls: 0.0684, s0.acc: 98.1367, s0.loss_bbox: 0.0309, s1.loss_cls: 0.0300, s1.acc: 98.2598, s1.loss_bbox: 0.0308, s2.loss_cls: 0.0130, s2.acc: 98.4004, s2.loss_bbox: 0.0175, loss: 0.2279
2022-04-04 13:58:33,426 - mmdet - INFO - Epoch [1][1050/2115]	lr: 2.000e-02, eta: 2:11:39, time: 0.325, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0292, loss_rpn_bbox: 0.0084, s0.loss_cls: 0.0625, s0.acc: 98.1621, s0.loss_bbox: 0.0281, s1.loss_cls: 0.0296, s1.acc: 98.2109, s1.loss_bbox: 0.0323, s2.loss_cls: 0.0133, s2.acc: 98.2988, s2.loss_bbox: 0.0195, loss: 0.2228
2022-04-04 13:58:49,698 - mmdet - INFO - Epoch [1][1100/2115]	lr: 2.000e-02, eta: 2:11:24, time: 0.325, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0257, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0620, s0.acc: 98.1836, s0.loss_bbox: 0.0289, s1.loss_cls: 0.0294, s1.acc: 98.2207, s1.loss_bbox: 0.0344, s2.loss_cls: 0.0129, s2.acc: 98.2637, s2.loss_bbox: 0.0219, loss: 0.2224
2022-04-04 13:59:05,706 - mmdet - INFO - Epoch [1][1150/2115]	lr: 2.000e-02, eta: 2:11:03, time: 0.320, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0275, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0620, s0.acc: 98.2695, s0.loss_bbox: 0.0259, s1.loss_cls: 0.0312, s1.acc: 98.2285, s1.loss_bbox: 0.0333, s2.loss_cls: 0.0153, s2.acc: 98.0859, s2.loss_bbox: 0.0212, loss: 0.2240
2022-04-04 13:59:21,867 - mmdet - INFO - Epoch [1][1200/2115]	lr: 2.000e-02, eta: 2:10:45, time: 0.323, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0351, loss_rpn_bbox: 0.0108, s0.loss_cls: 0.0764, s0.acc: 98.0176, s0.loss_bbox: 0.0291, s1.loss_cls: 0.0364, s1.acc: 98.0508, s1.loss_bbox: 0.0315, s2.loss_cls: 0.0159, s2.acc: 98.2109, s2.loss_bbox: 0.0179, loss: 0.2532
2022-04-04 13:59:38,116 - mmdet - INFO - Epoch [1][1250/2115]	lr: 2.000e-02, eta: 2:10:29, time: 0.325, data_time: 0.006, memory: 4027, loss_rpn_cls: 0.0272, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0587, s0.acc: 98.3867, s0.loss_bbox: 0.0251, s1.loss_cls: 0.0269, s1.acc: 98.3945, s1.loss_bbox: 0.0297, s2.loss_cls: 0.0129, s2.acc: 98.3945, s2.loss_bbox: 0.0206, loss: 0.2082
2022-04-04 13:59:54,197 - mmdet - INFO - Epoch [1][1300/2115]	lr: 2.000e-02, eta: 2:10:10, time: 0.322, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0264, loss_rpn_bbox: 0.0079, s0.loss_cls: 0.0639, s0.acc: 98.3535, s0.loss_bbox: 0.0287, s1.loss_cls: 0.0310, s1.acc: 98.4219, s1.loss_bbox: 0.0334, s2.loss_cls: 0.0131, s2.acc: 98.5645, s2.loss_bbox: 0.0223, loss: 0.2267
2022-04-04 14:00:10,360 - mmdet - INFO - Epoch [1][1350/2115]	lr: 2.000e-02, eta: 2:09:53, time: 0.323, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0194, loss_rpn_bbox: 0.0069, s0.loss_cls: 0.0676, s0.acc: 98.0625, s0.loss_bbox: 0.0297, s1.loss_cls: 0.0319, s1.acc: 98.0117, s1.loss_bbox: 0.0342, s2.loss_cls: 0.0152, s2.acc: 97.9805, s2.loss_bbox: 0.0206, loss: 0.2255
2022-04-04 14:00:26,569 - mmdet - INFO - Epoch [1][1400/2115]	lr: 2.000e-02, eta: 2:09:37, time: 0.324, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0242, loss_rpn_bbox: 0.0072, s0.loss_cls: 0.0577, s0.acc: 98.6133, s0.loss_bbox: 0.0253, s1.loss_cls: 0.0228, s1.acc: 98.8496, s1.loss_bbox: 0.0278, s2.loss_cls: 0.0094, s2.acc: 99.0781, s2.loss_bbox: 0.0194, loss: 0.1936
2022-04-04 14:00:42,615 - mmdet - INFO - Epoch [1][1450/2115]	lr: 2.000e-02, eta: 2:09:18, time: 0.321, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0221, loss_rpn_bbox: 0.0059, s0.loss_cls: 0.0686, s0.acc: 98.2793, s0.loss_bbox: 0.0290, s1.loss_cls: 0.0293, s1.acc: 98.4922, s1.loss_bbox: 0.0325, s2.loss_cls: 0.0135, s2.acc: 98.5820, s2.loss_bbox: 0.0216, loss: 0.2226
2022-04-04 14:00:58,787 - mmdet - INFO - Epoch [1][1500/2115]	lr: 2.000e-02, eta: 2:09:01, time: 0.323, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0236, loss_rpn_bbox: 0.0075, s0.loss_cls: 0.0811, s0.acc: 97.9258, s0.loss_bbox: 0.0339, s1.loss_cls: 0.0353, s1.acc: 98.0840, s1.loss_bbox: 0.0349, s2.loss_cls: 0.0148, s2.acc: 98.2207, s2.loss_bbox: 0.0202, loss: 0.2511
2022-04-04 14:01:14,946 - mmdet - INFO - Epoch [1][1550/2115]	lr: 2.000e-02, eta: 2:08:44, time: 0.323, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0264, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0615, s0.acc: 98.3555, s0.loss_bbox: 0.0264, s1.loss_cls: 0.0291, s1.acc: 98.3867, s1.loss_bbox: 0.0311, s2.loss_cls: 0.0130, s2.acc: 98.5723, s2.loss_bbox: 0.0207, loss: 0.2150
2022-04-04 14:01:30,915 - mmdet - INFO - Epoch [1][1600/2115]	lr: 2.000e-02, eta: 2:08:24, time: 0.319, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0219, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0623, s0.acc: 98.4512, s0.loss_bbox: 0.0284, s1.loss_cls: 0.0287, s1.acc: 98.4902, s1.loss_bbox: 0.0332, s2.loss_cls: 0.0128, s2.acc: 98.6055, s2.loss_bbox: 0.0196, loss: 0.2140
2022-04-04 14:01:46,942 - mmdet - INFO - Epoch [1][1650/2115]	lr: 2.000e-02, eta: 2:08:06, time: 0.321, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0214, loss_rpn_bbox: 0.0058, s0.loss_cls: 0.0561, s0.acc: 98.1523, s0.loss_bbox: 0.0262, s1.loss_cls: 0.0274, s1.acc: 98.2031, s1.loss_bbox: 0.0364, s2.loss_cls: 0.0135, s2.acc: 98.2266, s2.loss_bbox: 0.0260, loss: 0.2129
2022-04-04 14:02:02,988 - mmdet - INFO - Epoch [1][1700/2115]	lr: 2.000e-02, eta: 2:07:47, time: 0.321, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0387, loss_rpn_bbox: 0.0102, s0.loss_cls: 0.0585, s0.acc: 98.3418, s0.loss_bbox: 0.0260, s1.loss_cls: 0.0266, s1.acc: 98.4551, s1.loss_bbox: 0.0319, s2.loss_cls: 0.0116, s2.acc: 98.7637, s2.loss_bbox: 0.0201, loss: 0.2237
2022-04-04 14:02:19,299 - mmdet - INFO - Epoch [1][1750/2115]	lr: 2.000e-02, eta: 2:07:33, time: 0.326, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0250, loss_rpn_bbox: 0.0085, s0.loss_cls: 0.0568, s0.acc: 98.4082, s0.loss_bbox: 0.0244, s1.loss_cls: 0.0278, s1.acc: 98.3789, s1.loss_bbox: 0.0293, s2.loss_cls: 0.0135, s2.acc: 98.2891, s2.loss_bbox: 0.0220, loss: 0.2073
2022-04-04 14:02:35,434 - mmdet - INFO - Epoch [1][1800/2115]	lr: 2.000e-02, eta: 2:07:16, time: 0.323, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0208, loss_rpn_bbox: 0.0074, s0.loss_cls: 0.0522, s0.acc: 98.5781, s0.loss_bbox: 0.0240, s1.loss_cls: 0.0254, s1.acc: 98.6641, s1.loss_bbox: 0.0317, s2.loss_cls: 0.0115, s2.acc: 98.7266, s2.loss_bbox: 0.0226, loss: 0.1956
2022-04-04 14:02:51,651 - mmdet - INFO - Epoch [1][1850/2115]	lr: 2.000e-02, eta: 2:07:00, time: 0.324, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0278, loss_rpn_bbox: 0.0106, s0.loss_cls: 0.0606, s0.acc: 98.4531, s0.loss_bbox: 0.0272, s1.loss_cls: 0.0261, s1.acc: 98.5371, s1.loss_bbox: 0.0309, s2.loss_cls: 0.0114, s2.acc: 98.7441, s2.loss_bbox: 0.0204, loss: 0.2150
2022-04-04 14:03:07,846 - mmdet - INFO - Epoch [1][1900/2115]	lr: 2.000e-02, eta: 2:06:44, time: 0.324, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0242, loss_rpn_bbox: 0.0063, s0.loss_cls: 0.0580, s0.acc: 98.4414, s0.loss_bbox: 0.0255, s1.loss_cls: 0.0277, s1.acc: 98.3809, s1.loss_bbox: 0.0335, s2.loss_cls: 0.0125, s2.acc: 98.4062, s2.loss_bbox: 0.0200, loss: 0.2078
2022-04-04 14:03:24,030 - mmdet - INFO - Epoch [1][1950/2115]	lr: 2.000e-02, eta: 2:06:27, time: 0.324, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0262, loss_rpn_bbox: 0.0067, s0.loss_cls: 0.0605, s0.acc: 98.3809, s0.loss_bbox: 0.0276, s1.loss_cls: 0.0279, s1.acc: 98.4355, s1.loss_bbox: 0.0343, s2.loss_cls: 0.0126, s2.acc: 98.4043, s2.loss_bbox: 0.0211, loss: 0.2170
2022-04-04 14:03:40,447 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 14:03:40,447 - mmdet - INFO - Epoch [1][2000/2115]	lr: 2.000e-02, eta: 2:06:14, time: 0.328, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0269, loss_rpn_bbox: 0.0096, s0.loss_cls: 0.0649, s0.acc: 98.2422, s0.loss_bbox: 0.0285, s1.loss_cls: 0.0293, s1.acc: 98.4414, s1.loss_bbox: 0.0339, s2.loss_cls: 0.0138, s2.acc: 98.4746, s2.loss_bbox: 0.0214, loss: 0.2284
2022-04-04 14:03:56,781 - mmdet - INFO - Epoch [1][2050/2115]	lr: 2.000e-02, eta: 2:05:59, time: 0.327, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0211, loss_rpn_bbox: 0.0078, s0.loss_cls: 0.0607, s0.acc: 98.2891, s0.loss_bbox: 0.0280, s1.loss_cls: 0.0289, s1.acc: 98.2012, s1.loss_bbox: 0.0350, s2.loss_cls: 0.0134, s2.acc: 98.2812, s2.loss_bbox: 0.0208, loss: 0.2156
2022-04-04 14:04:13,181 - mmdet - INFO - Epoch [1][2100/2115]	lr: 2.000e-02, eta: 2:05:45, time: 0.328, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0264, loss_rpn_bbox: 0.0113, s0.loss_cls: 0.0580, s0.acc: 98.5234, s0.loss_bbox: 0.0244, s1.loss_cls: 0.0271, s1.acc: 98.6230, s1.loss_bbox: 0.0286, s2.loss_cls: 0.0109, s2.acc: 98.9102, s2.loss_bbox: 0.0172, loss: 0.2039
2022-04-04 14:04:18,133 - mmdet - INFO - Saving checkpoint at 1 epochs
2022-04-04 14:06:38,457 - mmdet - INFO - Evaluating bbox...
2022-04-04 14:06:39,362 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.225
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.423
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.219
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.238
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.313
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.313
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.313
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.313
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000

2022-04-04 14:06:39,380 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 14:06:39,380 - mmdet - INFO - Epoch(val) [1][1918]	bbox_mAP: 0.2250, bbox_mAP_50: 0.4230, bbox_mAP_75: 0.2190, bbox_mAP_s: 0.2380, bbox_mAP_m: -1.0000, bbox_mAP_l: -1.0000, bbox_mAP_copypaste: 0.225 0.423 0.219 0.238 -1.000 -1.000
2022-04-04 14:06:58,452 - mmdet - INFO - Epoch [2][50/2115]	lr: 2.000e-02, eta: 2:05:03, time: 0.381, data_time: 0.047, memory: 4027, loss_rpn_cls: 0.0236, loss_rpn_bbox: 0.0097, s0.loss_cls: 0.0572, s0.acc: 98.4395, s0.loss_bbox: 0.0255, s1.loss_cls: 0.0257, s1.acc: 98.4766, s1.loss_bbox: 0.0328, s2.loss_cls: 0.0122, s2.acc: 98.4160, s2.loss_bbox: 0.0208, loss: 0.2076
2022-04-04 14:07:15,728 - mmdet - INFO - Epoch [2][100/2115]	lr: 2.000e-02, eta: 2:04:58, time: 0.346, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0275, loss_rpn_bbox: 0.0070, s0.loss_cls: 0.0643, s0.acc: 98.3438, s0.loss_bbox: 0.0258, s1.loss_cls: 0.0304, s1.acc: 98.3555, s1.loss_bbox: 0.0285, s2.loss_cls: 0.0127, s2.acc: 98.6230, s2.loss_bbox: 0.0177, loss: 0.2140
2022-04-04 14:07:33,282 - mmdet - INFO - Epoch [2][150/2115]	lr: 2.000e-02, eta: 2:04:56, time: 0.351, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0258, loss_rpn_bbox: 0.0076, s0.loss_cls: 0.0547, s0.acc: 98.4844, s0.loss_bbox: 0.0232, s1.loss_cls: 0.0266, s1.acc: 98.4121, s1.loss_bbox: 0.0321, s2.loss_cls: 0.0131, s2.acc: 98.2598, s2.loss_bbox: 0.0221, loss: 0.2054
2022-04-04 14:07:51,079 - mmdet - INFO - Epoch [2][200/2115]	lr: 2.000e-02, eta: 2:04:55, time: 0.356, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0230, loss_rpn_bbox: 0.0072, s0.loss_cls: 0.0606, s0.acc: 98.1387, s0.loss_bbox: 0.0255, s1.loss_cls: 0.0315, s1.acc: 97.9102, s1.loss_bbox: 0.0356, s2.loss_cls: 0.0150, s2.acc: 97.9648, s2.loss_bbox: 0.0226, loss: 0.2210
2022-04-04 14:08:08,643 - mmdet - INFO - Epoch [2][250/2115]	lr: 2.000e-02, eta: 2:04:52, time: 0.351, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0290, loss_rpn_bbox: 0.0093, s0.loss_cls: 0.0591, s0.acc: 98.3223, s0.loss_bbox: 0.0261, s1.loss_cls: 0.0290, s1.acc: 98.1855, s1.loss_bbox: 0.0322, s2.loss_cls: 0.0128, s2.acc: 98.3301, s2.loss_bbox: 0.0177, loss: 0.2152
2022-04-04 14:08:26,399 - mmdet - INFO - Epoch [2][300/2115]	lr: 2.000e-02, eta: 2:04:50, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0176, loss_rpn_bbox: 0.0066, s0.loss_cls: 0.0579, s0.acc: 98.3105, s0.loss_bbox: 0.0270, s1.loss_cls: 0.0279, s1.acc: 98.3926, s1.loss_bbox: 0.0322, s2.loss_cls: 0.0138, s2.acc: 98.1699, s2.loss_bbox: 0.0195, loss: 0.2025
2022-04-04 14:08:44,163 - mmdet - INFO - Epoch [2][350/2115]	lr: 2.000e-02, eta: 2:04:47, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0250, loss_rpn_bbox: 0.0061, s0.loss_cls: 0.0477, s0.acc: 98.7344, s0.loss_bbox: 0.0219, s1.loss_cls: 0.0224, s1.acc: 98.7715, s1.loss_bbox: 0.0280, s2.loss_cls: 0.0104, s2.acc: 98.8184, s2.loss_bbox: 0.0200, loss: 0.1815
2022-04-04 14:09:02,003 - mmdet - INFO - Epoch [2][400/2115]	lr: 2.000e-02, eta: 2:04:44, time: 0.357, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0292, loss_rpn_bbox: 0.0053, s0.loss_cls: 0.0486, s0.acc: 98.6562, s0.loss_bbox: 0.0269, s1.loss_cls: 0.0229, s1.acc: 98.7188, s1.loss_bbox: 0.0369, s2.loss_cls: 0.0117, s2.acc: 98.5469, s2.loss_bbox: 0.0256, loss: 0.2072
2022-04-04 14:09:19,751 - mmdet - INFO - Epoch [2][450/2115]	lr: 2.000e-02, eta: 2:04:40, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0242, loss_rpn_bbox: 0.0074, s0.loss_cls: 0.0568, s0.acc: 98.4688, s0.loss_bbox: 0.0250, s1.loss_cls: 0.0234, s1.acc: 98.7090, s1.loss_bbox: 0.0265, s2.loss_cls: 0.0101, s2.acc: 98.7871, s2.loss_bbox: 0.0181, loss: 0.1916
2022-04-04 14:09:37,554 - mmdet - INFO - Epoch [2][500/2115]	lr: 2.000e-02, eta: 2:04:36, time: 0.356, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0206, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0564, s0.acc: 98.3730, s0.loss_bbox: 0.0307, s1.loss_cls: 0.0274, s1.acc: 98.3066, s1.loss_bbox: 0.0376, s2.loss_cls: 0.0129, s2.acc: 98.3359, s2.loss_bbox: 0.0218, loss: 0.2145
2022-04-04 14:09:55,318 - mmdet - INFO - Epoch [2][550/2115]	lr: 2.000e-02, eta: 2:04:31, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0233, loss_rpn_bbox: 0.0082, s0.loss_cls: 0.0572, s0.acc: 98.3750, s0.loss_bbox: 0.0275, s1.loss_cls: 0.0266, s1.acc: 98.3633, s1.loss_bbox: 0.0321, s2.loss_cls: 0.0119, s2.acc: 98.5078, s2.loss_bbox: 0.0207, loss: 0.2075
2022-04-04 14:10:13,080 - mmdet - INFO - Epoch [2][600/2115]	lr: 2.000e-02, eta: 2:04:26, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0204, loss_rpn_bbox: 0.0048, s0.loss_cls: 0.0545, s0.acc: 98.5742, s0.loss_bbox: 0.0245, s1.loss_cls: 0.0259, s1.acc: 98.5371, s1.loss_bbox: 0.0355, s2.loss_cls: 0.0107, s2.acc: 98.7383, s2.loss_bbox: 0.0243, loss: 0.2006
2022-04-04 14:10:30,733 - mmdet - INFO - Epoch [2][650/2115]	lr: 2.000e-02, eta: 2:04:19, time: 0.353, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0191, loss_rpn_bbox: 0.0064, s0.loss_cls: 0.0559, s0.acc: 98.5488, s0.loss_bbox: 0.0228, s1.loss_cls: 0.0240, s1.acc: 98.7227, s1.loss_bbox: 0.0288, s2.loss_cls: 0.0107, s2.acc: 98.8984, s2.loss_bbox: 0.0199, loss: 0.1875
2022-04-04 14:10:48,349 - mmdet - INFO - Epoch [2][700/2115]	lr: 2.000e-02, eta: 2:04:11, time: 0.352, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0229, loss_rpn_bbox: 0.0059, s0.loss_cls: 0.0631, s0.acc: 98.4277, s0.loss_bbox: 0.0288, s1.loss_cls: 0.0251, s1.acc: 98.6680, s1.loss_bbox: 0.0308, s2.loss_cls: 0.0105, s2.acc: 98.8809, s2.loss_bbox: 0.0192, loss: 0.2062
2022-04-04 14:11:06,012 - mmdet - INFO - Epoch [2][750/2115]	lr: 2.000e-02, eta: 2:04:04, time: 0.353, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0217, loss_rpn_bbox: 0.0063, s0.loss_cls: 0.0577, s0.acc: 98.4160, s0.loss_bbox: 0.0248, s1.loss_cls: 0.0284, s1.acc: 98.3926, s1.loss_bbox: 0.0329, s2.loss_cls: 0.0128, s2.acc: 98.5176, s2.loss_bbox: 0.0230, loss: 0.2076
2022-04-04 14:11:23,726 - mmdet - INFO - Epoch [2][800/2115]	lr: 2.000e-02, eta: 2:03:56, time: 0.354, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0224, loss_rpn_bbox: 0.0079, s0.loss_cls: 0.0539, s0.acc: 98.5430, s0.loss_bbox: 0.0262, s1.loss_cls: 0.0235, s1.acc: 98.6426, s1.loss_bbox: 0.0318, s2.loss_cls: 0.0104, s2.acc: 98.7363, s2.loss_bbox: 0.0204, loss: 0.1963
2022-04-04 14:11:41,585 - mmdet - INFO - Epoch [2][850/2115]	lr: 2.000e-02, eta: 2:03:50, time: 0.357, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0203, loss_rpn_bbox: 0.0081, s0.loss_cls: 0.0499, s0.acc: 98.5488, s0.loss_bbox: 0.0270, s1.loss_cls: 0.0221, s1.acc: 98.6289, s1.loss_bbox: 0.0329, s2.loss_cls: 0.0105, s2.acc: 98.6055, s2.loss_bbox: 0.0241, loss: 0.1950
2022-04-04 14:11:59,477 - mmdet - INFO - Epoch [2][900/2115]	lr: 2.000e-02, eta: 2:03:43, time: 0.358, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0156, loss_rpn_bbox: 0.0060, s0.loss_cls: 0.0550, s0.acc: 98.5195, s0.loss_bbox: 0.0252, s1.loss_cls: 0.0248, s1.acc: 98.6289, s1.loss_bbox: 0.0323, s2.loss_cls: 0.0115, s2.acc: 98.5234, s2.loss_bbox: 0.0231, loss: 0.1933
2022-04-04 14:12:17,202 - mmdet - INFO - Epoch [2][950/2115]	lr: 2.000e-02, eta: 2:03:34, time: 0.354, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0183, loss_rpn_bbox: 0.0062, s0.loss_cls: 0.0550, s0.acc: 98.3320, s0.loss_bbox: 0.0262, s1.loss_cls: 0.0238, s1.acc: 98.4766, s1.loss_bbox: 0.0325, s2.loss_cls: 0.0113, s2.acc: 98.4062, s2.loss_bbox: 0.0226, loss: 0.1958
2022-04-04 14:12:35,138 - mmdet - INFO - Epoch [2][1000/2115]	lr: 2.000e-02, eta: 2:03:27, time: 0.359, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0227, loss_rpn_bbox: 0.0070, s0.loss_cls: 0.0552, s0.acc: 98.5664, s0.loss_bbox: 0.0251, s1.loss_cls: 0.0262, s1.acc: 98.6191, s1.loss_bbox: 0.0301, s2.loss_cls: 0.0111, s2.acc: 98.7109, s2.loss_bbox: 0.0197, loss: 0.1971
2022-04-04 14:12:53,008 - mmdet - INFO - Epoch [2][1050/2115]	lr: 2.000e-02, eta: 2:03:19, time: 0.357, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0266, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0600, s0.acc: 98.3223, s0.loss_bbox: 0.0270, s1.loss_cls: 0.0274, s1.acc: 98.4258, s1.loss_bbox: 0.0322, s2.loss_cls: 0.0123, s2.acc: 98.4766, s2.loss_bbox: 0.0220, loss: 0.2163
2022-04-04 14:13:10,748 - mmdet - INFO - Epoch [2][1100/2115]	lr: 2.000e-02, eta: 2:03:10, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0160, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0516, s0.acc: 98.4512, s0.loss_bbox: 0.0254, s1.loss_cls: 0.0243, s1.acc: 98.5215, s1.loss_bbox: 0.0322, s2.loss_cls: 0.0111, s2.acc: 98.6445, s2.loss_bbox: 0.0231, loss: 0.1924
2022-04-04 14:13:28,513 - mmdet - INFO - Epoch [2][1150/2115]	lr: 2.000e-02, eta: 2:03:01, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0176, loss_rpn_bbox: 0.0069, s0.loss_cls: 0.0565, s0.acc: 98.3359, s0.loss_bbox: 0.0274, s1.loss_cls: 0.0273, s1.acc: 98.3145, s1.loss_bbox: 0.0340, s2.loss_cls: 0.0116, s2.acc: 98.5918, s2.loss_bbox: 0.0215, loss: 0.2029
2022-04-04 14:13:46,392 - mmdet - INFO - Epoch [2][1200/2115]	lr: 2.000e-02, eta: 2:02:52, time: 0.358, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0239, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0533, s0.acc: 98.4746, s0.loss_bbox: 0.0251, s1.loss_cls: 0.0244, s1.acc: 98.5234, s1.loss_bbox: 0.0352, s2.loss_cls: 0.0115, s2.acc: 98.5820, s2.loss_bbox: 0.0275, loss: 0.2079
2022-04-04 14:14:04,106 - mmdet - INFO - Epoch [2][1250/2115]	lr: 2.000e-02, eta: 2:02:42, time: 0.354, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0208, loss_rpn_bbox: 0.0079, s0.loss_cls: 0.0535, s0.acc: 98.3398, s0.loss_bbox: 0.0248, s1.loss_cls: 0.0270, s1.acc: 98.2324, s1.loss_bbox: 0.0314, s2.loss_cls: 0.0119, s2.acc: 98.3242, s2.loss_bbox: 0.0191, loss: 0.1965
2022-04-04 14:14:21,902 - mmdet - INFO - Epoch [2][1300/2115]	lr: 2.000e-02, eta: 2:02:32, time: 0.356, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0222, loss_rpn_bbox: 0.0064, s0.loss_cls: 0.0512, s0.acc: 98.6094, s0.loss_bbox: 0.0215, s1.loss_cls: 0.0258, s1.acc: 98.5508, s1.loss_bbox: 0.0305, s2.loss_cls: 0.0128, s2.acc: 98.4473, s2.loss_bbox: 0.0204, loss: 0.1909
2022-04-04 14:14:39,607 - mmdet - INFO - Epoch [2][1350/2115]	lr: 2.000e-02, eta: 2:02:22, time: 0.354, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0288, loss_rpn_bbox: 0.0089, s0.loss_cls: 0.0468, s0.acc: 98.6895, s0.loss_bbox: 0.0230, s1.loss_cls: 0.0221, s1.acc: 98.7285, s1.loss_bbox: 0.0300, s2.loss_cls: 0.0096, s2.acc: 98.8652, s2.loss_bbox: 0.0218, loss: 0.1911
2022-04-04 14:14:57,559 - mmdet - INFO - Epoch [2][1400/2115]	lr: 2.000e-02, eta: 2:02:12, time: 0.359, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0234, loss_rpn_bbox: 0.0100, s0.loss_cls: 0.0633, s0.acc: 98.2148, s0.loss_bbox: 0.0314, s1.loss_cls: 0.0292, s1.acc: 98.2793, s1.loss_bbox: 0.0334, s2.loss_cls: 0.0126, s2.acc: 98.3477, s2.loss_bbox: 0.0197, loss: 0.2231
2022-04-04 14:15:15,519 - mmdet - INFO - Epoch [2][1450/2115]	lr: 2.000e-02, eta: 2:02:03, time: 0.359, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0253, loss_rpn_bbox: 0.0099, s0.loss_cls: 0.0629, s0.acc: 98.2344, s0.loss_bbox: 0.0325, s1.loss_cls: 0.0268, s1.acc: 98.3770, s1.loss_bbox: 0.0361, s2.loss_cls: 0.0127, s2.acc: 98.2891, s2.loss_bbox: 0.0238, loss: 0.2299
2022-04-04 14:15:33,271 - mmdet - INFO - Epoch [2][1500/2115]	lr: 2.000e-02, eta: 2:01:52, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0277, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0578, s0.acc: 98.4512, s0.loss_bbox: 0.0249, s1.loss_cls: 0.0254, s1.acc: 98.5254, s1.loss_bbox: 0.0285, s2.loss_cls: 0.0108, s2.acc: 98.7422, s2.loss_bbox: 0.0187, loss: 0.2007
2022-04-04 14:15:51,200 - mmdet - INFO - Epoch [2][1550/2115]	lr: 2.000e-02, eta: 2:01:42, time: 0.359, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0178, loss_rpn_bbox: 0.0066, s0.loss_cls: 0.0583, s0.acc: 98.4141, s0.loss_bbox: 0.0234, s1.loss_cls: 0.0262, s1.acc: 98.5039, s1.loss_bbox: 0.0286, s2.loss_cls: 0.0117, s2.acc: 98.6309, s2.loss_bbox: 0.0199, loss: 0.1925
2022-04-04 14:16:08,919 - mmdet - INFO - Epoch [2][1600/2115]	lr: 2.000e-02, eta: 2:01:30, time: 0.354, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0250, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0601, s0.acc: 98.2832, s0.loss_bbox: 0.0269, s1.loss_cls: 0.0271, s1.acc: 98.4434, s1.loss_bbox: 0.0300, s2.loss_cls: 0.0124, s2.acc: 98.4277, s2.loss_bbox: 0.0192, loss: 0.2095
2022-04-04 14:16:26,749 - mmdet - INFO - Epoch [2][1650/2115]	lr: 2.000e-02, eta: 2:01:19, time: 0.357, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0144, loss_rpn_bbox: 0.0073, s0.loss_cls: 0.0520, s0.acc: 98.3438, s0.loss_bbox: 0.0255, s1.loss_cls: 0.0236, s1.acc: 98.3359, s1.loss_bbox: 0.0327, s2.loss_cls: 0.0110, s2.acc: 98.3887, s2.loss_bbox: 0.0256, loss: 0.1919
2022-04-04 14:16:44,640 - mmdet - INFO - Epoch [2][1700/2115]	lr: 2.000e-02, eta: 2:01:08, time: 0.358, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0540, s0.acc: 98.5996, s0.loss_bbox: 0.0260, s1.loss_cls: 0.0222, s1.acc: 98.7715, s1.loss_bbox: 0.0288, s2.loss_cls: 0.0096, s2.acc: 98.8301, s2.loss_bbox: 0.0221, loss: 0.1896
2022-04-04 14:17:02,603 - mmdet - INFO - Epoch [2][1750/2115]	lr: 2.000e-02, eta: 2:00:58, time: 0.359, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0215, loss_rpn_bbox: 0.0077, s0.loss_cls: 0.0558, s0.acc: 98.3789, s0.loss_bbox: 0.0265, s1.loss_cls: 0.0265, s1.acc: 98.3848, s1.loss_bbox: 0.0318, s2.loss_cls: 0.0116, s2.acc: 98.6133, s2.loss_bbox: 0.0208, loss: 0.2021
2022-04-04 14:17:20,344 - mmdet - INFO - Epoch [2][1800/2115]	lr: 2.000e-02, eta: 2:00:45, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0238, loss_rpn_bbox: 0.0072, s0.loss_cls: 0.0502, s0.acc: 98.7344, s0.loss_bbox: 0.0222, s1.loss_cls: 0.0225, s1.acc: 98.7637, s1.loss_bbox: 0.0283, s2.loss_cls: 0.0104, s2.acc: 98.6660, s2.loss_bbox: 0.0198, loss: 0.1844
2022-04-04 14:17:38,310 - mmdet - INFO - Epoch [2][1850/2115]	lr: 2.000e-02, eta: 2:00:34, time: 0.359, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0203, loss_rpn_bbox: 0.0065, s0.loss_cls: 0.0560, s0.acc: 98.4141, s0.loss_bbox: 0.0271, s1.loss_cls: 0.0255, s1.acc: 98.5605, s1.loss_bbox: 0.0339, s2.loss_cls: 0.0115, s2.acc: 98.5781, s2.loss_bbox: 0.0227, loss: 0.2034
2022-04-04 14:17:56,156 - mmdet - INFO - Epoch [2][1900/2115]	lr: 2.000e-02, eta: 2:00:23, time: 0.357, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0223, loss_rpn_bbox: 0.0082, s0.loss_cls: 0.0535, s0.acc: 98.4590, s0.loss_bbox: 0.0272, s1.loss_cls: 0.0247, s1.acc: 98.5488, s1.loss_bbox: 0.0345, s2.loss_cls: 0.0115, s2.acc: 98.5547, s2.loss_bbox: 0.0238, loss: 0.2058
2022-04-04 14:18:13,786 - mmdet - INFO - Epoch [2][1950/2115]	lr: 2.000e-02, eta: 2:00:10, time: 0.353, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0186, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0519, s0.acc: 98.6094, s0.loss_bbox: 0.0236, s1.loss_cls: 0.0230, s1.acc: 98.7949, s1.loss_bbox: 0.0302, s2.loss_cls: 0.0105, s2.acc: 98.6738, s2.loss_bbox: 0.0227, loss: 0.1872
2022-04-04 14:18:31,501 - mmdet - INFO - Epoch [2][2000/2115]	lr: 2.000e-02, eta: 1:59:57, time: 0.354, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0200, loss_rpn_bbox: 0.0061, s0.loss_cls: 0.0638, s0.acc: 98.4219, s0.loss_bbox: 0.0311, s1.loss_cls: 0.0260, s1.acc: 98.5156, s1.loss_bbox: 0.0331, s2.loss_cls: 0.0104, s2.acc: 98.8203, s2.loss_bbox: 0.0227, loss: 0.2132
2022-04-04 14:18:49,332 - mmdet - INFO - Epoch [2][2050/2115]	lr: 2.000e-02, eta: 1:59:44, time: 0.357, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0233, loss_rpn_bbox: 0.0070, s0.loss_cls: 0.0507, s0.acc: 98.6465, s0.loss_bbox: 0.0232, s1.loss_cls: 0.0224, s1.acc: 98.6738, s1.loss_bbox: 0.0273, s2.loss_cls: 0.0102, s2.acc: 98.7285, s2.loss_bbox: 0.0202, loss: 0.1843
2022-04-04 14:19:07,096 - mmdet - INFO - Epoch [2][2100/2115]	lr: 2.000e-02, eta: 1:59:32, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0188, loss_rpn_bbox: 0.0071, s0.loss_cls: 0.0561, s0.acc: 98.4160, s0.loss_bbox: 0.0273, s1.loss_cls: 0.0262, s1.acc: 98.4180, s1.loss_bbox: 0.0316, s2.loss_cls: 0.0117, s2.acc: 98.4531, s2.loss_bbox: 0.0213, loss: 0.2002
2022-04-04 14:19:12,518 - mmdet - INFO - Saving checkpoint at 2 epochs
2022-04-04 14:21:43,926 - mmdet - INFO - Evaluating bbox...
2022-04-04 14:21:44,959 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.357
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.554
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.419
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.360
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.450
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.450
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.450
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.450
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = -1.000

2022-04-04 14:21:44,978 - mmdet - INFO - Exp name: crcnn_config.py
2022-04-04 14:21:44,978 - mmdet - INFO - Epoch(val) [2][1918]	bbox_mAP: 0.3570, bbox_mAP_50: 0.5540, bbox_mAP_75: 0.4190, bbox_mAP_s: 0.3600, bbox_mAP_m: -1.0000, bbox_mAP_l: -1.0000, bbox_mAP_copypaste: 0.357 0.554 0.419 0.360 -1.000 -1.000
2022-04-04 14:22:04,527 - mmdet - INFO - Epoch [3][50/2115]	lr: 2.000e-02, eta: 1:58:57, time: 0.391, data_time: 0.047, memory: 4027, loss_rpn_cls: 0.0177, loss_rpn_bbox: 0.0082, s0.loss_cls: 0.0443, s0.acc: 98.7441, s0.loss_bbox: 0.0226, s1.loss_cls: 0.0207, s1.acc: 98.7637, s1.loss_bbox: 0.0305, s2.loss_cls: 0.0091, s2.acc: 98.7988, s2.loss_bbox: 0.0211, loss: 0.1742
2022-04-04 14:22:22,297 - mmdet - INFO - Epoch [3][100/2115]	lr: 2.000e-02, eta: 1:58:45, time: 0.355, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0169, loss_rpn_bbox: 0.0089, s0.loss_cls: 0.0456, s0.acc: 98.7148, s0.loss_bbox: 0.0224, s1.loss_cls: 0.0210, s1.acc: 98.7871, s1.loss_bbox: 0.0276, s2.loss_cls: 0.0083, s2.acc: 99.0586, s2.loss_bbox: 0.0191, loss: 0.1699
2022-04-04 14:22:40,008 - mmdet - INFO - Epoch [3][150/2115]	lr: 2.000e-02, eta: 1:58:32, time: 0.354, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0170, loss_rpn_bbox: 0.0060, s0.loss_cls: 0.0618, s0.acc: 98.2773, s0.loss_bbox: 0.0288, s1.loss_cls: 0.0275, s1.acc: 98.4043, s1.loss_bbox: 0.0337, s2.loss_cls: 0.0133, s2.acc: 98.3672, s2.loss_bbox: 0.0231, loss: 0.2112
2022-04-04 14:22:57,714 - mmdet - INFO - Epoch [3][200/2115]	lr: 2.000e-02, eta: 1:58:18, time: 0.354, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0200, loss_rpn_bbox: 0.0069, s0.loss_cls: 0.0555, s0.acc: 98.5410, s0.loss_bbox: 0.0265, s1.loss_cls: 0.0260, s1.acc: 98.5312, s1.loss_bbox: 0.0328, s2.loss_cls: 0.0112, s2.acc: 98.6875, s2.loss_bbox: 0.0240, loss: 0.2030
2022-04-04 14:23:15,600 - mmdet - INFO - Epoch [3][250/2115]	lr: 2.000e-02, eta: 1:58:06, time: 0.358, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0068, s0.loss_cls: 0.0496, s0.acc: 98.5371, s0.loss_bbox: 0.0237, s1.loss_cls: 0.0233, s1.acc: 98.5840, s1.loss_bbox: 0.0312, s2.loss_cls: 0.0110, s2.acc: 98.6660, s2.loss_bbox: 0.0227, loss: 0.1884
2022-04-04 14:23:33,454 - mmdet - INFO - Epoch [3][300/2115]	lr: 2.000e-02, eta: 1:57:53, time: 0.357, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0213, loss_rpn_bbox: 0.0073, s0.loss_cls: 0.0429, s0.acc: 98.7344, s0.loss_bbox: 0.0228, s1.loss_cls: 0.0194, s1.acc: 98.8398, s1.loss_bbox: 0.0302, s2.loss_cls: 0.0101, s2.acc: 98.6641, s2.loss_bbox: 0.0229, loss: 0.1769
2022-04-04 14:23:51,239 - mmdet - INFO - Epoch [3][350/2115]	lr: 2.000e-02, eta: 1:57:40, time: 0.356, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0233, loss_rpn_bbox: 0.0066, s0.loss_cls: 0.0540, s0.acc: 98.5234, s0.loss_bbox: 0.0257, s1.loss_cls: 0.0252, s1.acc: 98.5840, s1.loss_bbox: 0.0327, s2.loss_cls: 0.0108, s2.acc: 98.8750, s2.loss_bbox: 0.0200, loss: 0.1983
2022-04-04 14:24:09,017 - mmdet - INFO - Epoch [3][400/2115]	lr: 2.000e-02, eta: 1:57:26, time: 0.356, data_time: 0.004, memory: 4027, loss_rpn_cls: 0.0253, loss_rpn_bbox: 0.0111, s0.loss_cls: 0.0562, s0.acc: 98.5273, s0.loss_bbox: 0.0262, s1.loss_cls: 0.0243, s1.acc: 98.7148, s1.loss_bbox: 0.0278, s2.loss_cls: 0.0102, s2.acc: 98.8359, s2.loss_bbox: 0.0186, loss: 0.1997
