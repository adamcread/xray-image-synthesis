{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: \nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.1+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu110\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.23.0+21b6da3", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/50_real_50_fake/helper/annotation/unpaired_combined_focal_tversky_900.json',\n        img_prefix=\n        '../dataset/xray/composed/50_real_50_fake/unpaired_combined_focal_tversky_900/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/50_real_50_fake/crcnn/unpaired_combined_focal_tversky_900/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 976838231, "exp_name": "crcnn_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4026, "data_time": 0.04675, "loss_rpn_cls": 0.04671, "loss_rpn_bbox": 0.00682, "s0.loss_cls": 0.2764, "s0.acc": 95.98633, "s0.loss_bbox": 0.03966, "s1.loss_cls": 0.17192, "s1.acc": 85.64648, "s1.loss_bbox": 0.02383, "s2.loss_cls": 0.07638, "s2.acc": 88.44922, "s2.loss_bbox": 0.00735, "loss": 0.64907, "time": 0.36111}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4026, "data_time": 0.00386, "loss_rpn_cls": 0.04388, "loss_rpn_bbox": 0.0113, "s0.loss_cls": 0.10434, "s0.acc": 97.19531, "s0.loss_bbox": 0.03367, "s1.loss_cls": 0.05253, "s1.acc": 97.10742, "s1.loss_bbox": 0.03081, "s2.loss_cls": 0.02427, "s2.acc": 97.57812, "s2.loss_bbox": 0.01372, "loss": 0.31452, "time": 0.31556}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4026, "data_time": 0.00389, "loss_rpn_cls": 0.03858, "loss_rpn_bbox": 0.00953, "s0.loss_cls": 0.08801, "s0.acc": 97.70898, "s0.loss_bbox": 0.03154, "s1.loss_cls": 0.04133, "s1.acc": 97.71875, "s1.loss_bbox": 0.02886, "s2.loss_cls": 0.01872, "s2.acc": 97.80078, "s2.loss_bbox": 0.01337, "loss": 0.26993, "time": 0.31906}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4026, "data_time": 0.00395, "loss_rpn_cls": 0.03165, "loss_rpn_bbox": 0.00669, "s0.loss_cls": 0.08923, "s0.acc": 97.84961, "s0.loss_bbox": 0.03403, "s1.loss_cls": 0.03947, "s1.acc": 98.01172, "s1.loss_bbox": 0.02878, "s2.loss_cls": 0.01668, "s2.acc": 98.31641, "s2.loss_bbox": 0.01331, "loss": 0.25983, "time": 0.32169}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4027, "data_time": 0.00386, "loss_rpn_cls": 0.03423, "loss_rpn_bbox": 0.0086, "s0.loss_cls": 0.0766, "s0.acc": 97.82031, "s0.loss_bbox": 0.02948, "s1.loss_cls": 0.03801, "s1.acc": 97.70703, "s1.loss_bbox": 0.02782, "s2.loss_cls": 0.01725, "s2.acc": 97.83789, "s2.loss_bbox": 0.01434, "loss": 0.24634, "time": 0.32301}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4027, "data_time": 0.00382, "loss_rpn_cls": 0.03356, "loss_rpn_bbox": 0.01149, "s0.loss_cls": 0.07231, "s0.acc": 98.20898, "s0.loss_bbox": 0.02796, "s1.loss_cls": 0.03452, "s1.acc": 98.07227, "s1.loss_bbox": 0.02766, "s2.loss_cls": 0.01535, "s2.acc": 97.98828, "s2.loss_bbox": 0.01389, "loss": 0.23675, "time": 0.32275}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4027, "data_time": 0.00395, "loss_rpn_cls": 0.03749, "loss_rpn_bbox": 0.01234, "s0.loss_cls": 0.07412, "s0.acc": 97.99414, "s0.loss_bbox": 0.02847, "s1.loss_cls": 0.03564, "s1.acc": 97.89453, "s1.loss_bbox": 0.03161, "s2.loss_cls": 0.01591, "s2.acc": 97.94141, "s2.loss_bbox": 0.01689, "loss": 0.25248, "time": 0.32132}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4027, "data_time": 0.00394, "loss_rpn_cls": 0.02912, "loss_rpn_bbox": 0.00617, "s0.loss_cls": 0.06189, "s0.acc": 98.41406, "s0.loss_bbox": 0.0268, "s1.loss_cls": 0.0285, "s1.acc": 98.4668, "s1.loss_bbox": 0.0267, "s2.loss_cls": 0.01274, "s2.acc": 98.36523, "s2.loss_bbox": 0.01306, "loss": 0.20497, "time": 0.32099}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4027, "data_time": 0.00396, "loss_rpn_cls": 0.02894, "loss_rpn_bbox": 0.00711, "s0.loss_cls": 0.06842, "s0.acc": 98.23438, "s0.loss_bbox": 0.02821, "s1.loss_cls": 0.03184, "s1.acc": 98.2168, "s1.loss_bbox": 0.02859, "s2.loss_cls": 0.01455, "s2.acc": 98.18945, "s2.loss_bbox": 0.01531, "loss": 0.22297, "time": 0.31952}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4027, "data_time": 0.00405, "loss_rpn_cls": 0.02941, "loss_rpn_bbox": 0.00862, "s0.loss_cls": 0.07284, "s0.acc": 98.12305, "s0.loss_bbox": 0.03171, "s1.loss_cls": 0.03205, "s1.acc": 98.19531, "s1.loss_bbox": 0.03036, "s2.loss_cls": 0.01425, "s2.acc": 98.13672, "s2.loss_bbox": 0.0156, "loss": 0.23482, "time": 0.32297}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4027, "data_time": 0.00407, "loss_rpn_cls": 0.04294, "loss_rpn_bbox": 0.00838, "s0.loss_cls": 0.07774, "s0.acc": 98.04492, "s0.loss_bbox": 0.02794, "s1.loss_cls": 0.03727, "s1.acc": 97.89844, "s1.loss_bbox": 0.02913, "s2.loss_cls": 0.01591, "s2.acc": 98.05859, "s2.loss_bbox": 0.01677, "loss": 0.25609, "time": 0.32234}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.04099, "loss_rpn_bbox": 0.01189, "s0.loss_cls": 0.05682, "s0.acc": 98.42969, "s0.loss_bbox": 0.02249, "s1.loss_cls": 0.02616, "s1.acc": 98.48438, "s1.loss_bbox": 0.02418, "s2.loss_cls": 0.01201, "s2.acc": 98.49219, "s2.loss_bbox": 0.01373, "loss": 0.20828, "time": 0.32221}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.03095, "loss_rpn_bbox": 0.00775, "s0.loss_cls": 0.06713, "s0.acc": 98.36133, "s0.loss_bbox": 0.02617, "s1.loss_cls": 0.02898, "s1.acc": 98.41406, "s1.loss_bbox": 0.02864, "s2.loss_cls": 0.01338, "s2.acc": 98.54297, "s2.loss_bbox": 0.0176, "loss": 0.2206, "time": 0.32388}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4027, "data_time": 0.00397, "loss_rpn_cls": 0.02738, "loss_rpn_bbox": 0.00804, "s0.loss_cls": 0.05669, "s0.acc": 98.47656, "s0.loss_bbox": 0.02568, "s1.loss_cls": 0.02574, "s1.acc": 98.36719, "s1.loss_bbox": 0.02689, "s2.loss_cls": 0.01183, "s2.acc": 98.35156, "s2.loss_bbox": 0.01968, "loss": 0.20194, "time": 0.3254}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4027, "data_time": 0.00405, "loss_rpn_cls": 0.0315, "loss_rpn_bbox": 0.00945, "s0.loss_cls": 0.06848, "s0.acc": 98.34961, "s0.loss_bbox": 0.02853, "s1.loss_cls": 0.02979, "s1.acc": 98.50586, "s1.loss_bbox": 0.02925, "s2.loss_cls": 0.0131, "s2.acc": 98.54297, "s2.loss_bbox": 0.01679, "loss": 0.22689, "time": 0.32461}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.03281, "loss_rpn_bbox": 0.01076, "s0.loss_cls": 0.05986, "s0.acc": 98.39258, "s0.loss_bbox": 0.02709, "s1.loss_cls": 0.02893, "s1.acc": 98.38867, "s1.loss_bbox": 0.03151, "s2.loss_cls": 0.01225, "s2.acc": 98.45312, "s2.loss_bbox": 0.0174, "loss": 0.22061, "time": 0.32713}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4027, "data_time": 0.00416, "loss_rpn_cls": 0.02228, "loss_rpn_bbox": 0.0086, "s0.loss_cls": 0.07649, "s0.acc": 97.87891, "s0.loss_bbox": 0.03778, "s1.loss_cls": 0.03625, "s1.acc": 97.63867, "s1.loss_bbox": 0.04064, "s2.loss_cls": 0.01631, "s2.acc": 97.79688, "s2.loss_bbox": 0.02032, "loss": 0.25867, "time": 0.32464}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4027, "data_time": 0.00414, "loss_rpn_cls": 0.02503, "loss_rpn_bbox": 0.00845, "s0.loss_cls": 0.06565, "s0.acc": 98.2168, "s0.loss_bbox": 0.02819, "s1.loss_cls": 0.03039, "s1.acc": 98.19727, "s1.loss_bbox": 0.03539, "s2.loss_cls": 0.01463, "s2.acc": 98.11719, "s2.loss_bbox": 0.02332, "loss": 0.23106, "time": 0.32725}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4027, "data_time": 0.00413, "loss_rpn_cls": 0.03591, "loss_rpn_bbox": 0.01132, "s0.loss_cls": 0.0619, "s0.acc": 98.36523, "s0.loss_bbox": 0.02778, "s1.loss_cls": 0.02895, "s1.acc": 98.33984, "s1.loss_bbox": 0.03163, "s2.loss_cls": 0.01292, "s2.acc": 98.45117, "s2.loss_bbox": 0.0189, "loss": 0.2293, "time": 0.32453}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4027, "data_time": 0.00425, "loss_rpn_cls": 0.02801, "loss_rpn_bbox": 0.00932, "s0.loss_cls": 0.06839, "s0.acc": 98.13672, "s0.loss_bbox": 0.03094, "s1.loss_cls": 0.03001, "s1.acc": 98.25977, "s1.loss_bbox": 0.03081, "s2.loss_cls": 0.01298, "s2.acc": 98.40039, "s2.loss_bbox": 0.01748, "loss": 0.22794, "time": 0.32313}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4027, "data_time": 0.0042, "loss_rpn_cls": 0.02916, "loss_rpn_bbox": 0.00843, "s0.loss_cls": 0.06251, "s0.acc": 98.16211, "s0.loss_bbox": 0.02809, "s1.loss_cls": 0.02956, "s1.acc": 98.21094, "s1.loss_bbox": 0.03226, "s2.loss_cls": 0.01328, "s2.acc": 98.29883, "s2.loss_bbox": 0.01951, "loss": 0.22281, "time": 0.32519}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4027, "data_time": 0.00404, "loss_rpn_cls": 0.02575, "loss_rpn_bbox": 0.00715, "s0.loss_cls": 0.06205, "s0.acc": 98.18359, "s0.loss_bbox": 0.02886, "s1.loss_cls": 0.02937, "s1.acc": 98.2207, "s1.loss_bbox": 0.0344, "s2.loss_cls": 0.01293, "s2.acc": 98.26367, "s2.loss_bbox": 0.02187, "loss": 0.22237, "time": 0.32544}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4027, "data_time": 0.00405, "loss_rpn_cls": 0.02747, "loss_rpn_bbox": 0.00759, "s0.loss_cls": 0.06196, "s0.acc": 98.26953, "s0.loss_bbox": 0.02592, "s1.loss_cls": 0.03119, "s1.acc": 98.22852, "s1.loss_bbox": 0.03334, "s2.loss_cls": 0.01529, "s2.acc": 98.08594, "s2.loss_bbox": 0.02121, "loss": 0.22397, "time": 0.32015}
