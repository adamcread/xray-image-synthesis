{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: \nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.1+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu110\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.23.0+21b6da3", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=2,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/50_real_50_fake/helper/annotation/unpaired_combined_focal_tversky_900.json',\n        img_prefix=\n        '../dataset/xray/composed/50_real_50_fake/unpaired_combined_focal_tversky_900/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/cascade_rcnn_r101_fpn_1x_coco_20200317-0b6a2fbf.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/50_real_50_fake/crcnn/unpaired_combined_focal_tversky_900/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 976838231, "exp_name": "crcnn_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4026, "data_time": 0.04675, "loss_rpn_cls": 0.04671, "loss_rpn_bbox": 0.00682, "s0.loss_cls": 0.2764, "s0.acc": 95.98633, "s0.loss_bbox": 0.03966, "s1.loss_cls": 0.17192, "s1.acc": 85.64648, "s1.loss_bbox": 0.02383, "s2.loss_cls": 0.07638, "s2.acc": 88.44922, "s2.loss_bbox": 0.00735, "loss": 0.64907, "time": 0.36111}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4026, "data_time": 0.00386, "loss_rpn_cls": 0.04388, "loss_rpn_bbox": 0.0113, "s0.loss_cls": 0.10434, "s0.acc": 97.19531, "s0.loss_bbox": 0.03367, "s1.loss_cls": 0.05253, "s1.acc": 97.10742, "s1.loss_bbox": 0.03081, "s2.loss_cls": 0.02427, "s2.acc": 97.57812, "s2.loss_bbox": 0.01372, "loss": 0.31452, "time": 0.31556}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4026, "data_time": 0.00389, "loss_rpn_cls": 0.03858, "loss_rpn_bbox": 0.00953, "s0.loss_cls": 0.08801, "s0.acc": 97.70898, "s0.loss_bbox": 0.03154, "s1.loss_cls": 0.04133, "s1.acc": 97.71875, "s1.loss_bbox": 0.02886, "s2.loss_cls": 0.01872, "s2.acc": 97.80078, "s2.loss_bbox": 0.01337, "loss": 0.26993, "time": 0.31906}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4026, "data_time": 0.00395, "loss_rpn_cls": 0.03165, "loss_rpn_bbox": 0.00669, "s0.loss_cls": 0.08923, "s0.acc": 97.84961, "s0.loss_bbox": 0.03403, "s1.loss_cls": 0.03947, "s1.acc": 98.01172, "s1.loss_bbox": 0.02878, "s2.loss_cls": 0.01668, "s2.acc": 98.31641, "s2.loss_bbox": 0.01331, "loss": 0.25983, "time": 0.32169}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4027, "data_time": 0.00386, "loss_rpn_cls": 0.03423, "loss_rpn_bbox": 0.0086, "s0.loss_cls": 0.0766, "s0.acc": 97.82031, "s0.loss_bbox": 0.02948, "s1.loss_cls": 0.03801, "s1.acc": 97.70703, "s1.loss_bbox": 0.02782, "s2.loss_cls": 0.01725, "s2.acc": 97.83789, "s2.loss_bbox": 0.01434, "loss": 0.24634, "time": 0.32301}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4027, "data_time": 0.00382, "loss_rpn_cls": 0.03356, "loss_rpn_bbox": 0.01149, "s0.loss_cls": 0.07231, "s0.acc": 98.20898, "s0.loss_bbox": 0.02796, "s1.loss_cls": 0.03452, "s1.acc": 98.07227, "s1.loss_bbox": 0.02766, "s2.loss_cls": 0.01535, "s2.acc": 97.98828, "s2.loss_bbox": 0.01389, "loss": 0.23675, "time": 0.32275}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4027, "data_time": 0.00395, "loss_rpn_cls": 0.03749, "loss_rpn_bbox": 0.01234, "s0.loss_cls": 0.07412, "s0.acc": 97.99414, "s0.loss_bbox": 0.02847, "s1.loss_cls": 0.03564, "s1.acc": 97.89453, "s1.loss_bbox": 0.03161, "s2.loss_cls": 0.01591, "s2.acc": 97.94141, "s2.loss_bbox": 0.01689, "loss": 0.25248, "time": 0.32132}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4027, "data_time": 0.00394, "loss_rpn_cls": 0.02912, "loss_rpn_bbox": 0.00617, "s0.loss_cls": 0.06189, "s0.acc": 98.41406, "s0.loss_bbox": 0.0268, "s1.loss_cls": 0.0285, "s1.acc": 98.4668, "s1.loss_bbox": 0.0267, "s2.loss_cls": 0.01274, "s2.acc": 98.36523, "s2.loss_bbox": 0.01306, "loss": 0.20497, "time": 0.32099}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4027, "data_time": 0.00396, "loss_rpn_cls": 0.02894, "loss_rpn_bbox": 0.00711, "s0.loss_cls": 0.06842, "s0.acc": 98.23438, "s0.loss_bbox": 0.02821, "s1.loss_cls": 0.03184, "s1.acc": 98.2168, "s1.loss_bbox": 0.02859, "s2.loss_cls": 0.01455, "s2.acc": 98.18945, "s2.loss_bbox": 0.01531, "loss": 0.22297, "time": 0.31952}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4027, "data_time": 0.00405, "loss_rpn_cls": 0.02941, "loss_rpn_bbox": 0.00862, "s0.loss_cls": 0.07284, "s0.acc": 98.12305, "s0.loss_bbox": 0.03171, "s1.loss_cls": 0.03205, "s1.acc": 98.19531, "s1.loss_bbox": 0.03036, "s2.loss_cls": 0.01425, "s2.acc": 98.13672, "s2.loss_bbox": 0.0156, "loss": 0.23482, "time": 0.32297}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4027, "data_time": 0.00407, "loss_rpn_cls": 0.04294, "loss_rpn_bbox": 0.00838, "s0.loss_cls": 0.07774, "s0.acc": 98.04492, "s0.loss_bbox": 0.02794, "s1.loss_cls": 0.03727, "s1.acc": 97.89844, "s1.loss_bbox": 0.02913, "s2.loss_cls": 0.01591, "s2.acc": 98.05859, "s2.loss_bbox": 0.01677, "loss": 0.25609, "time": 0.32234}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.04099, "loss_rpn_bbox": 0.01189, "s0.loss_cls": 0.05682, "s0.acc": 98.42969, "s0.loss_bbox": 0.02249, "s1.loss_cls": 0.02616, "s1.acc": 98.48438, "s1.loss_bbox": 0.02418, "s2.loss_cls": 0.01201, "s2.acc": 98.49219, "s2.loss_bbox": 0.01373, "loss": 0.20828, "time": 0.32221}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.03095, "loss_rpn_bbox": 0.00775, "s0.loss_cls": 0.06713, "s0.acc": 98.36133, "s0.loss_bbox": 0.02617, "s1.loss_cls": 0.02898, "s1.acc": 98.41406, "s1.loss_bbox": 0.02864, "s2.loss_cls": 0.01338, "s2.acc": 98.54297, "s2.loss_bbox": 0.0176, "loss": 0.2206, "time": 0.32388}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4027, "data_time": 0.00397, "loss_rpn_cls": 0.02738, "loss_rpn_bbox": 0.00804, "s0.loss_cls": 0.05669, "s0.acc": 98.47656, "s0.loss_bbox": 0.02568, "s1.loss_cls": 0.02574, "s1.acc": 98.36719, "s1.loss_bbox": 0.02689, "s2.loss_cls": 0.01183, "s2.acc": 98.35156, "s2.loss_bbox": 0.01968, "loss": 0.20194, "time": 0.3254}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4027, "data_time": 0.00405, "loss_rpn_cls": 0.0315, "loss_rpn_bbox": 0.00945, "s0.loss_cls": 0.06848, "s0.acc": 98.34961, "s0.loss_bbox": 0.02853, "s1.loss_cls": 0.02979, "s1.acc": 98.50586, "s1.loss_bbox": 0.02925, "s2.loss_cls": 0.0131, "s2.acc": 98.54297, "s2.loss_bbox": 0.01679, "loss": 0.22689, "time": 0.32461}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.03281, "loss_rpn_bbox": 0.01076, "s0.loss_cls": 0.05986, "s0.acc": 98.39258, "s0.loss_bbox": 0.02709, "s1.loss_cls": 0.02893, "s1.acc": 98.38867, "s1.loss_bbox": 0.03151, "s2.loss_cls": 0.01225, "s2.acc": 98.45312, "s2.loss_bbox": 0.0174, "loss": 0.22061, "time": 0.32713}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4027, "data_time": 0.00416, "loss_rpn_cls": 0.02228, "loss_rpn_bbox": 0.0086, "s0.loss_cls": 0.07649, "s0.acc": 97.87891, "s0.loss_bbox": 0.03778, "s1.loss_cls": 0.03625, "s1.acc": 97.63867, "s1.loss_bbox": 0.04064, "s2.loss_cls": 0.01631, "s2.acc": 97.79688, "s2.loss_bbox": 0.02032, "loss": 0.25867, "time": 0.32464}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4027, "data_time": 0.00414, "loss_rpn_cls": 0.02503, "loss_rpn_bbox": 0.00845, "s0.loss_cls": 0.06565, "s0.acc": 98.2168, "s0.loss_bbox": 0.02819, "s1.loss_cls": 0.03039, "s1.acc": 98.19727, "s1.loss_bbox": 0.03539, "s2.loss_cls": 0.01463, "s2.acc": 98.11719, "s2.loss_bbox": 0.02332, "loss": 0.23106, "time": 0.32725}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4027, "data_time": 0.00413, "loss_rpn_cls": 0.03591, "loss_rpn_bbox": 0.01132, "s0.loss_cls": 0.0619, "s0.acc": 98.36523, "s0.loss_bbox": 0.02778, "s1.loss_cls": 0.02895, "s1.acc": 98.33984, "s1.loss_bbox": 0.03163, "s2.loss_cls": 0.01292, "s2.acc": 98.45117, "s2.loss_bbox": 0.0189, "loss": 0.2293, "time": 0.32453}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4027, "data_time": 0.00425, "loss_rpn_cls": 0.02801, "loss_rpn_bbox": 0.00932, "s0.loss_cls": 0.06839, "s0.acc": 98.13672, "s0.loss_bbox": 0.03094, "s1.loss_cls": 0.03001, "s1.acc": 98.25977, "s1.loss_bbox": 0.03081, "s2.loss_cls": 0.01298, "s2.acc": 98.40039, "s2.loss_bbox": 0.01748, "loss": 0.22794, "time": 0.32313}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4027, "data_time": 0.0042, "loss_rpn_cls": 0.02916, "loss_rpn_bbox": 0.00843, "s0.loss_cls": 0.06251, "s0.acc": 98.16211, "s0.loss_bbox": 0.02809, "s1.loss_cls": 0.02956, "s1.acc": 98.21094, "s1.loss_bbox": 0.03226, "s2.loss_cls": 0.01328, "s2.acc": 98.29883, "s2.loss_bbox": 0.01951, "loss": 0.22281, "time": 0.32519}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4027, "data_time": 0.00404, "loss_rpn_cls": 0.02575, "loss_rpn_bbox": 0.00715, "s0.loss_cls": 0.06205, "s0.acc": 98.18359, "s0.loss_bbox": 0.02886, "s1.loss_cls": 0.02937, "s1.acc": 98.2207, "s1.loss_bbox": 0.0344, "s2.loss_cls": 0.01293, "s2.acc": 98.26367, "s2.loss_bbox": 0.02187, "loss": 0.22237, "time": 0.32544}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4027, "data_time": 0.00405, "loss_rpn_cls": 0.02747, "loss_rpn_bbox": 0.00759, "s0.loss_cls": 0.06196, "s0.acc": 98.26953, "s0.loss_bbox": 0.02592, "s1.loss_cls": 0.03119, "s1.acc": 98.22852, "s1.loss_bbox": 0.03334, "s2.loss_cls": 0.01529, "s2.acc": 98.08594, "s2.loss_bbox": 0.02121, "loss": 0.22397, "time": 0.32015}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 4027, "data_time": 0.00398, "loss_rpn_cls": 0.03513, "loss_rpn_bbox": 0.01084, "s0.loss_cls": 0.07639, "s0.acc": 98.01758, "s0.loss_bbox": 0.02909, "s1.loss_cls": 0.03643, "s1.acc": 98.05078, "s1.loss_bbox": 0.03148, "s2.loss_cls": 0.01591, "s2.acc": 98.21094, "s2.loss_bbox": 0.01793, "loss": 0.25321, "time": 0.32321}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 4027, "data_time": 0.00615, "loss_rpn_cls": 0.02724, "loss_rpn_bbox": 0.00713, "s0.loss_cls": 0.05868, "s0.acc": 98.38672, "s0.loss_bbox": 0.02513, "s1.loss_cls": 0.0269, "s1.acc": 98.39453, "s1.loss_bbox": 0.02966, "s2.loss_cls": 0.01287, "s2.acc": 98.39453, "s2.loss_bbox": 0.02058, "loss": 0.20819, "time": 0.32496}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 4027, "data_time": 0.0041, "loss_rpn_cls": 0.02639, "loss_rpn_bbox": 0.0079, "s0.loss_cls": 0.06392, "s0.acc": 98.35352, "s0.loss_bbox": 0.02873, "s1.loss_cls": 0.03097, "s1.acc": 98.42188, "s1.loss_bbox": 0.03345, "s2.loss_cls": 0.01305, "s2.acc": 98.56445, "s2.loss_bbox": 0.02228, "loss": 0.22669, "time": 0.32162}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 4027, "data_time": 0.00408, "loss_rpn_cls": 0.01939, "loss_rpn_bbox": 0.00693, "s0.loss_cls": 0.06758, "s0.acc": 98.0625, "s0.loss_bbox": 0.02973, "s1.loss_cls": 0.0319, "s1.acc": 98.01172, "s1.loss_bbox": 0.03422, "s2.loss_cls": 0.01519, "s2.acc": 97.98047, "s2.loss_bbox": 0.02057, "loss": 0.22549, "time": 0.32324}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 4027, "data_time": 0.00403, "loss_rpn_cls": 0.02417, "loss_rpn_bbox": 0.00719, "s0.loss_cls": 0.05766, "s0.acc": 98.61328, "s0.loss_bbox": 0.02527, "s1.loss_cls": 0.02277, "s1.acc": 98.84961, "s1.loss_bbox": 0.02775, "s2.loss_cls": 0.0094, "s2.acc": 99.07812, "s2.loss_bbox": 0.01937, "loss": 0.1936, "time": 0.32419}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 4027, "data_time": 0.00399, "loss_rpn_cls": 0.02207, "loss_rpn_bbox": 0.00588, "s0.loss_cls": 0.06856, "s0.acc": 98.2793, "s0.loss_bbox": 0.02903, "s1.loss_cls": 0.02934, "s1.acc": 98.49219, "s1.loss_bbox": 0.03253, "s2.loss_cls": 0.01355, "s2.acc": 98.58203, "s2.loss_bbox": 0.02162, "loss": 0.22258, "time": 0.3209}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 4027, "data_time": 0.00409, "loss_rpn_cls": 0.02356, "loss_rpn_bbox": 0.00748, "s0.loss_cls": 0.08107, "s0.acc": 97.92578, "s0.loss_bbox": 0.03386, "s1.loss_cls": 0.03528, "s1.acc": 98.08398, "s1.loss_bbox": 0.03487, "s2.loss_cls": 0.01481, "s2.acc": 98.2207, "s2.loss_bbox": 0.02015, "loss": 0.25107, "time": 0.32343}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 4027, "data_time": 0.00407, "loss_rpn_cls": 0.02638, "loss_rpn_bbox": 0.00682, "s0.loss_cls": 0.06152, "s0.acc": 98.35547, "s0.loss_bbox": 0.02641, "s1.loss_cls": 0.02906, "s1.acc": 98.38672, "s1.loss_bbox": 0.03109, "s2.loss_cls": 0.01297, "s2.acc": 98.57227, "s2.loss_bbox": 0.02074, "loss": 0.21497, "time": 0.32318}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 4027, "data_time": 0.00401, "loss_rpn_cls": 0.02187, "loss_rpn_bbox": 0.00712, "s0.loss_cls": 0.0623, "s0.acc": 98.45117, "s0.loss_bbox": 0.02841, "s1.loss_cls": 0.02867, "s1.acc": 98.49023, "s1.loss_bbox": 0.03317, "s2.loss_cls": 0.01283, "s2.acc": 98.60547, "s2.loss_bbox": 0.01961, "loss": 0.21397, "time": 0.31936}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 4027, "data_time": 0.00415, "loss_rpn_cls": 0.02142, "loss_rpn_bbox": 0.00578, "s0.loss_cls": 0.05613, "s0.acc": 98.15234, "s0.loss_bbox": 0.02619, "s1.loss_cls": 0.02741, "s1.acc": 98.20312, "s1.loss_bbox": 0.03643, "s2.loss_cls": 0.01351, "s2.acc": 98.22656, "s2.loss_bbox": 0.02598, "loss": 0.21285, "time": 0.32054}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 4027, "data_time": 0.00413, "loss_rpn_cls": 0.03873, "loss_rpn_bbox": 0.01019, "s0.loss_cls": 0.05855, "s0.acc": 98.3418, "s0.loss_bbox": 0.02599, "s1.loss_cls": 0.0266, "s1.acc": 98.45508, "s1.loss_bbox": 0.03194, "s2.loss_cls": 0.01158, "s2.acc": 98.76367, "s2.loss_bbox": 0.02011, "loss": 0.22368, "time": 0.32092}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 4027, "data_time": 0.00415, "loss_rpn_cls": 0.02501, "loss_rpn_bbox": 0.00845, "s0.loss_cls": 0.0568, "s0.acc": 98.4082, "s0.loss_bbox": 0.02442, "s1.loss_cls": 0.02783, "s1.acc": 98.37891, "s1.loss_bbox": 0.02927, "s2.loss_cls": 0.01351, "s2.acc": 98.28906, "s2.loss_bbox": 0.02201, "loss": 0.20729, "time": 0.32621}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 4027, "data_time": 0.00417, "loss_rpn_cls": 0.02082, "loss_rpn_bbox": 0.00736, "s0.loss_cls": 0.05221, "s0.acc": 98.57812, "s0.loss_bbox": 0.024, "s1.loss_cls": 0.02538, "s1.acc": 98.66406, "s1.loss_bbox": 0.03169, "s2.loss_cls": 0.01151, "s2.acc": 98.72656, "s2.loss_bbox": 0.02265, "loss": 0.19563, "time": 0.3227}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.02785, "loss_rpn_bbox": 0.01059, "s0.loss_cls": 0.06057, "s0.acc": 98.45312, "s0.loss_bbox": 0.02718, "s1.loss_cls": 0.0261, "s1.acc": 98.53711, "s1.loss_bbox": 0.03091, "s2.loss_cls": 0.01142, "s2.acc": 98.74414, "s2.loss_bbox": 0.02042, "loss": 0.21504, "time": 0.32433}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 4027, "data_time": 0.00407, "loss_rpn_cls": 0.02424, "loss_rpn_bbox": 0.00633, "s0.loss_cls": 0.05803, "s0.acc": 98.44141, "s0.loss_bbox": 0.02547, "s1.loss_cls": 0.02767, "s1.acc": 98.38086, "s1.loss_bbox": 0.03355, "s2.loss_cls": 0.01247, "s2.acc": 98.40625, "s2.loss_bbox": 0.02004, "loss": 0.20779, "time": 0.32389}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 4027, "data_time": 0.00416, "loss_rpn_cls": 0.02622, "loss_rpn_bbox": 0.0067, "s0.loss_cls": 0.06054, "s0.acc": 98.38086, "s0.loss_bbox": 0.02763, "s1.loss_cls": 0.0279, "s1.acc": 98.43555, "s1.loss_bbox": 0.03428, "s2.loss_cls": 0.01257, "s2.acc": 98.4043, "s2.loss_bbox": 0.02114, "loss": 0.21697, "time": 0.32366}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 4027, "data_time": 0.00421, "loss_rpn_cls": 0.02686, "loss_rpn_bbox": 0.0096, "s0.loss_cls": 0.06494, "s0.acc": 98.24219, "s0.loss_bbox": 0.02854, "s1.loss_cls": 0.02933, "s1.acc": 98.44141, "s1.loss_bbox": 0.03387, "s2.loss_cls": 0.01385, "s2.acc": 98.47461, "s2.loss_bbox": 0.02144, "loss": 0.22842, "time": 0.32834}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.02115, "loss_rpn_bbox": 0.00775, "s0.loss_cls": 0.06071, "s0.acc": 98.28906, "s0.loss_bbox": 0.02804, "s1.loss_cls": 0.02886, "s1.acc": 98.20117, "s1.loss_bbox": 0.03498, "s2.loss_cls": 0.01337, "s2.acc": 98.28125, "s2.loss_bbox": 0.02077, "loss": 0.21563, "time": 0.32667}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 4027, "data_time": 0.00421, "loss_rpn_cls": 0.02641, "loss_rpn_bbox": 0.01127, "s0.loss_cls": 0.05801, "s0.acc": 98.52344, "s0.loss_bbox": 0.02445, "s1.loss_cls": 0.02706, "s1.acc": 98.62305, "s1.loss_bbox": 0.02859, "s2.loss_cls": 0.01087, "s2.acc": 98.91016, "s2.loss_bbox": 0.01723, "loss": 0.20389, "time": 0.32798}
{"mode": "val", "epoch": 1, "iter": 1918, "lr": 0.02, "bbox_mAP": 0.225, "bbox_mAP_50": 0.423, "bbox_mAP_75": 0.219, "bbox_mAP_s": 0.238, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.225 0.423 0.219 0.238 -1.000 -1.000"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.02, "memory": 4027, "data_time": 0.04688, "loss_rpn_cls": 0.0236, "loss_rpn_bbox": 0.0097, "s0.loss_cls": 0.05719, "s0.acc": 98.43945, "s0.loss_bbox": 0.02552, "s1.loss_cls": 0.0257, "s1.acc": 98.47656, "s1.loss_bbox": 0.03284, "s2.loss_cls": 0.01224, "s2.acc": 98.41602, "s2.loss_bbox": 0.02078, "loss": 0.20757, "time": 0.38116}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02, "memory": 4027, "data_time": 0.00411, "loss_rpn_cls": 0.02755, "loss_rpn_bbox": 0.00704, "s0.loss_cls": 0.06435, "s0.acc": 98.34375, "s0.loss_bbox": 0.02581, "s1.loss_cls": 0.03043, "s1.acc": 98.35547, "s1.loss_bbox": 0.02847, "s2.loss_cls": 0.01267, "s2.acc": 98.62305, "s2.loss_bbox": 0.01765, "loss": 0.21398, "time": 0.34551}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.02, "memory": 4027, "data_time": 0.00407, "loss_rpn_cls": 0.02582, "loss_rpn_bbox": 0.00763, "s0.loss_cls": 0.05474, "s0.acc": 98.48438, "s0.loss_bbox": 0.02324, "s1.loss_cls": 0.02662, "s1.acc": 98.41211, "s1.loss_bbox": 0.03213, "s2.loss_cls": 0.01306, "s2.acc": 98.25977, "s2.loss_bbox": 0.02214, "loss": 0.20538, "time": 0.35106}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.02, "memory": 4027, "data_time": 0.00415, "loss_rpn_cls": 0.023, "loss_rpn_bbox": 0.00723, "s0.loss_cls": 0.06058, "s0.acc": 98.13867, "s0.loss_bbox": 0.02546, "s1.loss_cls": 0.03147, "s1.acc": 97.91016, "s1.loss_bbox": 0.03562, "s2.loss_cls": 0.01499, "s2.acc": 97.96484, "s2.loss_bbox": 0.02264, "loss": 0.22099, "time": 0.35592}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.02, "memory": 4027, "data_time": 0.004, "loss_rpn_cls": 0.02896, "loss_rpn_bbox": 0.00933, "s0.loss_cls": 0.05913, "s0.acc": 98.32227, "s0.loss_bbox": 0.02615, "s1.loss_cls": 0.02898, "s1.acc": 98.18555, "s1.loss_bbox": 0.0322, "s2.loss_cls": 0.0128, "s2.acc": 98.33008, "s2.loss_bbox": 0.0177, "loss": 0.21525, "time": 0.35127}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.02, "memory": 4027, "data_time": 0.00424, "loss_rpn_cls": 0.01756, "loss_rpn_bbox": 0.00655, "s0.loss_cls": 0.05791, "s0.acc": 98.31055, "s0.loss_bbox": 0.02698, "s1.loss_cls": 0.02793, "s1.acc": 98.39258, "s1.loss_bbox": 0.03219, "s2.loss_cls": 0.01384, "s2.acc": 98.16992, "s2.loss_bbox": 0.0195, "loss": 0.20247, "time": 0.35511}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.02, "memory": 4027, "data_time": 0.00408, "loss_rpn_cls": 0.02501, "loss_rpn_bbox": 0.00615, "s0.loss_cls": 0.04766, "s0.acc": 98.73438, "s0.loss_bbox": 0.02192, "s1.loss_cls": 0.02236, "s1.acc": 98.77148, "s1.loss_bbox": 0.02799, "s2.loss_cls": 0.01035, "s2.acc": 98.81836, "s2.loss_bbox": 0.02004, "loss": 0.18146, "time": 0.35525}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.02, "memory": 4027, "data_time": 0.00422, "loss_rpn_cls": 0.02917, "loss_rpn_bbox": 0.0053, "s0.loss_cls": 0.0486, "s0.acc": 98.65625, "s0.loss_bbox": 0.02693, "s1.loss_cls": 0.02292, "s1.acc": 98.71875, "s1.loss_bbox": 0.03693, "s2.loss_cls": 0.01172, "s2.acc": 98.54688, "s2.loss_bbox": 0.02561, "loss": 0.20718, "time": 0.3568}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.02, "memory": 4027, "data_time": 0.00401, "loss_rpn_cls": 0.02425, "loss_rpn_bbox": 0.0074, "s0.loss_cls": 0.05681, "s0.acc": 98.46875, "s0.loss_bbox": 0.02498, "s1.loss_cls": 0.02336, "s1.acc": 98.70898, "s1.loss_bbox": 0.02648, "s2.loss_cls": 0.01015, "s2.acc": 98.78711, "s2.loss_bbox": 0.01812, "loss": 0.19155, "time": 0.35495}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.02, "memory": 4027, "data_time": 0.0041, "loss_rpn_cls": 0.02063, "loss_rpn_bbox": 0.0071, "s0.loss_cls": 0.05639, "s0.acc": 98.37305, "s0.loss_bbox": 0.0307, "s1.loss_cls": 0.02743, "s1.acc": 98.30664, "s1.loss_bbox": 0.03763, "s2.loss_cls": 0.01288, "s2.acc": 98.33594, "s2.loss_bbox": 0.02175, "loss": 0.21452, "time": 0.35604}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.02, "memory": 4027, "data_time": 0.00407, "loss_rpn_cls": 0.02327, "loss_rpn_bbox": 0.00815, "s0.loss_cls": 0.05724, "s0.acc": 98.375, "s0.loss_bbox": 0.02752, "s1.loss_cls": 0.02665, "s1.acc": 98.36328, "s1.loss_bbox": 0.03211, "s2.loss_cls": 0.01186, "s2.acc": 98.50781, "s2.loss_bbox": 0.02072, "loss": 0.20752, "time": 0.35527}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.02, "memory": 4027, "data_time": 0.00408, "loss_rpn_cls": 0.02045, "loss_rpn_bbox": 0.00479, "s0.loss_cls": 0.05448, "s0.acc": 98.57422, "s0.loss_bbox": 0.02452, "s1.loss_cls": 0.02589, "s1.acc": 98.53711, "s1.loss_bbox": 0.0355, "s2.loss_cls": 0.01073, "s2.acc": 98.73828, "s2.loss_bbox": 0.02427, "loss": 0.20064, "time": 0.35523}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.02, "memory": 4027, "data_time": 0.00403, "loss_rpn_cls": 0.0191, "loss_rpn_bbox": 0.00636, "s0.loss_cls": 0.05593, "s0.acc": 98.54883, "s0.loss_bbox": 0.02279, "s1.loss_cls": 0.02397, "s1.acc": 98.72266, "s1.loss_bbox": 0.02875, "s2.loss_cls": 0.01065, "s2.acc": 98.89844, "s2.loss_bbox": 0.01994, "loss": 0.1875, "time": 0.35306}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.02, "memory": 4027, "data_time": 0.00413, "loss_rpn_cls": 0.02291, "loss_rpn_bbox": 0.00588, "s0.loss_cls": 0.06306, "s0.acc": 98.42773, "s0.loss_bbox": 0.02882, "s1.loss_cls": 0.02508, "s1.acc": 98.66797, "s1.loss_bbox": 0.03082, "s2.loss_cls": 0.01048, "s2.acc": 98.88086, "s2.loss_bbox": 0.01915, "loss": 0.2062, "time": 0.3523}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.02, "memory": 4027, "data_time": 0.00409, "loss_rpn_cls": 0.0217, "loss_rpn_bbox": 0.00626, "s0.loss_cls": 0.05769, "s0.acc": 98.41602, "s0.loss_bbox": 0.02479, "s1.loss_cls": 0.02841, "s1.acc": 98.39258, "s1.loss_bbox": 0.03294, "s2.loss_cls": 0.01281, "s2.acc": 98.51758, "s2.loss_bbox": 0.02305, "loss": 0.20764, "time": 0.35326}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.02235, "loss_rpn_bbox": 0.00789, "s0.loss_cls": 0.05388, "s0.acc": 98.54297, "s0.loss_bbox": 0.02624, "s1.loss_cls": 0.02346, "s1.acc": 98.64258, "s1.loss_bbox": 0.0318, "s2.loss_cls": 0.01036, "s2.acc": 98.73633, "s2.loss_bbox": 0.02037, "loss": 0.19635, "time": 0.35427}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.02, "memory": 4027, "data_time": 0.0042, "loss_rpn_cls": 0.02029, "loss_rpn_bbox": 0.00813, "s0.loss_cls": 0.04994, "s0.acc": 98.54883, "s0.loss_bbox": 0.02703, "s1.loss_cls": 0.02209, "s1.acc": 98.62891, "s1.loss_bbox": 0.03292, "s2.loss_cls": 0.01052, "s2.acc": 98.60547, "s2.loss_bbox": 0.0241, "loss": 0.19501, "time": 0.35717}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.02, "memory": 4027, "data_time": 0.00425, "loss_rpn_cls": 0.01556, "loss_rpn_bbox": 0.00599, "s0.loss_cls": 0.05496, "s0.acc": 98.51953, "s0.loss_bbox": 0.02516, "s1.loss_cls": 0.02482, "s1.acc": 98.62891, "s1.loss_bbox": 0.03233, "s2.loss_cls": 0.01146, "s2.acc": 98.52344, "s2.loss_bbox": 0.02307, "loss": 0.19335, "time": 0.35783}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.02, "memory": 4027, "data_time": 0.00427, "loss_rpn_cls": 0.0183, "loss_rpn_bbox": 0.00619, "s0.loss_cls": 0.05496, "s0.acc": 98.33203, "s0.loss_bbox": 0.02622, "s1.loss_cls": 0.02381, "s1.acc": 98.47656, "s1.loss_bbox": 0.03248, "s2.loss_cls": 0.01126, "s2.acc": 98.40625, "s2.loss_bbox": 0.0226, "loss": 0.19581, "time": 0.35448}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.02, "memory": 4027, "data_time": 0.00415, "loss_rpn_cls": 0.02268, "loss_rpn_bbox": 0.00695, "s0.loss_cls": 0.05522, "s0.acc": 98.56641, "s0.loss_bbox": 0.02508, "s1.loss_cls": 0.02618, "s1.acc": 98.61914, "s1.loss_bbox": 0.03011, "s2.loss_cls": 0.01113, "s2.acc": 98.71094, "s2.loss_bbox": 0.01972, "loss": 0.19709, "time": 0.35871}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.02, "memory": 4027, "data_time": 0.00432, "loss_rpn_cls": 0.02662, "loss_rpn_bbox": 0.00871, "s0.loss_cls": 0.06002, "s0.acc": 98.32227, "s0.loss_bbox": 0.02698, "s1.loss_cls": 0.02739, "s1.acc": 98.42578, "s1.loss_bbox": 0.03222, "s2.loss_cls": 0.01233, "s2.acc": 98.47656, "s2.loss_bbox": 0.02205, "loss": 0.21632, "time": 0.3574}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.02, "memory": 4027, "data_time": 0.00414, "loss_rpn_cls": 0.01602, "loss_rpn_bbox": 0.00871, "s0.loss_cls": 0.05158, "s0.acc": 98.45117, "s0.loss_bbox": 0.0254, "s1.loss_cls": 0.02429, "s1.acc": 98.52148, "s1.loss_bbox": 0.03218, "s2.loss_cls": 0.01113, "s2.acc": 98.64453, "s2.loss_bbox": 0.02312, "loss": 0.19243, "time": 0.35479}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.02, "memory": 4027, "data_time": 0.00416, "loss_rpn_cls": 0.01761, "loss_rpn_bbox": 0.00692, "s0.loss_cls": 0.05649, "s0.acc": 98.33594, "s0.loss_bbox": 0.02744, "s1.loss_cls": 0.02733, "s1.acc": 98.31445, "s1.loss_bbox": 0.03403, "s2.loss_cls": 0.01158, "s2.acc": 98.5918, "s2.loss_bbox": 0.02149, "loss": 0.20289, "time": 0.35527}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.02, "memory": 4027, "data_time": 0.00407, "loss_rpn_cls": 0.02386, "loss_rpn_bbox": 0.00712, "s0.loss_cls": 0.05326, "s0.acc": 98.47461, "s0.loss_bbox": 0.02505, "s1.loss_cls": 0.0244, "s1.acc": 98.52344, "s1.loss_bbox": 0.03522, "s2.loss_cls": 0.01147, "s2.acc": 98.58203, "s2.loss_bbox": 0.0275, "loss": 0.20788, "time": 0.35758}
{"mode": "train", "epoch": 2, "iter": 1250, "lr": 0.02, "memory": 4027, "data_time": 0.00404, "loss_rpn_cls": 0.0208, "loss_rpn_bbox": 0.00787, "s0.loss_cls": 0.05352, "s0.acc": 98.33984, "s0.loss_bbox": 0.02483, "s1.loss_cls": 0.02699, "s1.acc": 98.23242, "s1.loss_bbox": 0.03143, "s2.loss_cls": 0.01188, "s2.acc": 98.32422, "s2.loss_bbox": 0.01914, "loss": 0.19647, "time": 0.35428}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.02, "memory": 4027, "data_time": 0.00401, "loss_rpn_cls": 0.02222, "loss_rpn_bbox": 0.00642, "s0.loss_cls": 0.05123, "s0.acc": 98.60938, "s0.loss_bbox": 0.02153, "s1.loss_cls": 0.02579, "s1.acc": 98.55078, "s1.loss_bbox": 0.03054, "s2.loss_cls": 0.0128, "s2.acc": 98.44727, "s2.loss_bbox": 0.02037, "loss": 0.19091, "time": 0.3559}
{"mode": "train", "epoch": 2, "iter": 1350, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.02882, "loss_rpn_bbox": 0.00892, "s0.loss_cls": 0.04683, "s0.acc": 98.68945, "s0.loss_bbox": 0.02298, "s1.loss_cls": 0.02205, "s1.acc": 98.72852, "s1.loss_bbox": 0.03002, "s2.loss_cls": 0.00964, "s2.acc": 98.86523, "s2.loss_bbox": 0.02183, "loss": 0.19109, "time": 0.35409}
{"mode": "train", "epoch": 2, "iter": 1400, "lr": 0.02, "memory": 4027, "data_time": 0.00405, "loss_rpn_cls": 0.02342, "loss_rpn_bbox": 0.00999, "s0.loss_cls": 0.06329, "s0.acc": 98.21484, "s0.loss_bbox": 0.03138, "s1.loss_cls": 0.02921, "s1.acc": 98.2793, "s1.loss_bbox": 0.03344, "s2.loss_cls": 0.01264, "s2.acc": 98.34766, "s2.loss_bbox": 0.0197, "loss": 0.22307, "time": 0.35903}
{"mode": "train", "epoch": 2, "iter": 1450, "lr": 0.02, "memory": 4027, "data_time": 0.00415, "loss_rpn_cls": 0.02528, "loss_rpn_bbox": 0.00987, "s0.loss_cls": 0.06287, "s0.acc": 98.23438, "s0.loss_bbox": 0.0325, "s1.loss_cls": 0.02681, "s1.acc": 98.37695, "s1.loss_bbox": 0.03613, "s2.loss_cls": 0.01265, "s2.acc": 98.28906, "s2.loss_bbox": 0.02383, "loss": 0.22993, "time": 0.3592}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.02, "memory": 4027, "data_time": 0.00407, "loss_rpn_cls": 0.02767, "loss_rpn_bbox": 0.00679, "s0.loss_cls": 0.0578, "s0.acc": 98.45117, "s0.loss_bbox": 0.02495, "s1.loss_cls": 0.02542, "s1.acc": 98.52539, "s1.loss_bbox": 0.02848, "s2.loss_cls": 0.01081, "s2.acc": 98.74219, "s2.loss_bbox": 0.01874, "loss": 0.20065, "time": 0.35503}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.02, "memory": 4027, "data_time": 0.00402, "loss_rpn_cls": 0.01781, "loss_rpn_bbox": 0.00664, "s0.loss_cls": 0.05826, "s0.acc": 98.41406, "s0.loss_bbox": 0.02344, "s1.loss_cls": 0.02619, "s1.acc": 98.50391, "s1.loss_bbox": 0.02857, "s2.loss_cls": 0.01166, "s2.acc": 98.63086, "s2.loss_bbox": 0.01994, "loss": 0.19251, "time": 0.35857}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.02, "memory": 4027, "data_time": 0.00398, "loss_rpn_cls": 0.02504, "loss_rpn_bbox": 0.00874, "s0.loss_cls": 0.06011, "s0.acc": 98.2832, "s0.loss_bbox": 0.02687, "s1.loss_cls": 0.0271, "s1.acc": 98.44336, "s1.loss_bbox": 0.03005, "s2.loss_cls": 0.0124, "s2.acc": 98.42773, "s2.loss_bbox": 0.01916, "loss": 0.20948, "time": 0.35437}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.02, "memory": 4027, "data_time": 0.00402, "loss_rpn_cls": 0.01439, "loss_rpn_bbox": 0.00726, "s0.loss_cls": 0.05196, "s0.acc": 98.34375, "s0.loss_bbox": 0.02551, "s1.loss_cls": 0.02359, "s1.acc": 98.33594, "s1.loss_bbox": 0.03267, "s2.loss_cls": 0.01097, "s2.acc": 98.38867, "s2.loss_bbox": 0.02558, "loss": 0.19193, "time": 0.35659}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.02, "memory": 4027, "data_time": 0.00404, "loss_rpn_cls": 0.02014, "loss_rpn_bbox": 0.00684, "s0.loss_cls": 0.054, "s0.acc": 98.59961, "s0.loss_bbox": 0.02601, "s1.loss_cls": 0.02219, "s1.acc": 98.77148, "s1.loss_bbox": 0.02882, "s2.loss_cls": 0.00955, "s2.acc": 98.83008, "s2.loss_bbox": 0.02206, "loss": 0.18962, "time": 0.35783}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.02, "memory": 4027, "data_time": 0.00412, "loss_rpn_cls": 0.02149, "loss_rpn_bbox": 0.00769, "s0.loss_cls": 0.0558, "s0.acc": 98.37891, "s0.loss_bbox": 0.02645, "s1.loss_cls": 0.0265, "s1.acc": 98.38477, "s1.loss_bbox": 0.03177, "s2.loss_cls": 0.01159, "s2.acc": 98.61328, "s2.loss_bbox": 0.02078, "loss": 0.20208, "time": 0.35925}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.02, "memory": 4027, "data_time": 0.0041, "loss_rpn_cls": 0.02382, "loss_rpn_bbox": 0.00719, "s0.loss_cls": 0.05019, "s0.acc": 98.73438, "s0.loss_bbox": 0.0222, "s1.loss_cls": 0.02251, "s1.acc": 98.76367, "s1.loss_bbox": 0.02831, "s2.loss_cls": 0.01044, "s2.acc": 98.66602, "s2.loss_bbox": 0.01976, "loss": 0.18444, "time": 0.35481}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.02, "memory": 4027, "data_time": 0.00413, "loss_rpn_cls": 0.02027, "loss_rpn_bbox": 0.00649, "s0.loss_cls": 0.05603, "s0.acc": 98.41406, "s0.loss_bbox": 0.02711, "s1.loss_cls": 0.0255, "s1.acc": 98.56055, "s1.loss_bbox": 0.03388, "s2.loss_cls": 0.01148, "s2.acc": 98.57812, "s2.loss_bbox": 0.02267, "loss": 0.20343, "time": 0.35931}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.02, "memory": 4027, "data_time": 0.00428, "loss_rpn_cls": 0.02229, "loss_rpn_bbox": 0.00818, "s0.loss_cls": 0.05353, "s0.acc": 98.45898, "s0.loss_bbox": 0.02719, "s1.loss_cls": 0.02475, "s1.acc": 98.54883, "s1.loss_bbox": 0.0345, "s2.loss_cls": 0.01148, "s2.acc": 98.55469, "s2.loss_bbox": 0.02383, "loss": 0.20575, "time": 0.35691}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.02, "memory": 4027, "data_time": 0.00412, "loss_rpn_cls": 0.01857, "loss_rpn_bbox": 0.00681, "s0.loss_cls": 0.05192, "s0.acc": 98.60938, "s0.loss_bbox": 0.02359, "s1.loss_cls": 0.02299, "s1.acc": 98.79492, "s1.loss_bbox": 0.03015, "s2.loss_cls": 0.01045, "s2.acc": 98.67383, "s2.loss_bbox": 0.02268, "loss": 0.18717, "time": 0.35259}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.02, "memory": 4027, "data_time": 0.00411, "loss_rpn_cls": 0.01997, "loss_rpn_bbox": 0.00614, "s0.loss_cls": 0.06378, "s0.acc": 98.42188, "s0.loss_bbox": 0.0311, "s1.loss_cls": 0.02597, "s1.acc": 98.51562, "s1.loss_bbox": 0.03311, "s2.loss_cls": 0.01044, "s2.acc": 98.82031, "s2.loss_bbox": 0.02268, "loss": 0.2132, "time": 0.3543}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 0.02, "memory": 4027, "data_time": 0.00418, "loss_rpn_cls": 0.02331, "loss_rpn_bbox": 0.00698, "s0.loss_cls": 0.05072, "s0.acc": 98.64648, "s0.loss_bbox": 0.02322, "s1.loss_cls": 0.02243, "s1.acc": 98.67383, "s1.loss_bbox": 0.02728, "s2.loss_cls": 0.01016, "s2.acc": 98.72852, "s2.loss_bbox": 0.02024, "loss": 0.18435, "time": 0.35662}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.01884, "loss_rpn_bbox": 0.00708, "s0.loss_cls": 0.05614, "s0.acc": 98.41602, "s0.loss_bbox": 0.02728, "s1.loss_cls": 0.0262, "s1.acc": 98.41797, "s1.loss_bbox": 0.03159, "s2.loss_cls": 0.01172, "s2.acc": 98.45312, "s2.loss_bbox": 0.02131, "loss": 0.20015, "time": 0.35526}
{"mode": "val", "epoch": 2, "iter": 1918, "lr": 0.02, "bbox_mAP": 0.357, "bbox_mAP_50": 0.554, "bbox_mAP_75": 0.419, "bbox_mAP_s": 0.36, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.357 0.554 0.419 0.360 -1.000 -1.000"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 4027, "data_time": 0.04678, "loss_rpn_cls": 0.01775, "loss_rpn_bbox": 0.00818, "s0.loss_cls": 0.04425, "s0.acc": 98.74414, "s0.loss_bbox": 0.02257, "s1.loss_cls": 0.02068, "s1.acc": 98.76367, "s1.loss_bbox": 0.03054, "s2.loss_cls": 0.00913, "s2.acc": 98.79883, "s2.loss_bbox": 0.02109, "loss": 0.1742, "time": 0.39072}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 4027, "data_time": 0.00415, "loss_rpn_cls": 0.01685, "loss_rpn_bbox": 0.00894, "s0.loss_cls": 0.0456, "s0.acc": 98.71484, "s0.loss_bbox": 0.02242, "s1.loss_cls": 0.02096, "s1.acc": 98.78711, "s1.loss_bbox": 0.02765, "s2.loss_cls": 0.00832, "s2.acc": 99.05859, "s2.loss_bbox": 0.01911, "loss": 0.16986, "time": 0.3554}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 4027, "data_time": 0.00426, "loss_rpn_cls": 0.01702, "loss_rpn_bbox": 0.00599, "s0.loss_cls": 0.06177, "s0.acc": 98.27734, "s0.loss_bbox": 0.02885, "s1.loss_cls": 0.02751, "s1.acc": 98.4043, "s1.loss_bbox": 0.03372, "s2.loss_cls": 0.01326, "s2.acc": 98.36719, "s2.loss_bbox": 0.02312, "loss": 0.21123, "time": 0.3542}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 4027, "data_time": 0.00409, "loss_rpn_cls": 0.01999, "loss_rpn_bbox": 0.00693, "s0.loss_cls": 0.05554, "s0.acc": 98.54102, "s0.loss_bbox": 0.02648, "s1.loss_cls": 0.02604, "s1.acc": 98.53125, "s1.loss_bbox": 0.03281, "s2.loss_cls": 0.01125, "s2.acc": 98.6875, "s2.loss_bbox": 0.024, "loss": 0.20304, "time": 0.35411}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.02, "memory": 4027, "data_time": 0.00439, "loss_rpn_cls": 0.02008, "loss_rpn_bbox": 0.00682, "s0.loss_cls": 0.04961, "s0.acc": 98.53711, "s0.loss_bbox": 0.02372, "s1.loss_cls": 0.02333, "s1.acc": 98.58398, "s1.loss_bbox": 0.03118, "s2.loss_cls": 0.01104, "s2.acc": 98.66602, "s2.loss_bbox": 0.02267, "loss": 0.18845, "time": 0.35771}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.02, "memory": 4027, "data_time": 0.00417, "loss_rpn_cls": 0.0213, "loss_rpn_bbox": 0.00729, "s0.loss_cls": 0.04288, "s0.acc": 98.73438, "s0.loss_bbox": 0.02275, "s1.loss_cls": 0.01944, "s1.acc": 98.83984, "s1.loss_bbox": 0.03018, "s2.loss_cls": 0.01014, "s2.acc": 98.66406, "s2.loss_bbox": 0.02295, "loss": 0.17693, "time": 0.35708}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.02, "memory": 4027, "data_time": 0.00406, "loss_rpn_cls": 0.02332, "loss_rpn_bbox": 0.00661, "s0.loss_cls": 0.05396, "s0.acc": 98.52344, "s0.loss_bbox": 0.0257, "s1.loss_cls": 0.0252, "s1.acc": 98.58398, "s1.loss_bbox": 0.03271, "s2.loss_cls": 0.01079, "s2.acc": 98.875, "s2.loss_bbox": 0.02003, "loss": 0.19831, "time": 0.35568}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.02, "memory": 4027, "data_time": 0.00409, "loss_rpn_cls": 0.02525, "loss_rpn_bbox": 0.01108, "s0.loss_cls": 0.0562, "s0.acc": 98.52734, "s0.loss_bbox": 0.0262, "s1.loss_cls": 0.02433, "s1.acc": 98.71484, "s1.loss_bbox": 0.02777, "s2.loss_cls": 0.01022, "s2.acc": 98.83594, "s2.loss_bbox": 0.01865, "loss": 0.19971, "time": 0.35556}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.02, "memory": 4027, "data_time": 0.00408, "loss_rpn_cls": 0.01919, "loss_rpn_bbox": 0.00747, "s0.loss_cls": 0.06137, "s0.acc": 98.30859, "s0.loss_bbox": 0.02497, "s1.loss_cls": 0.02909, "s1.acc": 98.25195, "s1.loss_bbox": 0.03388, "s2.loss_cls": 0.01292, "s2.acc": 98.25391, "s2.loss_bbox": 0.02502, "loss": 0.21391, "time": 0.35648}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.02, "memory": 4027, "data_time": 0.0042, "loss_rpn_cls": 0.01195, "loss_rpn_bbox": 0.00524, "s0.loss_cls": 0.05031, "s0.acc": 98.5332, "s0.loss_bbox": 0.02366, "s1.loss_cls": 0.02519, "s1.acc": 98.37305, "s1.loss_bbox": 0.03313, "s2.loss_cls": 0.01191, "s2.acc": 98.40039, "s2.loss_bbox": 0.02317, "loss": 0.18458, "time": 0.35847}
