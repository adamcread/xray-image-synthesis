{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: Not Available\nGCC: x86_64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+8ddf379", "config": "model = dict(\n    type='FSAF',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='FSAFHead',\n        num_classes=2,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=1,\n            scales_per_octave=1,\n            ratios=[1.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(type='TBLRBBoxCoder', normalizer=4.0),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0,\n            reduction='none'),\n        loss_bbox=dict(\n            type='IoULoss', eps=1e-06, loss_weight=1.0, reduction='none'),\n        reg_decoded_bbox=True),\n    train_cfg=dict(\n        assigner=dict(\n            type='CenterRegionAssigner',\n            pos_scale=0.2,\n            neg_scale=0.2,\n            min_pos_iof=0.01),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/50_real_50_fake/helper/annotation/unpaired_no-aug_32.json',\n        img_prefix=\n        '../dataset/xray/composed/50_real_50_fake/unpaired_no-aug_32/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/fsaf_r101_fpn_1x_coco-9e71098f.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/50_real_50_fake/fsaf/unpaired_no-aug_32/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 551630733, "exp_name": "fsaf_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3209, "data_time": 0.04751, "loss_cls": 1.07373, "loss_bbox": 0.68405, "num_pos": 5.03, "pos_recall": 48.29753, "loss": 1.75778, "grad_norm": 32.95243, "time": 0.33121}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3209, "data_time": 0.00425, "loss_cls": 0.79575, "loss_bbox": 0.51708, "num_pos": 3.72, "pos_recall": 55.93835, "loss": 1.31283, "grad_norm": 17.94372, "time": 0.28676}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 3209, "data_time": 0.00421, "loss_cls": 0.78019, "loss_bbox": 0.49293, "num_pos": 3.44, "pos_recall": 55.3242, "loss": 1.27312, "grad_norm": 12.48277, "time": 0.28685}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 3209, "data_time": 0.00407, "loss_cls": 0.74655, "loss_bbox": 0.51577, "num_pos": 4.08, "pos_recall": 58.37545, "loss": 1.26232, "grad_norm": 12.25944, "time": 0.28228}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 3209, "data_time": 0.00427, "loss_cls": 0.76828, "loss_bbox": 0.57538, "num_pos": 3.84, "pos_recall": 60.55195, "loss": 1.34366, "grad_norm": 9.26947, "time": 0.28764}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 3209, "data_time": 0.00812, "loss_cls": 0.78016, "loss_bbox": 0.58063, "num_pos": 4.87, "pos_recall": 52.14408, "loss": 1.36079, "grad_norm": 8.66588, "time": 0.28484}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 3209, "data_time": 0.0041, "loss_cls": 0.77246, "loss_bbox": 0.646, "num_pos": 4.45, "pos_recall": 55.22756, "loss": 1.41846, "grad_norm": 5.94517, "time": 0.28034}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 3209, "data_time": 0.00813, "loss_cls": 0.7092, "loss_bbox": 0.58948, "num_pos": 4.46, "pos_recall": 65.24202, "loss": 1.29868, "grad_norm": 5.05045, "time": 0.28867}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 3209, "data_time": 0.00419, "loss_cls": 0.76308, "loss_bbox": 0.60705, "num_pos": 4.64, "pos_recall": 50.83967, "loss": 1.37013, "grad_norm": 5.93641, "time": 0.28849}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 3209, "data_time": 0.00422, "loss_cls": 0.71204, "loss_bbox": 0.66815, "num_pos": 3.45, "pos_recall": 60.65519, "loss": 1.38019, "grad_norm": 6.35294, "time": 0.28522}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 3209, "data_time": 0.00412, "loss_cls": 0.79132, "loss_bbox": 0.7065, "num_pos": 4.11, "pos_recall": 58.96384, "loss": 1.49782, "grad_norm": 5.09353, "time": 0.28186}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 3209, "data_time": 0.00404, "loss_cls": 0.75249, "loss_bbox": 0.75509, "num_pos": 4.13, "pos_recall": 61.36594, "loss": 1.50759, "grad_norm": 7.05868, "time": 0.28745}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 3209, "data_time": 0.00413, "loss_cls": 0.76419, "loss_bbox": 0.71265, "num_pos": 3.97, "pos_recall": 53.89911, "loss": 1.47684, "grad_norm": 5.10626, "time": 0.28198}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 3209, "data_time": 0.00424, "loss_cls": 0.68761, "loss_bbox": 0.6042, "num_pos": 4.71, "pos_recall": 63.81535, "loss": 1.29182, "grad_norm": 4.59676, "time": 0.2893}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 3209, "data_time": 0.00417, "loss_cls": 0.76706, "loss_bbox": 0.64644, "num_pos": 4.1, "pos_recall": 64.33153, "loss": 1.4135, "grad_norm": 4.06266, "time": 0.28701}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 3209, "data_time": 0.00419, "loss_cls": 0.69752, "loss_bbox": 0.62762, "num_pos": 4.5, "pos_recall": 64.74687, "loss": 1.32514, "grad_norm": 5.12096, "time": 0.28225}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 3209, "data_time": 0.0042, "loss_cls": 0.77911, "loss_bbox": 0.72341, "num_pos": 3.7, "pos_recall": 74.79689, "loss": 1.50252, "grad_norm": 4.10334, "time": 0.28731}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 3209, "data_time": 0.00424, "loss_cls": 0.64597, "loss_bbox": 0.51771, "num_pos": 4.06, "pos_recall": 63.55363, "loss": 1.16369, "grad_norm": 3.83739, "time": 0.2881}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 3209, "data_time": 0.00401, "loss_cls": 0.72684, "loss_bbox": 0.68142, "num_pos": 3.99, "pos_recall": 57.40516, "loss": 1.40825, "grad_norm": 5.49947, "time": 0.28656}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 3209, "data_time": 0.00395, "loss_cls": 0.69201, "loss_bbox": 0.63351, "num_pos": 4.18, "pos_recall": 57.24408, "loss": 1.32552, "grad_norm": 4.24886, "time": 0.27969}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.01, "memory": 3209, "data_time": 0.06858, "loss_cls": 0.66587, "loss_bbox": 0.6722, "num_pos": 4.5, "pos_recall": 69.47597, "loss": 1.33806, "grad_norm": 4.92437, "time": 0.35036}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.01, "memory": 3209, "data_time": 0.0096, "loss_cls": 0.65498, "loss_bbox": 0.58866, "num_pos": 4.46, "pos_recall": 60.60693, "loss": 1.24363, "grad_norm": 4.64925, "time": 0.29405}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.01, "memory": 3209, "data_time": 0.00511, "loss_cls": 0.6632, "loss_bbox": 0.59105, "num_pos": 4.61, "pos_recall": 72.05199, "loss": 1.25425, "grad_norm": 3.74494, "time": 0.28983}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.01, "memory": 3209, "data_time": 0.00422, "loss_cls": 0.64114, "loss_bbox": 0.57702, "num_pos": 4.66, "pos_recall": 64.48445, "loss": 1.21816, "grad_norm": 4.54112, "time": 0.28707}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.01, "memory": 3209, "data_time": 0.00411, "loss_cls": 0.67118, "loss_bbox": 0.6298, "num_pos": 4.76, "pos_recall": 60.22519, "loss": 1.30097, "grad_norm": 4.37521, "time": 0.28643}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.01, "memory": 3209, "data_time": 0.00411, "loss_cls": 0.64679, "loss_bbox": 0.54433, "num_pos": 4.75, "pos_recall": 66.88096, "loss": 1.19112, "grad_norm": 3.66193, "time": 0.28829}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.01, "memory": 3209, "data_time": 0.00396, "loss_cls": 0.6744, "loss_bbox": 0.61105, "num_pos": 4.63, "pos_recall": 71.97732, "loss": 1.28544, "grad_norm": 4.20968, "time": 0.28775}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.01, "memory": 3209, "data_time": 0.00413, "loss_cls": 0.69507, "loss_bbox": 0.545, "num_pos": 4.74, "pos_recall": 70.62339, "loss": 1.24006, "grad_norm": 3.5326, "time": 0.28866}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.01, "memory": 3209, "data_time": 0.00419, "loss_cls": 0.63937, "loss_bbox": 0.53588, "num_pos": 4.67, "pos_recall": 63.08092, "loss": 1.17525, "grad_norm": 3.82951, "time": 0.28943}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.01, "memory": 3209, "data_time": 0.00911, "loss_cls": 0.64138, "loss_bbox": 0.51087, "num_pos": 4.96, "pos_recall": 75.19007, "loss": 1.15225, "grad_norm": 3.75597, "time": 0.29013}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.01, "memory": 3209, "data_time": 0.00412, "loss_cls": 0.72588, "loss_bbox": 0.59981, "num_pos": 4.89, "pos_recall": 62.3178, "loss": 1.32569, "grad_norm": 4.32229, "time": 0.28756}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.01, "memory": 3209, "data_time": 0.00415, "loss_cls": 0.66862, "loss_bbox": 0.5889, "num_pos": 4.27, "pos_recall": 68.30251, "loss": 1.25752, "grad_norm": 4.29232, "time": 0.28757}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.01, "memory": 3209, "data_time": 0.00424, "loss_cls": 0.6395, "loss_bbox": 0.62285, "num_pos": 4.26, "pos_recall": 71.21234, "loss": 1.26235, "grad_norm": 4.08657, "time": 0.2841}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.01, "memory": 3209, "data_time": 0.00405, "loss_cls": 0.63086, "loss_bbox": 0.54762, "num_pos": 4.36, "pos_recall": 74.03976, "loss": 1.17848, "grad_norm": 3.93848, "time": 0.28735}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.01, "memory": 3209, "data_time": 0.00422, "loss_cls": 0.62968, "loss_bbox": 0.63656, "num_pos": 4.95, "pos_recall": 67.98597, "loss": 1.26624, "grad_norm": 4.62622, "time": 0.28488}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.01, "memory": 3209, "data_time": 0.00403, "loss_cls": 0.70983, "loss_bbox": 0.66803, "num_pos": 3.9, "pos_recall": 62.22107, "loss": 1.37786, "grad_norm": 4.5654, "time": 0.27765}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.01, "memory": 3209, "data_time": 0.00415, "loss_cls": 0.77332, "loss_bbox": 0.77713, "num_pos": 3.28, "pos_recall": 53.49084, "loss": 1.55045, "grad_norm": 6.96257, "time": 0.28676}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.01, "memory": 3209, "data_time": 0.0041, "loss_cls": 0.66816, "loss_bbox": 0.68445, "num_pos": 5.09, "pos_recall": 69.70266, "loss": 1.35261, "grad_norm": 3.99566, "time": 0.2852}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.01, "memory": 3209, "data_time": 0.00405, "loss_cls": 0.70911, "loss_bbox": 0.77655, "num_pos": 4.15, "pos_recall": 71.29887, "loss": 1.48565, "grad_norm": 5.03264, "time": 0.28021}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.01, "memory": 3209, "data_time": 0.00407, "loss_cls": 0.62899, "loss_bbox": 0.54991, "num_pos": 4.65, "pos_recall": 71.50772, "loss": 1.1789, "grad_norm": 4.23196, "time": 0.28878}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.01, "memory": 3209, "data_time": 0.00431, "loss_cls": 0.68727, "loss_bbox": 0.63234, "num_pos": 5.41, "pos_recall": 76.29237, "loss": 1.31961, "grad_norm": 3.67342, "time": 0.28767}
{"mode": "val", "epoch": 1, "iter": 1912, "lr": 0.01, "bbox_mAP": 0.04, "bbox_mAP_50": 0.191, "bbox_mAP_75": 0.002, "bbox_mAP_s": 0.047, "bbox_mAP_m": -1.0, "bbox_mAP_l": -1.0, "bbox_mAP_copypaste": "0.040 0.191 0.002 0.047 -1.000 -1.000"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01, "memory": 3209, "data_time": 0.04747, "loss_cls": 0.82728, "loss_bbox": 0.77623, "num_pos": 4.07, "pos_recall": 60.0562, "loss": 1.60351, "grad_norm": 12.9251, "time": 0.32808}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01, "memory": 3209, "data_time": 0.00409, "loss_cls": 0.6657, "loss_bbox": 0.68198, "num_pos": 5.3, "pos_recall": 61.44353, "loss": 1.34768, "grad_norm": 3.41344, "time": 0.28025}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01, "memory": 3209, "data_time": 0.00405, "loss_cls": 0.59775, "loss_bbox": 0.62319, "num_pos": 4.37, "pos_recall": 64.91061, "loss": 1.22094, "grad_norm": 6.24383, "time": 0.28533}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01, "memory": 3209, "data_time": 0.004, "loss_cls": 0.67787, "loss_bbox": 0.65562, "num_pos": 3.81, "pos_recall": 64.0192, "loss": 1.33349, "grad_norm": 3.7731, "time": 0.28793}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.01, "memory": 3209, "data_time": 0.00392, "loss_cls": 0.61885, "loss_bbox": 0.60287, "num_pos": 4.07, "pos_recall": 78.19719, "loss": 1.22172, "grad_norm": 5.25197, "time": 0.2857}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.01, "memory": 3209, "data_time": 0.00406, "loss_cls": 0.64325, "loss_bbox": 0.62302, "num_pos": 4.96, "pos_recall": 74.70848, "loss": 1.26627, "grad_norm": 4.84578, "time": 0.28435}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.01, "memory": 3209, "data_time": 0.00392, "loss_cls": 0.55929, "loss_bbox": 0.64298, "num_pos": 4.56, "pos_recall": 73.77076, "loss": 1.20227, "grad_norm": 4.00639, "time": 0.2892}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.01, "memory": 3209, "data_time": 0.00418, "loss_cls": 0.57984, "loss_bbox": 0.53252, "num_pos": 4.44, "pos_recall": 75.83396, "loss": 1.11237, "grad_norm": 3.62771, "time": 0.28345}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.01, "memory": 3209, "data_time": 0.00428, "loss_cls": 0.60136, "loss_bbox": 0.55854, "num_pos": 4.6, "pos_recall": 72.12912, "loss": 1.15991, "grad_norm": 3.76557, "time": 0.28086}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.01, "memory": 3209, "data_time": 0.00407, "loss_cls": 0.60205, "loss_bbox": 0.59057, "num_pos": 4.51, "pos_recall": 80.34286, "loss": 1.19261, "grad_norm": 4.61314, "time": 0.2837}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.01, "memory": 3209, "data_time": 0.00416, "loss_cls": 0.64048, "loss_bbox": 0.54333, "num_pos": 5.12, "pos_recall": 61.66607, "loss": 1.18381, "grad_norm": 3.39638, "time": 0.28167}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.01, "memory": 3209, "data_time": 0.00406, "loss_cls": 0.61879, "loss_bbox": 0.52531, "num_pos": 4.86, "pos_recall": 74.45938, "loss": 1.14411, "grad_norm": 3.5253, "time": 0.28906}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.01, "memory": 3209, "data_time": 0.00406, "loss_cls": 0.67424, "loss_bbox": 0.58424, "num_pos": 4.54, "pos_recall": 71.16416, "loss": 1.25848, "grad_norm": 3.26695, "time": 0.28195}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.01, "memory": 3209, "data_time": 0.00391, "loss_cls": 0.57286, "loss_bbox": 0.57663, "num_pos": 4.3, "pos_recall": 81.81003, "loss": 1.14949, "grad_norm": 3.55532, "time": 0.28205}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.01, "memory": 3209, "data_time": 0.00403, "loss_cls": 0.5661, "loss_bbox": 0.53885, "num_pos": 4.58, "pos_recall": 79.21544, "loss": 1.10495, "grad_norm": 3.74835, "time": 0.29219}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.01, "memory": 3209, "data_time": 0.00406, "loss_cls": 0.68592, "loss_bbox": 0.64175, "num_pos": 4.71, "pos_recall": 74.28373, "loss": 1.32767, "grad_norm": 4.68475, "time": 0.29328}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.01, "memory": 3209, "data_time": 0.00407, "loss_cls": 0.64491, "loss_bbox": 0.59557, "num_pos": 4.07, "pos_recall": 76.10289, "loss": 1.24048, "grad_norm": 3.79653, "time": 0.29455}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.01, "memory": 3209, "data_time": 0.00415, "loss_cls": 0.582, "loss_bbox": 0.61588, "num_pos": 4.82, "pos_recall": 75.92869, "loss": 1.19787, "grad_norm": 3.94423, "time": 0.29333}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.01, "memory": 3209, "data_time": 0.004, "loss_cls": 0.60595, "loss_bbox": 0.572, "num_pos": 3.9, "pos_recall": 77.44598, "loss": 1.17795, "grad_norm": 4.06942, "time": 0.29252}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.01, "memory": 3209, "data_time": 0.0041, "loss_cls": 0.58066, "loss_bbox": 0.55374, "num_pos": 4.99, "pos_recall": 72.27434, "loss": 1.1344, "grad_norm": 3.69452, "time": 0.29401}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.01, "memory": 3209, "data_time": 0.01726, "loss_cls": 0.61355, "loss_bbox": 0.62509, "num_pos": 4.11, "pos_recall": 78.55751, "loss": 1.23863, "grad_norm": 4.6038, "time": 0.30621}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.01, "memory": 3209, "data_time": 0.00414, "loss_cls": 0.64192, "loss_bbox": 0.63208, "num_pos": 4.52, "pos_recall": 77.18828, "loss": 1.274, "grad_norm": 3.83504, "time": 0.29472}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.01, "memory": 3209, "data_time": 0.00403, "loss_cls": 0.70301, "loss_bbox": 0.63048, "num_pos": 4.53, "pos_recall": 69.53615, "loss": 1.33349, "grad_norm": 4.03235, "time": 0.29219}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.01, "memory": 3209, "data_time": 0.00412, "loss_cls": 0.70004, "loss_bbox": 0.60223, "num_pos": 4.66, "pos_recall": 61.90702, "loss": 1.30227, "grad_norm": 4.52373, "time": 0.29393}
{"mode": "train", "epoch": 2, "iter": 1250, "lr": 0.01, "memory": 3209, "data_time": 0.00407, "loss_cls": 0.64097, "loss_bbox": 0.65343, "num_pos": 5.53, "pos_recall": 78.55769, "loss": 1.2944, "grad_norm": 4.42054, "time": 0.29544}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.01, "memory": 3209, "data_time": 0.00411, "loss_cls": 0.61883, "loss_bbox": 0.56162, "num_pos": 4.45, "pos_recall": 78.45476, "loss": 1.18045, "grad_norm": 4.06575, "time": 0.29413}
{"mode": "train", "epoch": 2, "iter": 1350, "lr": 0.01, "memory": 3209, "data_time": 0.00417, "loss_cls": 0.61358, "loss_bbox": 0.57478, "num_pos": 4.74, "pos_recall": 74.5489, "loss": 1.18836, "grad_norm": 3.46408, "time": 0.28423}
{"mode": "train", "epoch": 2, "iter": 1400, "lr": 0.01, "memory": 3209, "data_time": 0.00414, "loss_cls": 0.64337, "loss_bbox": 0.59335, "num_pos": 4.19, "pos_recall": 68.34427, "loss": 1.23672, "grad_norm": 3.18861, "time": 0.28388}
{"mode": "train", "epoch": 2, "iter": 1450, "lr": 0.01, "memory": 3209, "data_time": 0.00695, "loss_cls": 0.61276, "loss_bbox": 0.56265, "num_pos": 4.01, "pos_recall": 78.47359, "loss": 1.17541, "grad_norm": 3.90268, "time": 0.2924}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.01, "memory": 3209, "data_time": 0.00422, "loss_cls": 0.55644, "loss_bbox": 0.53033, "num_pos": 4.36, "pos_recall": 67.37923, "loss": 1.08678, "grad_norm": 3.38255, "time": 0.29264}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.01, "memory": 3209, "data_time": 0.00423, "loss_cls": 0.63056, "loss_bbox": 0.60835, "num_pos": 4.51, "pos_recall": 73.92849, "loss": 1.23892, "grad_norm": 3.9504, "time": 0.29254}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.01, "memory": 3209, "data_time": 0.05781, "loss_cls": 0.63226, "loss_bbox": 0.6026, "num_pos": 3.83, "pos_recall": 70.2575, "loss": 1.23486, "grad_norm": 5.35225, "time": 0.34442}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.01, "memory": 3209, "data_time": 0.13601, "loss_cls": 0.55387, "loss_bbox": 0.53612, "num_pos": 4.1, "pos_recall": 84.32619, "loss": 1.08999, "grad_norm": 4.18854, "time": 0.41751}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.01, "memory": 3209, "data_time": 0.0039, "loss_cls": 0.63076, "loss_bbox": 0.57261, "num_pos": 4.23, "pos_recall": 63.02655, "loss": 1.20337, "grad_norm": 4.3443, "time": 0.28808}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.01, "memory": 3209, "data_time": 0.00649, "loss_cls": 0.66126, "loss_bbox": 0.64144, "num_pos": 4.25, "pos_recall": 70.77778, "loss": 1.3027, "grad_norm": 5.04734, "time": 0.28698}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.01, "memory": 3209, "data_time": 0.00409, "loss_cls": 0.68983, "loss_bbox": 0.61983, "num_pos": 3.87, "pos_recall": 75.40113, "loss": 1.30966, "grad_norm": 3.62727, "time": 0.28933}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.01, "memory": 3209, "data_time": 0.00412, "loss_cls": 0.60357, "loss_bbox": 0.54756, "num_pos": 4.39, "pos_recall": 83.943, "loss": 1.15113, "grad_norm": 3.29307, "time": 0.2894}
