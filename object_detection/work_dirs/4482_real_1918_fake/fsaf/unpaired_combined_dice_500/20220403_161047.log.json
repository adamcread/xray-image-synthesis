{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA TITAN Xp\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: \nGCC: gcc (Ubuntu 8.4.0-3ubuntu2) 8.4.0\nPyTorch: 1.7.1+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu110\nOpenCV: 4.5.5\nMMCV: 1.4.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.21.0+6b93176", "config": "model = dict(\n    type='FSAF',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='FSAFHead',\n        num_classes=2,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=1,\n            scales_per_octave=1,\n            ratios=[1.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(type='TBLRBBoxCoder', normalizer=4.0),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0,\n            reduction='none'),\n        loss_bbox=dict(\n            type='IoULoss', eps=1e-06, loss_weight=1.0, reduction='none'),\n        reg_decoded_bbox=True),\n    train_cfg=dict(\n        assigner=dict(\n            type='CenterRegionAssigner',\n            pos_scale=0.2,\n            neg_scale=0.2,\n            min_pos_iof=0.01),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/composed/4482_real_1918_fake/helper/annotation/unpaired_combined_dice_500.json',\n        img_prefix=\n        '../dataset/xray/composed/4482_real_1918_fake/unpaired_combined_dice_500/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '../dataset/xray/unpaired/helper/annotation/dbf3_test_resized.json',\n        img_prefix='../dataset/xray/unpaired/resized_128x128/composed_images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('FIREARM', 'KNIFE')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/fsaf_r101_fpn_1x_coco-9e71098f.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('FIREARM', 'KNIFE')\nwork_dir = 'work_dirs/4482_real_1918_fake/fsaf/unpaired_combined_dice_500/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1326992574, "exp_name": "fsaf_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3152, "data_time": 0.05053, "loss_cls": 1.02662, "loss_bbox": 0.56368, "num_pos": 7.11, "pos_recall": 56.32528, "loss": 1.5903, "grad_norm": 21.65231, "time": 0.41113}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3152, "data_time": 0.00547, "loss_cls": 0.67823, "loss_bbox": 0.44249, "num_pos": 6.62, "pos_recall": 62.28129, "loss": 1.12072, "grad_norm": 16.46043, "time": 0.35181}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 3152, "data_time": 0.00538, "loss_cls": 0.71126, "loss_bbox": 0.46467, "num_pos": 5.76, "pos_recall": 65.40325, "loss": 1.17592, "grad_norm": 12.69996, "time": 0.35152}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 3152, "data_time": 0.00548, "loss_cls": 0.62497, "loss_bbox": 0.46065, "num_pos": 5.78, "pos_recall": 70.82899, "loss": 1.08562, "grad_norm": 10.2093, "time": 0.3529}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 3152, "data_time": 0.00556, "loss_cls": 0.63268, "loss_bbox": 0.4808, "num_pos": 6.05, "pos_recall": 75.38077, "loss": 1.11347, "grad_norm": 9.85507, "time": 0.3576}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 3152, "data_time": 0.00542, "loss_cls": 0.61455, "loss_bbox": 0.48404, "num_pos": 5.25, "pos_recall": 67.52083, "loss": 1.09859, "grad_norm": 8.85268, "time": 0.34754}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 3152, "data_time": 0.00557, "loss_cls": 0.60794, "loss_bbox": 0.50707, "num_pos": 5.74, "pos_recall": 69.10137, "loss": 1.11501, "grad_norm": 8.00169, "time": 0.35298}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 3152, "data_time": 0.00549, "loss_cls": 0.63968, "loss_bbox": 0.5376, "num_pos": 5.2, "pos_recall": 77.80283, "loss": 1.17728, "grad_norm": 8.73331, "time": 0.35159}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 3152, "data_time": 0.00558, "loss_cls": 0.62403, "loss_bbox": 0.59388, "num_pos": 5.68, "pos_recall": 70.37467, "loss": 1.21791, "grad_norm": 5.86888, "time": 0.35237}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 3152, "data_time": 0.00551, "loss_cls": 0.66918, "loss_bbox": 0.59391, "num_pos": 5.98, "pos_recall": 61.39134, "loss": 1.26309, "grad_norm": 7.74588, "time": 0.35229}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 3152, "data_time": 0.00522, "loss_cls": 0.64744, "loss_bbox": 0.67208, "num_pos": 5.27, "pos_recall": 70.16487, "loss": 1.31952, "grad_norm": 5.85617, "time": 0.34582}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 3152, "data_time": 0.0057, "loss_cls": 0.64185, "loss_bbox": 0.60894, "num_pos": 5.27, "pos_recall": 70.44197, "loss": 1.25079, "grad_norm": 5.80445, "time": 0.35055}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 3152, "data_time": 0.02956, "loss_cls": 0.63247, "loss_bbox": 0.54876, "num_pos": 6.04, "pos_recall": 81.75658, "loss": 1.18123, "grad_norm": 5.54522, "time": 0.38109}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 3152, "data_time": 0.00549, "loss_cls": 0.55015, "loss_bbox": 0.52712, "num_pos": 5.96, "pos_recall": 73.43664, "loss": 1.07727, "grad_norm": 4.60397, "time": 0.34944}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 3152, "data_time": 0.00584, "loss_cls": 0.67651, "loss_bbox": 0.69457, "num_pos": 5.75, "pos_recall": 71.58156, "loss": 1.37107, "grad_norm": 6.45129, "time": 0.3549}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 3152, "data_time": 0.00571, "loss_cls": 0.71221, "loss_bbox": 0.69655, "num_pos": 6.46, "pos_recall": 68.13635, "loss": 1.40877, "grad_norm": 5.83267, "time": 0.35459}
